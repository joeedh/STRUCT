[
  {
    "name": "STRUCT#forEach",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 298,
        "line": "  constructor() {\r"
      }
    ],
    "codeParams": [],
    "docParams": [
      "func",
      "thisvar"
    ]
  },
  {
    "name": "STRUCT#parse_structs",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 325,
        "line": "  forEach(func, thisvar) {\r"
      }
    ],
    "codeParams": [
      "func",
      "thisvar"
    ],
    "docParams": [
      "buf",
      "defined_classes"
    ]
  },
  {
    "name": "STRUCT#register",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 339,
        "line": "  //defaults to structjs.manager\r"
      },
      {
        "lineNumber": 340,
        "line": "  parse_structs(buf, defined_classes) {\r"
      }
    ],
    "codeParams": [
      "buf",
      "defined_classes"
    ],
    "docParams": [
      "cls",
      "structName"
    ]
  },
  {
    "name": "STRUCT#get_struct_id",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 417,
        "line": "  add_class(cls, structName) {\r"
      }
    ],
    "codeParams": [
      "cls",
      "structName"
    ],
    "docParams": [
      "id"
    ]
  },
  {
    "name": "STRUCT#get_struct",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 451,
        "line": "  get_struct_id(id) {\r"
      }
    ],
    "codeParams": [
      "id"
    ],
    "docParams": [
      "name"
    ]
  },
  {
    "name": "STRUCT#inherit",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 463,
        "line": "  get_struct_cls(name) {\r"
      }
    ],
    "codeParams": [
      "name"
    ],
    "docParams": [
      "child",
      "parent",
      "structName"
    ]
  },
  {
    "name": "STRUCT#Super",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 471,
        "line": "  static inherit(child, parent, structName=child.name) {\r"
      }
    ],
    "codeParams": [
      "child",
      "parent",
      "structName"
    ],
    "docParams": [
      "obj",
      "reader"
    ]
  },
  {
    "name": "STRUCT#chain_fromSTRUCT",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 482,
        "line": "  /** invoke loadSTRUCT methods on parent objects.  note that \r"
      },
      {
        "lineNumber": 483,
        "line": "    reader() is only called once.  it is called however.*/\r"
      },
      {
        "lineNumber": 484,
        "line": "  static Super(obj, reader) {\r"
      }
    ],
    "codeParams": [
      "obj",
      "reader"
    ],
    "docParams": [
      "cls",
      "reader"
    ]
  },
  {
    "name": "STRUCT#formatStruct",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 507,
        "line": "  /** deprecated.  used with old fromSTRUCT interface. */\r"
      },
      {
        "lineNumber": 508,
        "line": "  static chain_fromSTRUCT(cls, reader) {\r"
      }
    ],
    "codeParams": [
      "cls",
      "reader"
    ],
    "docParams": [
      "stt",
      "internal_only",
      "no_helper_js"
    ]
  },
  {
    "name": "STRUCT#_env_call",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 546,
        "line": "  static fmt_struct(stt, internal_only, no_helper_js) {\r"
      }
    ],
    "codeParams": [
      "stt",
      "internal_only",
      "no_helper_js"
    ],
    "docParams": [
      "code",
      "obj",
      "env"
    ]
  },
  {
    "name": "STRUCT#write_struct",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 593,
        "line": "  _env_call(code, obj, env) {\r"
      }
    ],
    "codeParams": [
      "code",
      "obj",
      "env"
    ],
    "docParams": [
      "data",
      "obj",
      "stt"
    ]
  },
  {
    "name": "STRUCT#write_object",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 640,
        "line": "  write_struct(data, obj, stt) {\r"
      }
    ],
    "codeParams": [
      "data",
      "obj",
      "stt"
    ],
    "docParams": [
      "data",
      "obj"
    ]
  },
  {
    "name": "STRUCT#read_object",
    "filePath": "src/struct_intern.js",
    "lines": [
      {
        "lineNumber": 673,
        "line": " write_object(data, obj) {\r"
      }
    ],
    "codeParams": [
      "data",
      "obj"
    ],
    "docParams": [
      "data",
      "cls_or_struct_id",
      "uctx"
    ]
  },
  {
    "name": "parser#parse",
    "filePath": "src/struct_parseutil.js",
    "lines": [
      {
        "lineNumber": 191,
        "line": "  constructor(lexer, errfunc) {\r"
      }
    ],
    "codeParams": [
      "lexer",
      "errfunc"
    ],
    "docParams": [
      "data",
      "err_on_unconsumed"
    ]
  },
  {
    "name": "parser#input",
    "filePath": "src/struct_parseutil.js",
    "lines": [
      {
        "lineNumber": 197,
        "line": "  parse(data, err_on_unconsumed) {\r"
      }
    ],
    "codeParams": [
      "data",
      "err_on_unconsumed"
    ],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "parser#error",
    "filePath": "src/struct_parseutil.js",
    "lines": [
      {
        "lineNumber": 212,
        "line": "  input(data) {\r"
      }
    ],
    "codeParams": [
      "data"
    ],
    "docParams": [
      "token",
      "msg"
    ]
  },
  {
    "name": "parser#peek",
    "filePath": "src/struct_parseutil.js",
    "lines": [
      {
        "lineNumber": 216,
        "line": "  error(token, msg) {\r"
      }
    ],
    "codeParams": [
      "token",
      "msg"
    ],
    "docParams": []
  },
  {
    "name": "parser#optional",
    "filePath": "src/struct_parseutil.js",
    "lines": [
      {
        "lineNumber": 260,
        "line": "  next() {\r"
      }
    ],
    "codeParams": [],
    "docParams": [
      "type"
    ]
  },
  {
    "name": "parser#at_end",
    "filePath": "src/struct_parseutil.js",
    "lines": [
      {
        "lineNumber": 267,
        "line": "  optional(type) {\r"
      }
    ],
    "codeParams": [
      "type"
    ],
    "docParams": []
  },
  {
    "name": "parser#expect",
    "filePath": "src/struct_parseutil.js",
    "lines": [
      {
        "lineNumber": 278,
        "line": "  at_end() {\r"
      }
    ],
    "codeParams": [],
    "docParams": [
      "type",
      "msg"
    ]
  },
  {
    "name": "FileHelper#read",
    "filePath": "src/struct_filehelper.js",
    "lines": [
      {
        "lineNumber": 66,
        "line": "  //(it will convert to FileParams)\r"
      },
      {
        "lineNumber": 67,
        "line": "  constructor(params) {\r"
      }
    ],
    "codeParams": [
      "params"
    ],
    "docParams": [
      "dataview"
    ]
  },
  {
    "name": "FileHelper#write",
    "filePath": "src/struct_filehelper.js",
    "lines": [
      {
        "lineNumber": 87,
        "line": "  read(dataview) {\r"
      }
    ],
    "codeParams": [
      "dataview"
    ],
    "docParams": [
      "blocks"
    ]
  },
  {
    "name": "FileHelper#makeBlock",
    "filePath": "src/struct_filehelper.js",
    "lines": [
      {
        "lineNumber": 182,
        "line": "  writeBase64(blocks) {\r"
      }
    ],
    "codeParams": [
      "blocks"
    ],
    "docParams": [
      "type",
      "data"
    ]
  },
  {
    "name": "FileHelper#readBase64",
    "filePath": "src/struct_filehelper.js",
    "lines": [
      {
        "lineNumber": 195,
        "line": "  makeBlock(type, data) {\r"
      }
    ],
    "codeParams": [
      "type",
      "data"
    ],
    "docParams": [
      "base64"
    ]
  }
]