Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    OPENCOM
    COMMENT
    TEMPLATE
    ALL
    newline
    MLSTRLIT
    BACKSLASH
    EMPTYLINE
    VARIABLE
    STRUCT
    SLASHR
    CLOSECOM
    THEN
    BNEGATE

Grammar

Rule 0     S' -> statementlist
Rule 1     statementlist -> statement
Rule 2     statementlist -> statement_nonctrl
Rule 3     statementlist -> statementlist statement
Rule 4     statementlist -> statementlist statement_nonctrl
Rule 5     statementlist -> <empty>
Rule 6     push_scope -> <empty>
Rule 7     pop_scope -> <empty>
Rule 8     opt_colon_type -> COLON var_type
Rule 9     opt_colon_type -> <empty>
Rule 10    assign_statement -> assign COLON var_type
Rule 11    assign_statement -> <empty>
Rule 12    statement -> function
Rule 13    statement -> class
Rule 14    statement -> if
Rule 15    statement -> else
Rule 16    statement -> while
Rule 17    statement -> with
Rule 18    statement -> dowhile
Rule 19    statement -> for
Rule 20    statement -> return SEMI
Rule 21    statement -> yield SEMI
Rule 22    statement -> break SEMI
Rule 23    statement -> continue SEMI
Rule 24    statement -> throw SEMI
Rule 25    statement -> try
Rule 26    statement -> catch
Rule 27    statement -> switch
Rule 28    statement -> func_native SEMI
Rule 29    statement_nonctrl -> expr SEMI
Rule 30    statement_nonctrl -> var_decl SEMI
Rule 31    statement_nonctrl -> funcref SEMI
Rule 32    statement_nonctrl -> SEMI
Rule 33    statement_nonctrl -> if
Rule 34    statement_nonctrl -> else
Rule 35    statement_nonctrl -> for
Rule 36    statement_nonctrl -> dowhile
Rule 37    statement_nonctrl -> while
Rule 38    statement_nonctrl -> return SEMI
Rule 39    statement_nonctrl -> yield SEMI
Rule 40    statement_nonctrl -> break SEMI
Rule 41    statement_nonctrl -> continue SEMI
Rule 42    statement_nonctrl -> throw SEMI
Rule 43    statement_nonctrl -> try
Rule 44    statement_nonctrl -> catch
Rule 45    statement_nonctrl -> delete SEMI
Rule 46    var_decl_or_type -> var_decl
Rule 47    var_decl_or_type -> var_type
Rule 48    templatedeflist -> var_type
Rule 49    templatedeflist -> var_type ASSIGN var_type
Rule 50    templatedeflist -> templatedeflist COMMA var_type
Rule 51    templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type
Rule 52    template -> lthan_restrict templatedeflist gthan_restrict
Rule 53    type_modifiers -> type_modifiers UNSIGNED
Rule 54    type_modifiers -> type_modifiers SIGNED
Rule 55    type_modifiers -> type_modifiers CONST
Rule 56    type_modifiers -> GLOBAL
Rule 57    type_modifiers -> VAR
Rule 58    type_modifiers -> STATIC
Rule 59    left_id -> ID
Rule 60    id_opt -> ID
Rule 61    id_opt -> <empty>
Rule 62    template_ref -> lthan_restrict simple_templatedeflist gthan_restrict
Rule 63    template_ref_validate -> lthan_restrict simple_templatedeflist gthan_restrict
Rule 64    template_validate -> template
Rule 65    template_validate -> template_ref_validate
Rule 66    lthan_restrict -> TLTHAN
Rule 67    gthan_restrict -> TGTHAN
Rule 68    id_1 -> ID
Rule 69    var_decl_no_list -> var_type
Rule 70    var_decl_no_list -> type_modifiers var_decl_no_list
Rule 71    var_decl_no_list -> var_decl_no_list ASSIGN expr
Rule 72    var_decl -> type_modifiers var_type
Rule 73    var_decl -> var_decl ASSIGN expr
Rule 74    var_decl -> var_decl COMMA ID
Rule 75    var_decl -> var_decl COMMA ID ASSIGN expr
Rule 76    id_var_type -> ID
Rule 77    id_var_decl -> ID
Rule 78    empty -> empty
Rule 79    empty -> <empty>
Rule 80    var_type -> var_type id_var_type
Rule 81    var_type -> id_var_type
Rule 82    var_type -> INT
Rule 83    var_type -> SHORT
Rule 84    var_type -> FLOAT
Rule 85    var_type -> DOUBLE
Rule 86    var_type -> CHAR
Rule 87    var_type -> BYTE
Rule 88    var_type -> INFERRED
Rule 89    var_type -> var_type template_ref
Rule 90    typeof_opt -> TYPEOF
Rule 91    typeof_opt -> <empty>
Rule 92    simple_templatedeflist -> typeof_opt var_type
Rule 93    simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type
Rule 94    simple_var_decl -> VAR ID
Rule 95    simple_var_decl -> ID
Rule 96    cmplx_assign -> ASSIGNPLUS
Rule 97    cmplx_assign -> ASSIGNMINUS
Rule 98    cmplx_assign -> ASSIGNDIVIDE
Rule 99    cmplx_assign -> ASSIGNTIMES
Rule 100   cmplx_assign -> ASSIGNBOR
Rule 101   cmplx_assign -> ASSIGNBAND
Rule 102   cmplx_assign -> ASSIGNBXOR
Rule 103   cmplx_assign -> ASSIGNLSHIFT
Rule 104   cmplx_assign -> ASSIGNRSHIFT
Rule 105   cmplx_assign -> ASSIGNRRSHIFT
Rule 106   cmplx_assign -> ASSIGNLLSHIFT
Rule 107   cmplx_assign -> ASSIGN
Rule 108   throw -> THROW expr
Rule 109   assign -> expr cmplx_assign expr
Rule 110   assign -> assign cmplx_assign expr
Rule 111   assign -> expr
Rule 112   exprlist -> expr
Rule 113   exprlist -> exprlist COMMA expr
Rule 114   class -> CLASS ID template_opt class_tail
Rule 115   exprclass -> CLASS id_opt class_tail
Rule 116   class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET
Rule 117   class_list -> var_type
Rule 118   class_list -> class_list COMMA var_type
Rule 119   class_heritage -> EXTENDS class_list
Rule 120   class_heritage_opt -> class_heritage
Rule 121   class_heritage_opt -> <empty>
Rule 122   class_body_opt -> class_element_list
Rule 123   class_body_opt -> <empty>
Rule 124   class_element_list -> class_element
Rule 125   class_element_list -> class_element_list class_element
Rule 126   class_element -> method_def
Rule 127   class_element -> STATIC method_def
Rule 128   method -> ID LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
Rule 129   getset_id -> ID
Rule 130   getset_id -> NUMBER
Rule 131   method_def -> method
Rule 132   method_def -> ID getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
Rule 133   method_def -> ID getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
Rule 134   setter_param_list -> ID
Rule 135   template_ref_opt -> template_ref
Rule 136   template_ref_opt -> <empty>
Rule 137   func_call -> template_ref_opt LPAREN exprlist RPAREN
Rule 138   func_call -> template_ref_opt LPAREN RPAREN
Rule 139   funcdeflist -> var_decl_no_list
Rule 140   funcdeflist -> funcdeflist COMMA var_decl_no_list
Rule 141   funcdeflist -> <empty>
Rule 142   template_opt -> template
Rule 143   template_opt -> <empty>
Rule 144   func_type_opt -> COLON var_type_opt
Rule 145   func_type_opt -> <empty>
Rule 146   funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
Rule 147   func_native -> NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
Rule 148   function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
Rule 149   lbracket_restrict -> LBRACKET
Rule 150   rbracket_restrict -> RBRACKET
Rule 151   var_type_opt -> var_type
Rule 152   var_type_opt -> <empty>
Rule 153   colon_opt -> COLON
Rule 154   colon_opt -> <empty>
Rule 155   exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
Rule 156   exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
Rule 157   array_literal -> LSBRACKET exprlist RSBRACKET
Rule 158   array_literal -> LSBRACKET RSBRACKET
Rule 159   id_str_or_num -> ID
Rule 160   id_str_or_num -> NUMBER
Rule 161   id_str_or_num -> STRINGLIT
Rule 162   typeof -> TYPEOF expr
Rule 163   obj_lit_list -> id_str_or_num COLON expr
Rule 164   obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON expr
Rule 165   obj_lit_list -> obj_lit_list COMMA
Rule 166   obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict
Rule 167   obj_literal -> lbracket_restrict rbracket_restrict
Rule 168   delete -> DELETE expr
Rule 169   new -> NEW expr
Rule 170   inc -> expr INC
Rule 171   inc -> INC expr
Rule 172   dec -> expr DEC
Rule 173   dec -> DEC expr
Rule 174   not -> NOT expr
Rule 175   bitinv -> BITINV expr
Rule 176   strlit -> STRINGLIT
Rule 177   lparen_restrict -> LPAREN
Rule 178   rparen_restrict -> RPAREN
Rule 179   lsbracket_restrict -> LSBRACKET
Rule 180   rsbracket_restrict -> RSBRACKET
Rule 181   expr -> NUMBER
Rule 182   expr -> strlit
Rule 183   expr -> ID
Rule 184   expr -> ID template_ref
Rule 185   expr -> template_ref
Rule 186   expr -> array_literal
Rule 187   expr -> exprfunction
Rule 188   expr -> obj_literal
Rule 189   expr -> expr cmplx_assign expr
Rule 190   expr -> expr cmplx_assign expr COLON var_type SEMI
Rule 191   expr -> expr RSHIFT expr
Rule 192   expr -> expr LSHIFT expr
Rule 193   expr -> expr LLSHIFT expr
Rule 194   expr -> expr RRSHIFT expr
Rule 195   expr -> expr DOT expr
Rule 196   expr -> expr LAND expr
Rule 197   expr -> expr LOR expr
Rule 198   expr -> expr BOR expr
Rule 199   expr -> expr INSTANCEOF expr
Rule 200   expr -> expr BXOR expr
Rule 201   expr -> expr BAND expr
Rule 202   expr -> expr EQUAL expr
Rule 203   expr -> expr EQUAL_STRICT expr
Rule 204   expr -> expr NOTEQUAL_STRICT expr
Rule 205   expr -> expr GTHAN expr
Rule 206   expr -> expr GTHANEQ expr
Rule 207   expr -> expr LTHAN expr
Rule 208   expr -> expr MOD expr
Rule 209   expr -> expr LTHANEQ expr
Rule 210   expr -> expr NOTEQUAL expr
Rule 211   expr -> expr PLUS expr
Rule 212   expr -> expr MINUS expr
Rule 213   expr -> expr DIVIDE expr
Rule 214   expr -> expr TIMES expr
Rule 215   expr -> expr IN expr
Rule 216   expr -> lparen_restrict expr rparen_restrict
Rule 217   expr -> expr func_call
Rule 218   expr -> expr lsbracket_restrict expr rsbracket_restrict
Rule 219   expr -> expr QEST expr COLON expr
Rule 220   expr -> expr_uminus
Rule 221   expr -> not
Rule 222   expr -> bitinv
Rule 223   expr -> new
Rule 224   expr -> inc
Rule 225   expr -> dec
Rule 226   expr -> typeof
Rule 227   expr -> re_lit
Rule 228   expr -> expr COMMA expr
Rule 229   expr_uminus -> MINUS expr
Rule 230   paren_expr -> LPAREN expr RPAREN
Rule 231   paren_expr -> LPAREN RPAREN
Rule 232   assign_opt -> assign
Rule 233   assign_opt -> <empty>
Rule 234   expr_opt -> expr
Rule 235   expr_opt -> <empty>
Rule 236   re_lit -> REGEXPR
Rule 237   for_var_decl -> ID
Rule 238   for_var_decl -> ID ASSIGN expr
Rule 239   for_var_decl -> var_decl
Rule 240   for_decl -> for_var_decl SEMI expr_opt SEMI expr_opt
Rule 241   for_decl -> for_var_decl IN expr
Rule 242   for -> FOR LPAREN for_decl RPAREN statement_nonctrl
Rule 243   for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
Rule 244   ctrl_statement -> statement_nonctrl
Rule 245   ctrl_statement -> LBRACKET statementlist_opt RBRACKET
Rule 246   ctrl_statement -> SEMI
Rule 247   dowhile -> DO ctrl_statement WHILE paren_expr
Rule 248   while -> WHILE paren_expr statement_nonctrl
Rule 249   while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET
Rule 250   default_case -> DEFAULT COLON statementlist
Rule 251   statementlist_opt -> statementlist
Rule 252   statementlist_opt -> <empty>
Rule 253   case_clause -> CASE expr COLON statementlist_opt
Rule 254   case_clauses -> case_clause
Rule 255   case_clauses -> case_clauses case_clause
Rule 256   case_clauses_opt -> case_clauses
Rule 257   case_clauses_opt -> <empty>
Rule 258   case_block -> case_clauses
Rule 259   case_block -> case_clauses_opt default_case case_clauses_opt
Rule 260   switch -> SWITCH paren_expr LBRACKET case_block RBRACKET
Rule 261   with -> WITH paren_expr ctrl_statement
Rule 262   if -> IF paren_expr ctrl_statement
Rule 263   try -> TRY statement_nonctrl
Rule 264   try -> TRY LBRACKET statementlist RBRACKET
Rule 265   try -> TRY LBRACKET RBRACKET
Rule 266   catch -> CATCH paren_expr statement_nonctrl
Rule 267   catch -> CATCH paren_expr LBRACKET statementlist RBRACKET
Rule 268   else -> ELSE ctrl_statement
Rule 269   break -> BREAK
Rule 270   continue -> CONTINUE
Rule 271   return -> RETURN expr
Rule 272   return -> RETURN
Rule 273   yield -> YIELD expr
Rule 274   yield -> YIELD

Terminals, with rules where they appear

ALL                  : 
ASSIGN               : 49 51 71 73 75 107 238
ASSIGNBAND           : 101
ASSIGNBOR            : 100
ASSIGNBXOR           : 102
ASSIGNDIVIDE         : 98
ASSIGNLLSHIFT        : 106
ASSIGNLSHIFT         : 103
ASSIGNMINUS          : 97
ASSIGNPLUS           : 96
ASSIGNRRSHIFT        : 105
ASSIGNRSHIFT         : 104
ASSIGNTIMES          : 99
BACKSLASH            : 
BAND                 : 201
BITINV               : 175
BNEGATE              : 
BOR                  : 198
BREAK                : 269
BXOR                 : 200
BYTE                 : 87
CASE                 : 253
CATCH                : 266 267
CHAR                 : 86
CLASS                : 114 115
CLOSECOM             : 
COLON                : 8 10 144 153 163 164 190 219 250 253
COMMA                : 50 51 74 75 93 113 118 140 164 165 228
COMMENT              : 
CONST                : 55
CONTINUE             : 270
DEC                  : 172 173
DEFAULT              : 250
DELETE               : 168
DIVIDE               : 213
DO                   : 247
DOT                  : 195
DOUBLE               : 85
ELSE                 : 268
EMPTYLINE            : 
EQUAL                : 202
EQUAL_STRICT         : 203
EXTENDS              : 119
FLOAT                : 84
FOR                  : 242 243
FUNCTION             : 146 147 148 155 156
GLOBAL               : 56
GTHAN                : 205
GTHANEQ              : 206
ID                   : 59 60 68 74 75 76 77 94 95 114 128 129 132 133 134 146 147 148 159 183 184 237 238
IF                   : 262
IN                   : 215 241
INC                  : 170 171
INFERRED             : 88
INSTANCEOF           : 199
INT                  : 82
LAND                 : 196
LBRACKET             : 116 128 132 133 148 149 243 245 249 260 264 265 267
LLSHIFT              : 193
LOR                  : 197
LPAREN               : 128 132 133 137 138 146 147 148 155 156 177 230 231 242 243
LSBRACKET            : 157 158 179
LSHIFT               : 192
LTHAN                : 207
LTHANEQ              : 209
MINUS                : 212 229
MLSTRLIT             : 
MOD                  : 208
NATIVE               : 147
NEW                  : 169
NOT                  : 174
NOTEQUAL             : 210
NOTEQUAL_STRICT      : 204
NUMBER               : 130 160 181
OPENCOM              : 
PLUS                 : 211
QEST                 : 219
RBRACKET             : 116 128 132 133 148 150 243 245 249 260 264 265 267
REGEXPR              : 236
RETURN               : 271 272
RPAREN               : 128 132 133 137 138 146 147 148 155 156 178 230 231 242 243
RRSHIFT              : 194
RSBRACKET            : 157 158 180
RSHIFT               : 191
SEMI                 : 20 21 22 23 24 28 29 30 31 32 38 39 40 41 42 45 190 240 240 246
SHORT                : 83
SIGNED               : 54
SLASHR               : 
STATIC               : 58 127
STRINGLIT            : 161 176
STRUCT               : 
SWITCH               : 260
TEMPLATE             : 
TGTHAN               : 67
THEN                 : 
THROW                : 108
TIMES                : 214
TLTHAN               : 66
TRY                  : 263 264 265
TYPEOF               : 90 162
UNSIGNED             : 53
VAR                  : 57 94
VARIABLE             : 
WHILE                : 247 248 249
WITH                 : 261
YIELD                : 273 274
error                : 
newline              : 

Nonterminals, with rules where they appear

array_literal        : 186
assign               : 10 110 232
assign_opt           : 
assign_statement     : 
bitinv               : 222
break                : 22 40
case_block           : 260
case_clause          : 254 255
case_clauses         : 255 256 258
case_clauses_opt     : 259 259
catch                : 26 44
class                : 13
class_body_opt       : 116
class_element        : 124 125
class_element_list   : 122 125
class_heritage       : 120
class_heritage_opt   : 116
class_list           : 118 119
class_tail           : 114 115
cmplx_assign         : 109 110 189 190
colon_opt            : 155 156
continue             : 23 41
ctrl_statement       : 247 261 262 268
dec                  : 225
default_case         : 259
delete               : 45
dowhile              : 18 36
else                 : 15 34
empty                : 78
expr                 : 29 71 73 75 108 109 109 110 111 112 113 162 163 164 168 169 170 171 172 173 174 175 189 189 190 190 191 191 192 192 193 193 194 194 195 195 196 196 197 197 198 198 199 199 200 200 201 201 202 202 203 203 204 204 205 205 206 206 207 207 208 208 209 209 210 210 211 211 212 212 213 213 214 214 215 215 216 217 218 218 219 219 219 228 228 229 230 234 238 241 253 271 273
expr_opt             : 240 240
expr_uminus          : 220
exprclass            : 
exprfunction         : 187
exprlist             : 113 137 157
for                  : 19 35
for_decl             : 242 243
for_var_decl         : 240 241
func_call            : 217
func_native          : 28
func_type_opt        : 128 132 133 146 147 148
funcdeflist          : 128 140 146 147 148 155
funcref              : 31
function             : 12
getset_id            : 132 133
gthan_restrict       : 52 62 63
id_1                 : 
id_opt               : 115
id_str_or_num        : 163 164
id_var_decl          : 
id_var_type          : 80 81
if                   : 14 33
inc                  : 224
lbracket_restrict    : 155 156 166 167
left_id              : 
lparen_restrict      : 216
lsbracket_restrict   : 218
lthan_restrict       : 52 62 63
method               : 131
method_def           : 126 127
new                  : 223
not                  : 221
obj_lit_list         : 164 165 166
obj_literal          : 188
opt_colon_type       : 
paren_expr           : 247 248 249 260 261 262 266 267
pop_scope            : 
push_scope           : 146 147 148 155 156 166
rbracket_restrict    : 155 156 166 167
re_lit               : 227
return               : 20 38
rparen_restrict      : 216
rsbracket_restrict   : 218
setter_param_list    : 133
simple_templatedeflist : 62 63 93
simple_var_decl      : 
statement            : 1 3
statement_nonctrl    : 2 4 242 244 248 263 266
statementlist        : 3 4 250 251 264 267 0
statementlist_opt    : 128 132 133 148 155 156 243 245 249 253
strlit               : 182
switch               : 27
template             : 64 142
template_opt         : 114 146 147 148 155 156
template_ref         : 89 135 184 185
template_ref_opt     : 137 138
template_ref_validate : 65
template_validate    : 
templatedeflist      : 50 51 52
throw                : 24 42
try                  : 25 43
type_modifiers       : 53 54 55 70 72
typeof               : 226
typeof_opt           : 92 93
var_decl             : 30 46 73 74 75 239
var_decl_no_list     : 70 71 139 140
var_decl_or_type     : 
var_type             : 8 10 47 48 49 49 50 51 51 69 72 80 89 92 93 117 118 151 190
var_type_opt         : 144 155 156
while                : 16 37
with                 : 17
yield                : 21 39

Parsing method: LALR

state 0

    (0) S' -> . statementlist
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    $end            reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 26
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 78

state 1

    (260) switch -> SWITCH . paren_expr LBRACKET case_block RBRACKET
    (230) paren_expr -> . LPAREN expr RPAREN
    (231) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 79

    paren_expr                     shift and go to state 80

state 2

    (14) statement -> if .
    (33) statement_nonctrl -> if .

  ! reduce/reduce conflict for SEMI resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for CLASS resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for IF resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for WHILE resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for WITH resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for DO resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for FOR resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for RETURN resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for YIELD resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for BREAK resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for THROW resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for TRY resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for CATCH resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for SWITCH resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for NATIVE resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for ID resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for DELETE resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for LPAREN resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for MINUS resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for NOT resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for BITINV resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for NEW resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for INC resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for DEC resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for VAR resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for STATIC resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for CASE resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 14 (statement -> if .)
  ! reduce/reduce conflict for $end resolved using rule 14 (statement -> if .)
    SEMI            reduce using rule 14 (statement -> if .)
    FUNCTION        reduce using rule 14 (statement -> if .)
    CLASS           reduce using rule 14 (statement -> if .)
    IF              reduce using rule 14 (statement -> if .)
    ELSE            reduce using rule 14 (statement -> if .)
    WHILE           reduce using rule 14 (statement -> if .)
    WITH            reduce using rule 14 (statement -> if .)
    DO              reduce using rule 14 (statement -> if .)
    FOR             reduce using rule 14 (statement -> if .)
    RETURN          reduce using rule 14 (statement -> if .)
    YIELD           reduce using rule 14 (statement -> if .)
    BREAK           reduce using rule 14 (statement -> if .)
    CONTINUE        reduce using rule 14 (statement -> if .)
    THROW           reduce using rule 14 (statement -> if .)
    TRY             reduce using rule 14 (statement -> if .)
    CATCH           reduce using rule 14 (statement -> if .)
    SWITCH          reduce using rule 14 (statement -> if .)
    NATIVE          reduce using rule 14 (statement -> if .)
    NUMBER          reduce using rule 14 (statement -> if .)
    ID              reduce using rule 14 (statement -> if .)
    DELETE          reduce using rule 14 (statement -> if .)
    STRINGLIT       reduce using rule 14 (statement -> if .)
    LSBRACKET       reduce using rule 14 (statement -> if .)
    LPAREN          reduce using rule 14 (statement -> if .)
    MINUS           reduce using rule 14 (statement -> if .)
    NOT             reduce using rule 14 (statement -> if .)
    BITINV          reduce using rule 14 (statement -> if .)
    NEW             reduce using rule 14 (statement -> if .)
    INC             reduce using rule 14 (statement -> if .)
    DEC             reduce using rule 14 (statement -> if .)
    TYPEOF          reduce using rule 14 (statement -> if .)
    REGEXPR         reduce using rule 14 (statement -> if .)
    GLOBAL          reduce using rule 14 (statement -> if .)
    VAR             reduce using rule 14 (statement -> if .)
    STATIC          reduce using rule 14 (statement -> if .)
    TLTHAN          reduce using rule 14 (statement -> if .)
    LBRACKET        reduce using rule 14 (statement -> if .)
    RBRACKET        reduce using rule 14 (statement -> if .)
    $end            reduce using rule 14 (statement -> if .)
    CASE            reduce using rule 14 (statement -> if .)
    DEFAULT         reduce using rule 14 (statement -> if .)

  ! SEMI            [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! FUNCTION        [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! CLASS           [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! IF              [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! ELSE            [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! WHILE           [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! WITH            [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! DO              [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! FOR             [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! RETURN          [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! YIELD           [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! BREAK           [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! CONTINUE        [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! THROW           [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! TRY             [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! CATCH           [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! SWITCH          [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! NATIVE          [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! NUMBER          [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! ID              [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! DELETE          [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! STRINGLIT       [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! LSBRACKET       [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! LPAREN          [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! MINUS           [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! NOT             [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! BITINV          [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! NEW             [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! INC             [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! DEC             [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! TYPEOF          [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! REGEXPR         [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! GLOBAL          [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! VAR             [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! STATIC          [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! TLTHAN          [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! LBRACKET        [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! RBRACKET        [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! CASE            [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! DEFAULT         [ reduce using rule 33 (statement_nonctrl -> if .) ]
  ! $end            [ reduce using rule 33 (statement_nonctrl -> if .) ]


state 3

    (19) statement -> for .
    (35) statement_nonctrl -> for .

  ! reduce/reduce conflict for SEMI resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for CLASS resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for IF resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for ELSE resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for WITH resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for DO resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for RETURN resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for YIELD resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for BREAK resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for THROW resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for TRY resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for CATCH resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for SWITCH resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for NATIVE resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for NUMBER resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for ID resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for DELETE resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for LPAREN resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for MINUS resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for NOT resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for BITINV resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for NEW resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for INC resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for DEC resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for VAR resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for STATIC resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for CASE resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 19 (statement -> for .)
  ! reduce/reduce conflict for $end resolved using rule 19 (statement -> for .)
    SEMI            reduce using rule 19 (statement -> for .)
    FUNCTION        reduce using rule 19 (statement -> for .)
    CLASS           reduce using rule 19 (statement -> for .)
    IF              reduce using rule 19 (statement -> for .)
    ELSE            reduce using rule 19 (statement -> for .)
    WHILE           reduce using rule 19 (statement -> for .)
    WITH            reduce using rule 19 (statement -> for .)
    DO              reduce using rule 19 (statement -> for .)
    FOR             reduce using rule 19 (statement -> for .)
    RETURN          reduce using rule 19 (statement -> for .)
    YIELD           reduce using rule 19 (statement -> for .)
    BREAK           reduce using rule 19 (statement -> for .)
    CONTINUE        reduce using rule 19 (statement -> for .)
    THROW           reduce using rule 19 (statement -> for .)
    TRY             reduce using rule 19 (statement -> for .)
    CATCH           reduce using rule 19 (statement -> for .)
    SWITCH          reduce using rule 19 (statement -> for .)
    NATIVE          reduce using rule 19 (statement -> for .)
    NUMBER          reduce using rule 19 (statement -> for .)
    ID              reduce using rule 19 (statement -> for .)
    DELETE          reduce using rule 19 (statement -> for .)
    STRINGLIT       reduce using rule 19 (statement -> for .)
    LSBRACKET       reduce using rule 19 (statement -> for .)
    LPAREN          reduce using rule 19 (statement -> for .)
    MINUS           reduce using rule 19 (statement -> for .)
    NOT             reduce using rule 19 (statement -> for .)
    BITINV          reduce using rule 19 (statement -> for .)
    NEW             reduce using rule 19 (statement -> for .)
    INC             reduce using rule 19 (statement -> for .)
    DEC             reduce using rule 19 (statement -> for .)
    TYPEOF          reduce using rule 19 (statement -> for .)
    REGEXPR         reduce using rule 19 (statement -> for .)
    GLOBAL          reduce using rule 19 (statement -> for .)
    VAR             reduce using rule 19 (statement -> for .)
    STATIC          reduce using rule 19 (statement -> for .)
    TLTHAN          reduce using rule 19 (statement -> for .)
    LBRACKET        reduce using rule 19 (statement -> for .)
    RBRACKET        reduce using rule 19 (statement -> for .)
    $end            reduce using rule 19 (statement -> for .)
    CASE            reduce using rule 19 (statement -> for .)
    DEFAULT         reduce using rule 19 (statement -> for .)

  ! SEMI            [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! FUNCTION        [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! CLASS           [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! IF              [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! ELSE            [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! WHILE           [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! WITH            [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! DO              [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! FOR             [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! RETURN          [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! YIELD           [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! BREAK           [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! CONTINUE        [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! THROW           [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! TRY             [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! CATCH           [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! SWITCH          [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! NATIVE          [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! NUMBER          [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! ID              [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! DELETE          [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! STRINGLIT       [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! LSBRACKET       [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! LPAREN          [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! MINUS           [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! NOT             [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! BITINV          [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! NEW             [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! INC             [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! DEC             [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! TYPEOF          [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! REGEXPR         [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! GLOBAL          [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! VAR             [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! STATIC          [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! TLTHAN          [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! LBRACKET        [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! RBRACKET        [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! CASE            [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! DEFAULT         [ reduce using rule 35 (statement_nonctrl -> for .) ]
  ! $end            [ reduce using rule 35 (statement_nonctrl -> for .) ]


state 4

    (269) break -> BREAK .

    SEMI            reduce using rule 269 (break -> BREAK .)


state 5

    (185) expr -> template_ref .

    SEMI            reduce using rule 185 (expr -> template_ref .)
    RSHIFT          reduce using rule 185 (expr -> template_ref .)
    LSHIFT          reduce using rule 185 (expr -> template_ref .)
    LLSHIFT         reduce using rule 185 (expr -> template_ref .)
    RRSHIFT         reduce using rule 185 (expr -> template_ref .)
    DOT             reduce using rule 185 (expr -> template_ref .)
    LAND            reduce using rule 185 (expr -> template_ref .)
    LOR             reduce using rule 185 (expr -> template_ref .)
    BOR             reduce using rule 185 (expr -> template_ref .)
    INSTANCEOF      reduce using rule 185 (expr -> template_ref .)
    BXOR            reduce using rule 185 (expr -> template_ref .)
    BAND            reduce using rule 185 (expr -> template_ref .)
    EQUAL           reduce using rule 185 (expr -> template_ref .)
    EQUAL_STRICT    reduce using rule 185 (expr -> template_ref .)
    NOTEQUAL_STRICT reduce using rule 185 (expr -> template_ref .)
    GTHAN           reduce using rule 185 (expr -> template_ref .)
    GTHANEQ         reduce using rule 185 (expr -> template_ref .)
    LTHAN           reduce using rule 185 (expr -> template_ref .)
    MOD             reduce using rule 185 (expr -> template_ref .)
    LTHANEQ         reduce using rule 185 (expr -> template_ref .)
    NOTEQUAL        reduce using rule 185 (expr -> template_ref .)
    PLUS            reduce using rule 185 (expr -> template_ref .)
    MINUS           reduce using rule 185 (expr -> template_ref .)
    DIVIDE          reduce using rule 185 (expr -> template_ref .)
    TIMES           reduce using rule 185 (expr -> template_ref .)
    IN              reduce using rule 185 (expr -> template_ref .)
    QEST            reduce using rule 185 (expr -> template_ref .)
    COMMA           reduce using rule 185 (expr -> template_ref .)
    INC             reduce using rule 185 (expr -> template_ref .)
    DEC             reduce using rule 185 (expr -> template_ref .)
    ASSIGNPLUS      reduce using rule 185 (expr -> template_ref .)
    ASSIGNMINUS     reduce using rule 185 (expr -> template_ref .)
    ASSIGNDIVIDE    reduce using rule 185 (expr -> template_ref .)
    ASSIGNTIMES     reduce using rule 185 (expr -> template_ref .)
    ASSIGNBOR       reduce using rule 185 (expr -> template_ref .)
    ASSIGNBAND      reduce using rule 185 (expr -> template_ref .)
    ASSIGNBXOR      reduce using rule 185 (expr -> template_ref .)
    ASSIGNLSHIFT    reduce using rule 185 (expr -> template_ref .)
    ASSIGNRSHIFT    reduce using rule 185 (expr -> template_ref .)
    ASSIGNRRSHIFT   reduce using rule 185 (expr -> template_ref .)
    ASSIGNLLSHIFT   reduce using rule 185 (expr -> template_ref .)
    ASSIGN          reduce using rule 185 (expr -> template_ref .)
    LSBRACKET       reduce using rule 185 (expr -> template_ref .)
    TLTHAN          reduce using rule 185 (expr -> template_ref .)
    LPAREN          reduce using rule 185 (expr -> template_ref .)
    RPAREN          reduce using rule 185 (expr -> template_ref .)
    RSBRACKET       reduce using rule 185 (expr -> template_ref .)
    COLON           reduce using rule 185 (expr -> template_ref .)
    RBRACKET        reduce using rule 185 (expr -> template_ref .)


state 6

    (114) class -> CLASS . ID template_opt class_tail

    ID              shift and go to state 81


state 7

    (222) expr -> bitinv .

    SEMI            reduce using rule 222 (expr -> bitinv .)
    RSHIFT          reduce using rule 222 (expr -> bitinv .)
    LSHIFT          reduce using rule 222 (expr -> bitinv .)
    LLSHIFT         reduce using rule 222 (expr -> bitinv .)
    RRSHIFT         reduce using rule 222 (expr -> bitinv .)
    DOT             reduce using rule 222 (expr -> bitinv .)
    LAND            reduce using rule 222 (expr -> bitinv .)
    LOR             reduce using rule 222 (expr -> bitinv .)
    BOR             reduce using rule 222 (expr -> bitinv .)
    INSTANCEOF      reduce using rule 222 (expr -> bitinv .)
    BXOR            reduce using rule 222 (expr -> bitinv .)
    BAND            reduce using rule 222 (expr -> bitinv .)
    EQUAL           reduce using rule 222 (expr -> bitinv .)
    EQUAL_STRICT    reduce using rule 222 (expr -> bitinv .)
    NOTEQUAL_STRICT reduce using rule 222 (expr -> bitinv .)
    GTHAN           reduce using rule 222 (expr -> bitinv .)
    GTHANEQ         reduce using rule 222 (expr -> bitinv .)
    LTHAN           reduce using rule 222 (expr -> bitinv .)
    MOD             reduce using rule 222 (expr -> bitinv .)
    LTHANEQ         reduce using rule 222 (expr -> bitinv .)
    NOTEQUAL        reduce using rule 222 (expr -> bitinv .)
    PLUS            reduce using rule 222 (expr -> bitinv .)
    MINUS           reduce using rule 222 (expr -> bitinv .)
    DIVIDE          reduce using rule 222 (expr -> bitinv .)
    TIMES           reduce using rule 222 (expr -> bitinv .)
    IN              reduce using rule 222 (expr -> bitinv .)
    QEST            reduce using rule 222 (expr -> bitinv .)
    COMMA           reduce using rule 222 (expr -> bitinv .)
    INC             reduce using rule 222 (expr -> bitinv .)
    DEC             reduce using rule 222 (expr -> bitinv .)
    ASSIGNPLUS      reduce using rule 222 (expr -> bitinv .)
    ASSIGNMINUS     reduce using rule 222 (expr -> bitinv .)
    ASSIGNDIVIDE    reduce using rule 222 (expr -> bitinv .)
    ASSIGNTIMES     reduce using rule 222 (expr -> bitinv .)
    ASSIGNBOR       reduce using rule 222 (expr -> bitinv .)
    ASSIGNBAND      reduce using rule 222 (expr -> bitinv .)
    ASSIGNBXOR      reduce using rule 222 (expr -> bitinv .)
    ASSIGNLSHIFT    reduce using rule 222 (expr -> bitinv .)
    ASSIGNRSHIFT    reduce using rule 222 (expr -> bitinv .)
    ASSIGNRRSHIFT   reduce using rule 222 (expr -> bitinv .)
    ASSIGNLLSHIFT   reduce using rule 222 (expr -> bitinv .)
    ASSIGN          reduce using rule 222 (expr -> bitinv .)
    LSBRACKET       reduce using rule 222 (expr -> bitinv .)
    TLTHAN          reduce using rule 222 (expr -> bitinv .)
    LPAREN          reduce using rule 222 (expr -> bitinv .)
    RPAREN          reduce using rule 222 (expr -> bitinv .)
    RSBRACKET       reduce using rule 222 (expr -> bitinv .)
    COLON           reduce using rule 222 (expr -> bitinv .)
    RBRACKET        reduce using rule 222 (expr -> bitinv .)


state 8

    (12) statement -> function .

    SEMI            reduce using rule 12 (statement -> function .)
    FUNCTION        reduce using rule 12 (statement -> function .)
    CLASS           reduce using rule 12 (statement -> function .)
    IF              reduce using rule 12 (statement -> function .)
    ELSE            reduce using rule 12 (statement -> function .)
    WHILE           reduce using rule 12 (statement -> function .)
    WITH            reduce using rule 12 (statement -> function .)
    DO              reduce using rule 12 (statement -> function .)
    FOR             reduce using rule 12 (statement -> function .)
    RETURN          reduce using rule 12 (statement -> function .)
    YIELD           reduce using rule 12 (statement -> function .)
    BREAK           reduce using rule 12 (statement -> function .)
    CONTINUE        reduce using rule 12 (statement -> function .)
    THROW           reduce using rule 12 (statement -> function .)
    TRY             reduce using rule 12 (statement -> function .)
    CATCH           reduce using rule 12 (statement -> function .)
    SWITCH          reduce using rule 12 (statement -> function .)
    NATIVE          reduce using rule 12 (statement -> function .)
    NUMBER          reduce using rule 12 (statement -> function .)
    ID              reduce using rule 12 (statement -> function .)
    DELETE          reduce using rule 12 (statement -> function .)
    STRINGLIT       reduce using rule 12 (statement -> function .)
    LSBRACKET       reduce using rule 12 (statement -> function .)
    LPAREN          reduce using rule 12 (statement -> function .)
    MINUS           reduce using rule 12 (statement -> function .)
    NOT             reduce using rule 12 (statement -> function .)
    BITINV          reduce using rule 12 (statement -> function .)
    NEW             reduce using rule 12 (statement -> function .)
    INC             reduce using rule 12 (statement -> function .)
    DEC             reduce using rule 12 (statement -> function .)
    TYPEOF          reduce using rule 12 (statement -> function .)
    REGEXPR         reduce using rule 12 (statement -> function .)
    GLOBAL          reduce using rule 12 (statement -> function .)
    VAR             reduce using rule 12 (statement -> function .)
    STATIC          reduce using rule 12 (statement -> function .)
    TLTHAN          reduce using rule 12 (statement -> function .)
    LBRACKET        reduce using rule 12 (statement -> function .)
    RBRACKET        reduce using rule 12 (statement -> function .)
    $end            reduce using rule 12 (statement -> function .)
    CASE            reduce using rule 12 (statement -> function .)
    DEFAULT         reduce using rule 12 (statement -> function .)


state 9

    (162) typeof -> TYPEOF . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 83
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 10

    (66) lthan_restrict -> TLTHAN .

    TYPEOF          reduce using rule 66 (lthan_restrict -> TLTHAN .)
    INT             reduce using rule 66 (lthan_restrict -> TLTHAN .)
    SHORT           reduce using rule 66 (lthan_restrict -> TLTHAN .)
    FLOAT           reduce using rule 66 (lthan_restrict -> TLTHAN .)
    DOUBLE          reduce using rule 66 (lthan_restrict -> TLTHAN .)
    CHAR            reduce using rule 66 (lthan_restrict -> TLTHAN .)
    BYTE            reduce using rule 66 (lthan_restrict -> TLTHAN .)
    INFERRED        reduce using rule 66 (lthan_restrict -> TLTHAN .)
    ID              reduce using rule 66 (lthan_restrict -> TLTHAN .)


state 11

    (175) bitinv -> BITINV . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 84
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 12

    (169) new -> NEW . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 85
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 13

    (62) template_ref -> lthan_restrict . simple_templatedeflist gthan_restrict
    (92) simple_templatedeflist -> . typeof_opt var_type
    (93) simple_templatedeflist -> . simple_templatedeflist COMMA typeof_opt var_type
    (90) typeof_opt -> . TYPEOF
    (91) typeof_opt -> .

    TYPEOF          shift and go to state 88
    INT             reduce using rule 91 (typeof_opt -> .)
    SHORT           reduce using rule 91 (typeof_opt -> .)
    FLOAT           reduce using rule 91 (typeof_opt -> .)
    DOUBLE          reduce using rule 91 (typeof_opt -> .)
    CHAR            reduce using rule 91 (typeof_opt -> .)
    BYTE            reduce using rule 91 (typeof_opt -> .)
    INFERRED        reduce using rule 91 (typeof_opt -> .)
    ID              reduce using rule 91 (typeof_opt -> .)

    simple_templatedeflist         shift and go to state 87
    typeof_opt                     shift and go to state 86

state 14

    (17) statement -> with .

    SEMI            reduce using rule 17 (statement -> with .)
    FUNCTION        reduce using rule 17 (statement -> with .)
    CLASS           reduce using rule 17 (statement -> with .)
    IF              reduce using rule 17 (statement -> with .)
    ELSE            reduce using rule 17 (statement -> with .)
    WHILE           reduce using rule 17 (statement -> with .)
    WITH            reduce using rule 17 (statement -> with .)
    DO              reduce using rule 17 (statement -> with .)
    FOR             reduce using rule 17 (statement -> with .)
    RETURN          reduce using rule 17 (statement -> with .)
    YIELD           reduce using rule 17 (statement -> with .)
    BREAK           reduce using rule 17 (statement -> with .)
    CONTINUE        reduce using rule 17 (statement -> with .)
    THROW           reduce using rule 17 (statement -> with .)
    TRY             reduce using rule 17 (statement -> with .)
    CATCH           reduce using rule 17 (statement -> with .)
    SWITCH          reduce using rule 17 (statement -> with .)
    NATIVE          reduce using rule 17 (statement -> with .)
    NUMBER          reduce using rule 17 (statement -> with .)
    ID              reduce using rule 17 (statement -> with .)
    DELETE          reduce using rule 17 (statement -> with .)
    STRINGLIT       reduce using rule 17 (statement -> with .)
    LSBRACKET       reduce using rule 17 (statement -> with .)
    LPAREN          reduce using rule 17 (statement -> with .)
    MINUS           reduce using rule 17 (statement -> with .)
    NOT             reduce using rule 17 (statement -> with .)
    BITINV          reduce using rule 17 (statement -> with .)
    NEW             reduce using rule 17 (statement -> with .)
    INC             reduce using rule 17 (statement -> with .)
    DEC             reduce using rule 17 (statement -> with .)
    TYPEOF          reduce using rule 17 (statement -> with .)
    REGEXPR         reduce using rule 17 (statement -> with .)
    GLOBAL          reduce using rule 17 (statement -> with .)
    VAR             reduce using rule 17 (statement -> with .)
    STATIC          reduce using rule 17 (statement -> with .)
    TLTHAN          reduce using rule 17 (statement -> with .)
    LBRACKET        reduce using rule 17 (statement -> with .)
    RBRACKET        reduce using rule 17 (statement -> with .)
    $end            reduce using rule 17 (statement -> with .)
    CASE            reduce using rule 17 (statement -> with .)
    DEFAULT         reduce using rule 17 (statement -> with .)


state 15

    (31) statement_nonctrl -> funcref . SEMI

    SEMI            shift and go to state 89


state 16

    (263) try -> TRY . statement_nonctrl
    (264) try -> TRY . LBRACKET statementlist RBRACKET
    (265) try -> TRY . LBRACKET RBRACKET
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 101
    SEMI            shift and go to state 46
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    FUNCTION        shift and go to state 97
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    FOR             shift and go to state 35
    DO              shift and go to state 54
    WHILE           shift and go to state 31
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10

    while                          shift and go to state 96
    expr                           shift and go to state 19
    if                             shift and go to state 90
    dec                            shift and go to state 45
    for                            shift and go to state 91
    template_ref                   shift and go to state 5
    catch                          shift and go to state 93
    break                          shift and go to state 98
    lthan_restrict                 shift and go to state 13
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    dowhile                        shift and go to state 99
    delete                         shift and go to state 58
    throw                          shift and go to state 92
    try                            shift and go to state 100
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 102
    else                           shift and go to state 103
    return                         shift and go to state 94
    bitinv                         shift and go to state 7
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    typeof                         shift and go to state 75
    yield                          shift and go to state 95
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 104

state 17

    (187) expr -> exprfunction .

    SEMI            reduce using rule 187 (expr -> exprfunction .)
    RSHIFT          reduce using rule 187 (expr -> exprfunction .)
    LSHIFT          reduce using rule 187 (expr -> exprfunction .)
    LLSHIFT         reduce using rule 187 (expr -> exprfunction .)
    RRSHIFT         reduce using rule 187 (expr -> exprfunction .)
    DOT             reduce using rule 187 (expr -> exprfunction .)
    LAND            reduce using rule 187 (expr -> exprfunction .)
    LOR             reduce using rule 187 (expr -> exprfunction .)
    BOR             reduce using rule 187 (expr -> exprfunction .)
    INSTANCEOF      reduce using rule 187 (expr -> exprfunction .)
    BXOR            reduce using rule 187 (expr -> exprfunction .)
    BAND            reduce using rule 187 (expr -> exprfunction .)
    EQUAL           reduce using rule 187 (expr -> exprfunction .)
    EQUAL_STRICT    reduce using rule 187 (expr -> exprfunction .)
    NOTEQUAL_STRICT reduce using rule 187 (expr -> exprfunction .)
    GTHAN           reduce using rule 187 (expr -> exprfunction .)
    GTHANEQ         reduce using rule 187 (expr -> exprfunction .)
    LTHAN           reduce using rule 187 (expr -> exprfunction .)
    MOD             reduce using rule 187 (expr -> exprfunction .)
    LTHANEQ         reduce using rule 187 (expr -> exprfunction .)
    NOTEQUAL        reduce using rule 187 (expr -> exprfunction .)
    PLUS            reduce using rule 187 (expr -> exprfunction .)
    MINUS           reduce using rule 187 (expr -> exprfunction .)
    DIVIDE          reduce using rule 187 (expr -> exprfunction .)
    TIMES           reduce using rule 187 (expr -> exprfunction .)
    IN              reduce using rule 187 (expr -> exprfunction .)
    QEST            reduce using rule 187 (expr -> exprfunction .)
    COMMA           reduce using rule 187 (expr -> exprfunction .)
    INC             reduce using rule 187 (expr -> exprfunction .)
    DEC             reduce using rule 187 (expr -> exprfunction .)
    ASSIGNPLUS      reduce using rule 187 (expr -> exprfunction .)
    ASSIGNMINUS     reduce using rule 187 (expr -> exprfunction .)
    ASSIGNDIVIDE    reduce using rule 187 (expr -> exprfunction .)
    ASSIGNTIMES     reduce using rule 187 (expr -> exprfunction .)
    ASSIGNBOR       reduce using rule 187 (expr -> exprfunction .)
    ASSIGNBAND      reduce using rule 187 (expr -> exprfunction .)
    ASSIGNBXOR      reduce using rule 187 (expr -> exprfunction .)
    ASSIGNLSHIFT    reduce using rule 187 (expr -> exprfunction .)
    ASSIGNRSHIFT    reduce using rule 187 (expr -> exprfunction .)
    ASSIGNRRSHIFT   reduce using rule 187 (expr -> exprfunction .)
    ASSIGNLLSHIFT   reduce using rule 187 (expr -> exprfunction .)
    ASSIGN          reduce using rule 187 (expr -> exprfunction .)
    LSBRACKET       reduce using rule 187 (expr -> exprfunction .)
    TLTHAN          reduce using rule 187 (expr -> exprfunction .)
    LPAREN          reduce using rule 187 (expr -> exprfunction .)
    RPAREN          reduce using rule 187 (expr -> exprfunction .)
    RSBRACKET       reduce using rule 187 (expr -> exprfunction .)
    COLON           reduce using rule 187 (expr -> exprfunction .)
    RBRACKET        reduce using rule 187 (expr -> exprfunction .)


state 18

    (176) strlit -> STRINGLIT .

    RSHIFT          reduce using rule 176 (strlit -> STRINGLIT .)
    LSHIFT          reduce using rule 176 (strlit -> STRINGLIT .)
    LLSHIFT         reduce using rule 176 (strlit -> STRINGLIT .)
    RRSHIFT         reduce using rule 176 (strlit -> STRINGLIT .)
    DOT             reduce using rule 176 (strlit -> STRINGLIT .)
    LAND            reduce using rule 176 (strlit -> STRINGLIT .)
    LOR             reduce using rule 176 (strlit -> STRINGLIT .)
    BOR             reduce using rule 176 (strlit -> STRINGLIT .)
    INSTANCEOF      reduce using rule 176 (strlit -> STRINGLIT .)
    BXOR            reduce using rule 176 (strlit -> STRINGLIT .)
    BAND            reduce using rule 176 (strlit -> STRINGLIT .)
    EQUAL           reduce using rule 176 (strlit -> STRINGLIT .)
    EQUAL_STRICT    reduce using rule 176 (strlit -> STRINGLIT .)
    NOTEQUAL_STRICT reduce using rule 176 (strlit -> STRINGLIT .)
    GTHAN           reduce using rule 176 (strlit -> STRINGLIT .)
    GTHANEQ         reduce using rule 176 (strlit -> STRINGLIT .)
    LTHAN           reduce using rule 176 (strlit -> STRINGLIT .)
    MOD             reduce using rule 176 (strlit -> STRINGLIT .)
    LTHANEQ         reduce using rule 176 (strlit -> STRINGLIT .)
    NOTEQUAL        reduce using rule 176 (strlit -> STRINGLIT .)
    PLUS            reduce using rule 176 (strlit -> STRINGLIT .)
    MINUS           reduce using rule 176 (strlit -> STRINGLIT .)
    DIVIDE          reduce using rule 176 (strlit -> STRINGLIT .)
    TIMES           reduce using rule 176 (strlit -> STRINGLIT .)
    IN              reduce using rule 176 (strlit -> STRINGLIT .)
    QEST            reduce using rule 176 (strlit -> STRINGLIT .)
    COMMA           reduce using rule 176 (strlit -> STRINGLIT .)
    INC             reduce using rule 176 (strlit -> STRINGLIT .)
    DEC             reduce using rule 176 (strlit -> STRINGLIT .)
    ASSIGNPLUS      reduce using rule 176 (strlit -> STRINGLIT .)
    ASSIGNMINUS     reduce using rule 176 (strlit -> STRINGLIT .)
    ASSIGNDIVIDE    reduce using rule 176 (strlit -> STRINGLIT .)
    ASSIGNTIMES     reduce using rule 176 (strlit -> STRINGLIT .)
    ASSIGNBOR       reduce using rule 176 (strlit -> STRINGLIT .)
    ASSIGNBAND      reduce using rule 176 (strlit -> STRINGLIT .)
    ASSIGNBXOR      reduce using rule 176 (strlit -> STRINGLIT .)
    ASSIGNLSHIFT    reduce using rule 176 (strlit -> STRINGLIT .)
    ASSIGNRSHIFT    reduce using rule 176 (strlit -> STRINGLIT .)
    ASSIGNRRSHIFT   reduce using rule 176 (strlit -> STRINGLIT .)
    ASSIGNLLSHIFT   reduce using rule 176 (strlit -> STRINGLIT .)
    ASSIGN          reduce using rule 176 (strlit -> STRINGLIT .)
    LSBRACKET       reduce using rule 176 (strlit -> STRINGLIT .)
    TLTHAN          reduce using rule 176 (strlit -> STRINGLIT .)
    LPAREN          reduce using rule 176 (strlit -> STRINGLIT .)
    SEMI            reduce using rule 176 (strlit -> STRINGLIT .)
    RPAREN          reduce using rule 176 (strlit -> STRINGLIT .)
    RSBRACKET       reduce using rule 176 (strlit -> STRINGLIT .)
    COLON           reduce using rule 176 (strlit -> STRINGLIT .)
    RBRACKET        reduce using rule 176 (strlit -> STRINGLIT .)


state 19

    (29) statement_nonctrl -> expr . SEMI
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    SEMI            shift and go to state 108
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 20

    (20) statement -> return . SEMI
    (38) statement_nonctrl -> return . SEMI

    SEMI            shift and go to state 153


state 21

    (24) statement -> throw . SEMI
    (42) statement_nonctrl -> throw . SEMI

    SEMI            shift and go to state 154


state 22

    (236) re_lit -> REGEXPR .

    RSHIFT          reduce using rule 236 (re_lit -> REGEXPR .)
    LSHIFT          reduce using rule 236 (re_lit -> REGEXPR .)
    LLSHIFT         reduce using rule 236 (re_lit -> REGEXPR .)
    RRSHIFT         reduce using rule 236 (re_lit -> REGEXPR .)
    DOT             reduce using rule 236 (re_lit -> REGEXPR .)
    LAND            reduce using rule 236 (re_lit -> REGEXPR .)
    LOR             reduce using rule 236 (re_lit -> REGEXPR .)
    BOR             reduce using rule 236 (re_lit -> REGEXPR .)
    INSTANCEOF      reduce using rule 236 (re_lit -> REGEXPR .)
    BXOR            reduce using rule 236 (re_lit -> REGEXPR .)
    BAND            reduce using rule 236 (re_lit -> REGEXPR .)
    EQUAL           reduce using rule 236 (re_lit -> REGEXPR .)
    EQUAL_STRICT    reduce using rule 236 (re_lit -> REGEXPR .)
    NOTEQUAL_STRICT reduce using rule 236 (re_lit -> REGEXPR .)
    GTHAN           reduce using rule 236 (re_lit -> REGEXPR .)
    GTHANEQ         reduce using rule 236 (re_lit -> REGEXPR .)
    LTHAN           reduce using rule 236 (re_lit -> REGEXPR .)
    MOD             reduce using rule 236 (re_lit -> REGEXPR .)
    LTHANEQ         reduce using rule 236 (re_lit -> REGEXPR .)
    NOTEQUAL        reduce using rule 236 (re_lit -> REGEXPR .)
    PLUS            reduce using rule 236 (re_lit -> REGEXPR .)
    MINUS           reduce using rule 236 (re_lit -> REGEXPR .)
    DIVIDE          reduce using rule 236 (re_lit -> REGEXPR .)
    TIMES           reduce using rule 236 (re_lit -> REGEXPR .)
    IN              reduce using rule 236 (re_lit -> REGEXPR .)
    QEST            reduce using rule 236 (re_lit -> REGEXPR .)
    COMMA           reduce using rule 236 (re_lit -> REGEXPR .)
    INC             reduce using rule 236 (re_lit -> REGEXPR .)
    DEC             reduce using rule 236 (re_lit -> REGEXPR .)
    ASSIGNPLUS      reduce using rule 236 (re_lit -> REGEXPR .)
    ASSIGNMINUS     reduce using rule 236 (re_lit -> REGEXPR .)
    ASSIGNDIVIDE    reduce using rule 236 (re_lit -> REGEXPR .)
    ASSIGNTIMES     reduce using rule 236 (re_lit -> REGEXPR .)
    ASSIGNBOR       reduce using rule 236 (re_lit -> REGEXPR .)
    ASSIGNBAND      reduce using rule 236 (re_lit -> REGEXPR .)
    ASSIGNBXOR      reduce using rule 236 (re_lit -> REGEXPR .)
    ASSIGNLSHIFT    reduce using rule 236 (re_lit -> REGEXPR .)
    ASSIGNRSHIFT    reduce using rule 236 (re_lit -> REGEXPR .)
    ASSIGNRRSHIFT   reduce using rule 236 (re_lit -> REGEXPR .)
    ASSIGNLLSHIFT   reduce using rule 236 (re_lit -> REGEXPR .)
    ASSIGN          reduce using rule 236 (re_lit -> REGEXPR .)
    LSBRACKET       reduce using rule 236 (re_lit -> REGEXPR .)
    TLTHAN          reduce using rule 236 (re_lit -> REGEXPR .)
    LPAREN          reduce using rule 236 (re_lit -> REGEXPR .)
    SEMI            reduce using rule 236 (re_lit -> REGEXPR .)
    RSBRACKET       reduce using rule 236 (re_lit -> REGEXPR .)
    RPAREN          reduce using rule 236 (re_lit -> REGEXPR .)
    COLON           reduce using rule 236 (re_lit -> REGEXPR .)
    RBRACKET        reduce using rule 236 (re_lit -> REGEXPR .)


state 23

    (168) delete -> DELETE . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 155
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 24

    (177) lparen_restrict -> LPAREN .

    NUMBER          reduce using rule 177 (lparen_restrict -> LPAREN .)
    ID              reduce using rule 177 (lparen_restrict -> LPAREN .)
    STRINGLIT       reduce using rule 177 (lparen_restrict -> LPAREN .)
    LSBRACKET       reduce using rule 177 (lparen_restrict -> LPAREN .)
    FUNCTION        reduce using rule 177 (lparen_restrict -> LPAREN .)
    LPAREN          reduce using rule 177 (lparen_restrict -> LPAREN .)
    MINUS           reduce using rule 177 (lparen_restrict -> LPAREN .)
    NOT             reduce using rule 177 (lparen_restrict -> LPAREN .)
    BITINV          reduce using rule 177 (lparen_restrict -> LPAREN .)
    NEW             reduce using rule 177 (lparen_restrict -> LPAREN .)
    INC             reduce using rule 177 (lparen_restrict -> LPAREN .)
    DEC             reduce using rule 177 (lparen_restrict -> LPAREN .)
    TYPEOF          reduce using rule 177 (lparen_restrict -> LPAREN .)
    REGEXPR         reduce using rule 177 (lparen_restrict -> LPAREN .)
    TLTHAN          reduce using rule 177 (lparen_restrict -> LPAREN .)
    LBRACKET        reduce using rule 177 (lparen_restrict -> LPAREN .)


state 25

    (229) expr_uminus -> MINUS . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 156
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 26

    (0) S' -> statementlist .
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    while                          shift and go to state 41
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 157
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 158

state 27

    (108) throw -> THROW . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 159
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 28

    (268) else -> ELSE . ctrl_statement
    (244) ctrl_statement -> . statement_nonctrl
    (245) ctrl_statement -> . LBRACKET statementlist_opt RBRACKET
    (246) ctrl_statement -> . SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 162
    SEMI            shift and go to state 160
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    FUNCTION        shift and go to state 97
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    FOR             shift and go to state 35
    DO              shift and go to state 54
    WHILE           shift and go to state 31
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10

    while                          shift and go to state 96
    expr                           shift and go to state 19
    if                             shift and go to state 90
    dec                            shift and go to state 45
    for                            shift and go to state 91
    template_ref                   shift and go to state 5
    catch                          shift and go to state 93
    break                          shift and go to state 98
    lthan_restrict                 shift and go to state 13
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    dowhile                        shift and go to state 99
    delete                         shift and go to state 58
    throw                          shift and go to state 92
    try                            shift and go to state 100
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    array_literal                  shift and go to state 66
    var_decl                       shift and go to state 74
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 102
    else                           shift and go to state 103
    return                         shift and go to state 94
    bitinv                         shift and go to state 7
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    ctrl_statement                 shift and go to state 161
    re_lit                         shift and go to state 32
    typeof                         shift and go to state 75
    yield                          shift and go to state 95
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 163

state 29

    (26) statement -> catch .
    (44) statement_nonctrl -> catch .

  ! reduce/reduce conflict for SEMI resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for CLASS resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for IF resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for ELSE resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for WHILE resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for WITH resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for DO resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for FOR resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for RETURN resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for YIELD resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for BREAK resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for THROW resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for TRY resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for CATCH resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for SWITCH resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for NATIVE resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for NUMBER resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for ID resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for DELETE resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for LPAREN resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for MINUS resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for NOT resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for BITINV resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for NEW resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for INC resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for DEC resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for VAR resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for STATIC resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for CASE resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 26 (statement -> catch .)
  ! reduce/reduce conflict for $end resolved using rule 26 (statement -> catch .)
    SEMI            reduce using rule 26 (statement -> catch .)
    FUNCTION        reduce using rule 26 (statement -> catch .)
    CLASS           reduce using rule 26 (statement -> catch .)
    IF              reduce using rule 26 (statement -> catch .)
    ELSE            reduce using rule 26 (statement -> catch .)
    WHILE           reduce using rule 26 (statement -> catch .)
    WITH            reduce using rule 26 (statement -> catch .)
    DO              reduce using rule 26 (statement -> catch .)
    FOR             reduce using rule 26 (statement -> catch .)
    RETURN          reduce using rule 26 (statement -> catch .)
    YIELD           reduce using rule 26 (statement -> catch .)
    BREAK           reduce using rule 26 (statement -> catch .)
    CONTINUE        reduce using rule 26 (statement -> catch .)
    THROW           reduce using rule 26 (statement -> catch .)
    TRY             reduce using rule 26 (statement -> catch .)
    CATCH           reduce using rule 26 (statement -> catch .)
    SWITCH          reduce using rule 26 (statement -> catch .)
    NATIVE          reduce using rule 26 (statement -> catch .)
    NUMBER          reduce using rule 26 (statement -> catch .)
    ID              reduce using rule 26 (statement -> catch .)
    DELETE          reduce using rule 26 (statement -> catch .)
    STRINGLIT       reduce using rule 26 (statement -> catch .)
    LSBRACKET       reduce using rule 26 (statement -> catch .)
    LPAREN          reduce using rule 26 (statement -> catch .)
    MINUS           reduce using rule 26 (statement -> catch .)
    NOT             reduce using rule 26 (statement -> catch .)
    BITINV          reduce using rule 26 (statement -> catch .)
    NEW             reduce using rule 26 (statement -> catch .)
    INC             reduce using rule 26 (statement -> catch .)
    DEC             reduce using rule 26 (statement -> catch .)
    TYPEOF          reduce using rule 26 (statement -> catch .)
    REGEXPR         reduce using rule 26 (statement -> catch .)
    GLOBAL          reduce using rule 26 (statement -> catch .)
    VAR             reduce using rule 26 (statement -> catch .)
    STATIC          reduce using rule 26 (statement -> catch .)
    TLTHAN          reduce using rule 26 (statement -> catch .)
    LBRACKET        reduce using rule 26 (statement -> catch .)
    RBRACKET        reduce using rule 26 (statement -> catch .)
    $end            reduce using rule 26 (statement -> catch .)
    CASE            reduce using rule 26 (statement -> catch .)
    DEFAULT         reduce using rule 26 (statement -> catch .)

  ! SEMI            [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! FUNCTION        [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! CLASS           [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! IF              [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! ELSE            [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! WHILE           [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! WITH            [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! DO              [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! FOR             [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! RETURN          [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! YIELD           [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! BREAK           [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! CONTINUE        [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! THROW           [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! TRY             [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! CATCH           [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! SWITCH          [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! NATIVE          [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! NUMBER          [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! ID              [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! DELETE          [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! STRINGLIT       [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! LSBRACKET       [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! LPAREN          [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! MINUS           [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! NOT             [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! BITINV          [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! NEW             [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! INC             [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! DEC             [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! TYPEOF          [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! REGEXPR         [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! GLOBAL          [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! VAR             [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! STATIC          [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! TLTHAN          [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! LBRACKET        [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! RBRACKET        [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! CASE            [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! DEFAULT         [ reduce using rule 44 (statement_nonctrl -> catch .) ]
  ! $end            [ reduce using rule 44 (statement_nonctrl -> catch .) ]


state 30

    (271) return -> RETURN . expr
    (272) return -> RETURN .
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    SEMI            reduce using rule 272 (return -> RETURN .)
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 164
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 31

    (248) while -> WHILE . paren_expr statement_nonctrl
    (249) while -> WHILE . paren_expr LBRACKET statementlist_opt RBRACKET
    (230) paren_expr -> . LPAREN expr RPAREN
    (231) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 79

    paren_expr                     shift and go to state 165

state 32

    (227) expr -> re_lit .

    SEMI            reduce using rule 227 (expr -> re_lit .)
    RSHIFT          reduce using rule 227 (expr -> re_lit .)
    LSHIFT          reduce using rule 227 (expr -> re_lit .)
    LLSHIFT         reduce using rule 227 (expr -> re_lit .)
    RRSHIFT         reduce using rule 227 (expr -> re_lit .)
    DOT             reduce using rule 227 (expr -> re_lit .)
    LAND            reduce using rule 227 (expr -> re_lit .)
    LOR             reduce using rule 227 (expr -> re_lit .)
    BOR             reduce using rule 227 (expr -> re_lit .)
    INSTANCEOF      reduce using rule 227 (expr -> re_lit .)
    BXOR            reduce using rule 227 (expr -> re_lit .)
    BAND            reduce using rule 227 (expr -> re_lit .)
    EQUAL           reduce using rule 227 (expr -> re_lit .)
    EQUAL_STRICT    reduce using rule 227 (expr -> re_lit .)
    NOTEQUAL_STRICT reduce using rule 227 (expr -> re_lit .)
    GTHAN           reduce using rule 227 (expr -> re_lit .)
    GTHANEQ         reduce using rule 227 (expr -> re_lit .)
    LTHAN           reduce using rule 227 (expr -> re_lit .)
    MOD             reduce using rule 227 (expr -> re_lit .)
    LTHANEQ         reduce using rule 227 (expr -> re_lit .)
    NOTEQUAL        reduce using rule 227 (expr -> re_lit .)
    PLUS            reduce using rule 227 (expr -> re_lit .)
    MINUS           reduce using rule 227 (expr -> re_lit .)
    DIVIDE          reduce using rule 227 (expr -> re_lit .)
    TIMES           reduce using rule 227 (expr -> re_lit .)
    IN              reduce using rule 227 (expr -> re_lit .)
    QEST            reduce using rule 227 (expr -> re_lit .)
    COMMA           reduce using rule 227 (expr -> re_lit .)
    INC             reduce using rule 227 (expr -> re_lit .)
    DEC             reduce using rule 227 (expr -> re_lit .)
    ASSIGNPLUS      reduce using rule 227 (expr -> re_lit .)
    ASSIGNMINUS     reduce using rule 227 (expr -> re_lit .)
    ASSIGNDIVIDE    reduce using rule 227 (expr -> re_lit .)
    ASSIGNTIMES     reduce using rule 227 (expr -> re_lit .)
    ASSIGNBOR       reduce using rule 227 (expr -> re_lit .)
    ASSIGNBAND      reduce using rule 227 (expr -> re_lit .)
    ASSIGNBXOR      reduce using rule 227 (expr -> re_lit .)
    ASSIGNLSHIFT    reduce using rule 227 (expr -> re_lit .)
    ASSIGNRSHIFT    reduce using rule 227 (expr -> re_lit .)
    ASSIGNRRSHIFT   reduce using rule 227 (expr -> re_lit .)
    ASSIGNLLSHIFT   reduce using rule 227 (expr -> re_lit .)
    ASSIGN          reduce using rule 227 (expr -> re_lit .)
    LSBRACKET       reduce using rule 227 (expr -> re_lit .)
    TLTHAN          reduce using rule 227 (expr -> re_lit .)
    LPAREN          reduce using rule 227 (expr -> re_lit .)
    RPAREN          reduce using rule 227 (expr -> re_lit .)
    RSBRACKET       reduce using rule 227 (expr -> re_lit .)
    COLON           reduce using rule 227 (expr -> re_lit .)
    RBRACKET        reduce using rule 227 (expr -> re_lit .)


state 33

    (221) expr -> not .

    SEMI            reduce using rule 221 (expr -> not .)
    RSHIFT          reduce using rule 221 (expr -> not .)
    LSHIFT          reduce using rule 221 (expr -> not .)
    LLSHIFT         reduce using rule 221 (expr -> not .)
    RRSHIFT         reduce using rule 221 (expr -> not .)
    DOT             reduce using rule 221 (expr -> not .)
    LAND            reduce using rule 221 (expr -> not .)
    LOR             reduce using rule 221 (expr -> not .)
    BOR             reduce using rule 221 (expr -> not .)
    INSTANCEOF      reduce using rule 221 (expr -> not .)
    BXOR            reduce using rule 221 (expr -> not .)
    BAND            reduce using rule 221 (expr -> not .)
    EQUAL           reduce using rule 221 (expr -> not .)
    EQUAL_STRICT    reduce using rule 221 (expr -> not .)
    NOTEQUAL_STRICT reduce using rule 221 (expr -> not .)
    GTHAN           reduce using rule 221 (expr -> not .)
    GTHANEQ         reduce using rule 221 (expr -> not .)
    LTHAN           reduce using rule 221 (expr -> not .)
    MOD             reduce using rule 221 (expr -> not .)
    LTHANEQ         reduce using rule 221 (expr -> not .)
    NOTEQUAL        reduce using rule 221 (expr -> not .)
    PLUS            reduce using rule 221 (expr -> not .)
    MINUS           reduce using rule 221 (expr -> not .)
    DIVIDE          reduce using rule 221 (expr -> not .)
    TIMES           reduce using rule 221 (expr -> not .)
    IN              reduce using rule 221 (expr -> not .)
    QEST            reduce using rule 221 (expr -> not .)
    COMMA           reduce using rule 221 (expr -> not .)
    INC             reduce using rule 221 (expr -> not .)
    DEC             reduce using rule 221 (expr -> not .)
    ASSIGNPLUS      reduce using rule 221 (expr -> not .)
    ASSIGNMINUS     reduce using rule 221 (expr -> not .)
    ASSIGNDIVIDE    reduce using rule 221 (expr -> not .)
    ASSIGNTIMES     reduce using rule 221 (expr -> not .)
    ASSIGNBOR       reduce using rule 221 (expr -> not .)
    ASSIGNBAND      reduce using rule 221 (expr -> not .)
    ASSIGNBXOR      reduce using rule 221 (expr -> not .)
    ASSIGNLSHIFT    reduce using rule 221 (expr -> not .)
    ASSIGNRSHIFT    reduce using rule 221 (expr -> not .)
    ASSIGNRRSHIFT   reduce using rule 221 (expr -> not .)
    ASSIGNLLSHIFT   reduce using rule 221 (expr -> not .)
    ASSIGN          reduce using rule 221 (expr -> not .)
    LSBRACKET       reduce using rule 221 (expr -> not .)
    TLTHAN          reduce using rule 221 (expr -> not .)
    LPAREN          reduce using rule 221 (expr -> not .)
    RPAREN          reduce using rule 221 (expr -> not .)
    RSBRACKET       reduce using rule 221 (expr -> not .)
    COLON           reduce using rule 221 (expr -> not .)
    RBRACKET        reduce using rule 221 (expr -> not .)


state 34

    (188) expr -> obj_literal .

    SEMI            reduce using rule 188 (expr -> obj_literal .)
    RSHIFT          reduce using rule 188 (expr -> obj_literal .)
    LSHIFT          reduce using rule 188 (expr -> obj_literal .)
    LLSHIFT         reduce using rule 188 (expr -> obj_literal .)
    RRSHIFT         reduce using rule 188 (expr -> obj_literal .)
    DOT             reduce using rule 188 (expr -> obj_literal .)
    LAND            reduce using rule 188 (expr -> obj_literal .)
    LOR             reduce using rule 188 (expr -> obj_literal .)
    BOR             reduce using rule 188 (expr -> obj_literal .)
    INSTANCEOF      reduce using rule 188 (expr -> obj_literal .)
    BXOR            reduce using rule 188 (expr -> obj_literal .)
    BAND            reduce using rule 188 (expr -> obj_literal .)
    EQUAL           reduce using rule 188 (expr -> obj_literal .)
    EQUAL_STRICT    reduce using rule 188 (expr -> obj_literal .)
    NOTEQUAL_STRICT reduce using rule 188 (expr -> obj_literal .)
    GTHAN           reduce using rule 188 (expr -> obj_literal .)
    GTHANEQ         reduce using rule 188 (expr -> obj_literal .)
    LTHAN           reduce using rule 188 (expr -> obj_literal .)
    MOD             reduce using rule 188 (expr -> obj_literal .)
    LTHANEQ         reduce using rule 188 (expr -> obj_literal .)
    NOTEQUAL        reduce using rule 188 (expr -> obj_literal .)
    PLUS            reduce using rule 188 (expr -> obj_literal .)
    MINUS           reduce using rule 188 (expr -> obj_literal .)
    DIVIDE          reduce using rule 188 (expr -> obj_literal .)
    TIMES           reduce using rule 188 (expr -> obj_literal .)
    IN              reduce using rule 188 (expr -> obj_literal .)
    QEST            reduce using rule 188 (expr -> obj_literal .)
    COMMA           reduce using rule 188 (expr -> obj_literal .)
    INC             reduce using rule 188 (expr -> obj_literal .)
    DEC             reduce using rule 188 (expr -> obj_literal .)
    ASSIGNPLUS      reduce using rule 188 (expr -> obj_literal .)
    ASSIGNMINUS     reduce using rule 188 (expr -> obj_literal .)
    ASSIGNDIVIDE    reduce using rule 188 (expr -> obj_literal .)
    ASSIGNTIMES     reduce using rule 188 (expr -> obj_literal .)
    ASSIGNBOR       reduce using rule 188 (expr -> obj_literal .)
    ASSIGNBAND      reduce using rule 188 (expr -> obj_literal .)
    ASSIGNBXOR      reduce using rule 188 (expr -> obj_literal .)
    ASSIGNLSHIFT    reduce using rule 188 (expr -> obj_literal .)
    ASSIGNRSHIFT    reduce using rule 188 (expr -> obj_literal .)
    ASSIGNRRSHIFT   reduce using rule 188 (expr -> obj_literal .)
    ASSIGNLLSHIFT   reduce using rule 188 (expr -> obj_literal .)
    ASSIGN          reduce using rule 188 (expr -> obj_literal .)
    LSBRACKET       reduce using rule 188 (expr -> obj_literal .)
    TLTHAN          reduce using rule 188 (expr -> obj_literal .)
    LPAREN          reduce using rule 188 (expr -> obj_literal .)
    RPAREN          reduce using rule 188 (expr -> obj_literal .)
    RSBRACKET       reduce using rule 188 (expr -> obj_literal .)
    COLON           reduce using rule 188 (expr -> obj_literal .)
    RBRACKET        reduce using rule 188 (expr -> obj_literal .)


state 35

    (242) for -> FOR . LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> FOR . LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET

    LPAREN          shift and go to state 166


state 36

    (57) type_modifiers -> VAR .

    UNSIGNED        reduce using rule 57 (type_modifiers -> VAR .)
    SIGNED          reduce using rule 57 (type_modifiers -> VAR .)
    CONST           reduce using rule 57 (type_modifiers -> VAR .)
    INT             reduce using rule 57 (type_modifiers -> VAR .)
    SHORT           reduce using rule 57 (type_modifiers -> VAR .)
    FLOAT           reduce using rule 57 (type_modifiers -> VAR .)
    DOUBLE          reduce using rule 57 (type_modifiers -> VAR .)
    CHAR            reduce using rule 57 (type_modifiers -> VAR .)
    BYTE            reduce using rule 57 (type_modifiers -> VAR .)
    INFERRED        reduce using rule 57 (type_modifiers -> VAR .)
    ID              reduce using rule 57 (type_modifiers -> VAR .)
    GLOBAL          reduce using rule 57 (type_modifiers -> VAR .)
    VAR             reduce using rule 57 (type_modifiers -> VAR .)
    STATIC          reduce using rule 57 (type_modifiers -> VAR .)


state 37

    (224) expr -> inc .

    SEMI            reduce using rule 224 (expr -> inc .)
    RSHIFT          reduce using rule 224 (expr -> inc .)
    LSHIFT          reduce using rule 224 (expr -> inc .)
    LLSHIFT         reduce using rule 224 (expr -> inc .)
    RRSHIFT         reduce using rule 224 (expr -> inc .)
    DOT             reduce using rule 224 (expr -> inc .)
    LAND            reduce using rule 224 (expr -> inc .)
    LOR             reduce using rule 224 (expr -> inc .)
    BOR             reduce using rule 224 (expr -> inc .)
    INSTANCEOF      reduce using rule 224 (expr -> inc .)
    BXOR            reduce using rule 224 (expr -> inc .)
    BAND            reduce using rule 224 (expr -> inc .)
    EQUAL           reduce using rule 224 (expr -> inc .)
    EQUAL_STRICT    reduce using rule 224 (expr -> inc .)
    NOTEQUAL_STRICT reduce using rule 224 (expr -> inc .)
    GTHAN           reduce using rule 224 (expr -> inc .)
    GTHANEQ         reduce using rule 224 (expr -> inc .)
    LTHAN           reduce using rule 224 (expr -> inc .)
    MOD             reduce using rule 224 (expr -> inc .)
    LTHANEQ         reduce using rule 224 (expr -> inc .)
    NOTEQUAL        reduce using rule 224 (expr -> inc .)
    PLUS            reduce using rule 224 (expr -> inc .)
    MINUS           reduce using rule 224 (expr -> inc .)
    DIVIDE          reduce using rule 224 (expr -> inc .)
    TIMES           reduce using rule 224 (expr -> inc .)
    IN              reduce using rule 224 (expr -> inc .)
    QEST            reduce using rule 224 (expr -> inc .)
    COMMA           reduce using rule 224 (expr -> inc .)
    INC             reduce using rule 224 (expr -> inc .)
    DEC             reduce using rule 224 (expr -> inc .)
    ASSIGNPLUS      reduce using rule 224 (expr -> inc .)
    ASSIGNMINUS     reduce using rule 224 (expr -> inc .)
    ASSIGNDIVIDE    reduce using rule 224 (expr -> inc .)
    ASSIGNTIMES     reduce using rule 224 (expr -> inc .)
    ASSIGNBOR       reduce using rule 224 (expr -> inc .)
    ASSIGNBAND      reduce using rule 224 (expr -> inc .)
    ASSIGNBXOR      reduce using rule 224 (expr -> inc .)
    ASSIGNLSHIFT    reduce using rule 224 (expr -> inc .)
    ASSIGNRSHIFT    reduce using rule 224 (expr -> inc .)
    ASSIGNRRSHIFT   reduce using rule 224 (expr -> inc .)
    ASSIGNLLSHIFT   reduce using rule 224 (expr -> inc .)
    ASSIGN          reduce using rule 224 (expr -> inc .)
    LSBRACKET       reduce using rule 224 (expr -> inc .)
    TLTHAN          reduce using rule 224 (expr -> inc .)
    LPAREN          reduce using rule 224 (expr -> inc .)
    RPAREN          reduce using rule 224 (expr -> inc .)
    RSBRACKET       reduce using rule 224 (expr -> inc .)
    COLON           reduce using rule 224 (expr -> inc .)
    RBRACKET        reduce using rule 224 (expr -> inc .)


state 38

    (21) statement -> yield . SEMI
    (39) statement_nonctrl -> yield . SEMI

    SEMI            shift and go to state 167


state 39

    (181) expr -> NUMBER .

    SEMI            reduce using rule 181 (expr -> NUMBER .)
    RSHIFT          reduce using rule 181 (expr -> NUMBER .)
    LSHIFT          reduce using rule 181 (expr -> NUMBER .)
    LLSHIFT         reduce using rule 181 (expr -> NUMBER .)
    RRSHIFT         reduce using rule 181 (expr -> NUMBER .)
    DOT             reduce using rule 181 (expr -> NUMBER .)
    LAND            reduce using rule 181 (expr -> NUMBER .)
    LOR             reduce using rule 181 (expr -> NUMBER .)
    BOR             reduce using rule 181 (expr -> NUMBER .)
    INSTANCEOF      reduce using rule 181 (expr -> NUMBER .)
    BXOR            reduce using rule 181 (expr -> NUMBER .)
    BAND            reduce using rule 181 (expr -> NUMBER .)
    EQUAL           reduce using rule 181 (expr -> NUMBER .)
    EQUAL_STRICT    reduce using rule 181 (expr -> NUMBER .)
    NOTEQUAL_STRICT reduce using rule 181 (expr -> NUMBER .)
    GTHAN           reduce using rule 181 (expr -> NUMBER .)
    GTHANEQ         reduce using rule 181 (expr -> NUMBER .)
    LTHAN           reduce using rule 181 (expr -> NUMBER .)
    MOD             reduce using rule 181 (expr -> NUMBER .)
    LTHANEQ         reduce using rule 181 (expr -> NUMBER .)
    NOTEQUAL        reduce using rule 181 (expr -> NUMBER .)
    PLUS            reduce using rule 181 (expr -> NUMBER .)
    MINUS           reduce using rule 181 (expr -> NUMBER .)
    DIVIDE          reduce using rule 181 (expr -> NUMBER .)
    TIMES           reduce using rule 181 (expr -> NUMBER .)
    IN              reduce using rule 181 (expr -> NUMBER .)
    QEST            reduce using rule 181 (expr -> NUMBER .)
    COMMA           reduce using rule 181 (expr -> NUMBER .)
    INC             reduce using rule 181 (expr -> NUMBER .)
    DEC             reduce using rule 181 (expr -> NUMBER .)
    ASSIGNPLUS      reduce using rule 181 (expr -> NUMBER .)
    ASSIGNMINUS     reduce using rule 181 (expr -> NUMBER .)
    ASSIGNDIVIDE    reduce using rule 181 (expr -> NUMBER .)
    ASSIGNTIMES     reduce using rule 181 (expr -> NUMBER .)
    ASSIGNBOR       reduce using rule 181 (expr -> NUMBER .)
    ASSIGNBAND      reduce using rule 181 (expr -> NUMBER .)
    ASSIGNBXOR      reduce using rule 181 (expr -> NUMBER .)
    ASSIGNLSHIFT    reduce using rule 181 (expr -> NUMBER .)
    ASSIGNRSHIFT    reduce using rule 181 (expr -> NUMBER .)
    ASSIGNRRSHIFT   reduce using rule 181 (expr -> NUMBER .)
    ASSIGNLLSHIFT   reduce using rule 181 (expr -> NUMBER .)
    ASSIGN          reduce using rule 181 (expr -> NUMBER .)
    LSBRACKET       reduce using rule 181 (expr -> NUMBER .)
    TLTHAN          reduce using rule 181 (expr -> NUMBER .)
    LPAREN          reduce using rule 181 (expr -> NUMBER .)
    RPAREN          reduce using rule 181 (expr -> NUMBER .)
    RSBRACKET       reduce using rule 181 (expr -> NUMBER .)
    COLON           reduce using rule 181 (expr -> NUMBER .)
    RBRACKET        reduce using rule 181 (expr -> NUMBER .)


state 40

    (56) type_modifiers -> GLOBAL .

    UNSIGNED        reduce using rule 56 (type_modifiers -> GLOBAL .)
    SIGNED          reduce using rule 56 (type_modifiers -> GLOBAL .)
    CONST           reduce using rule 56 (type_modifiers -> GLOBAL .)
    INT             reduce using rule 56 (type_modifiers -> GLOBAL .)
    SHORT           reduce using rule 56 (type_modifiers -> GLOBAL .)
    FLOAT           reduce using rule 56 (type_modifiers -> GLOBAL .)
    DOUBLE          reduce using rule 56 (type_modifiers -> GLOBAL .)
    CHAR            reduce using rule 56 (type_modifiers -> GLOBAL .)
    BYTE            reduce using rule 56 (type_modifiers -> GLOBAL .)
    INFERRED        reduce using rule 56 (type_modifiers -> GLOBAL .)
    ID              reduce using rule 56 (type_modifiers -> GLOBAL .)
    GLOBAL          reduce using rule 56 (type_modifiers -> GLOBAL .)
    VAR             reduce using rule 56 (type_modifiers -> GLOBAL .)
    STATIC          reduce using rule 56 (type_modifiers -> GLOBAL .)


state 41

    (16) statement -> while .
    (37) statement_nonctrl -> while .

  ! reduce/reduce conflict for SEMI resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for CLASS resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for IF resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for ELSE resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for WHILE resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for WITH resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for DO resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for YIELD resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for BREAK resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for THROW resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for TRY resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for CATCH resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for SWITCH resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for NATIVE resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for NUMBER resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for ID resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for DELETE resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for LPAREN resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for MINUS resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for NOT resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for BITINV resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for NEW resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for INC resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for DEC resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for VAR resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for STATIC resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for CASE resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 16 (statement -> while .)
  ! reduce/reduce conflict for $end resolved using rule 16 (statement -> while .)
    SEMI            reduce using rule 16 (statement -> while .)
    FUNCTION        reduce using rule 16 (statement -> while .)
    CLASS           reduce using rule 16 (statement -> while .)
    IF              reduce using rule 16 (statement -> while .)
    ELSE            reduce using rule 16 (statement -> while .)
    WHILE           reduce using rule 16 (statement -> while .)
    WITH            reduce using rule 16 (statement -> while .)
    DO              reduce using rule 16 (statement -> while .)
    FOR             reduce using rule 16 (statement -> while .)
    RETURN          reduce using rule 16 (statement -> while .)
    YIELD           reduce using rule 16 (statement -> while .)
    BREAK           reduce using rule 16 (statement -> while .)
    CONTINUE        reduce using rule 16 (statement -> while .)
    THROW           reduce using rule 16 (statement -> while .)
    TRY             reduce using rule 16 (statement -> while .)
    CATCH           reduce using rule 16 (statement -> while .)
    SWITCH          reduce using rule 16 (statement -> while .)
    NATIVE          reduce using rule 16 (statement -> while .)
    NUMBER          reduce using rule 16 (statement -> while .)
    ID              reduce using rule 16 (statement -> while .)
    DELETE          reduce using rule 16 (statement -> while .)
    STRINGLIT       reduce using rule 16 (statement -> while .)
    LSBRACKET       reduce using rule 16 (statement -> while .)
    LPAREN          reduce using rule 16 (statement -> while .)
    MINUS           reduce using rule 16 (statement -> while .)
    NOT             reduce using rule 16 (statement -> while .)
    BITINV          reduce using rule 16 (statement -> while .)
    NEW             reduce using rule 16 (statement -> while .)
    INC             reduce using rule 16 (statement -> while .)
    DEC             reduce using rule 16 (statement -> while .)
    TYPEOF          reduce using rule 16 (statement -> while .)
    REGEXPR         reduce using rule 16 (statement -> while .)
    GLOBAL          reduce using rule 16 (statement -> while .)
    VAR             reduce using rule 16 (statement -> while .)
    STATIC          reduce using rule 16 (statement -> while .)
    TLTHAN          reduce using rule 16 (statement -> while .)
    LBRACKET        reduce using rule 16 (statement -> while .)
    RBRACKET        reduce using rule 16 (statement -> while .)
    $end            reduce using rule 16 (statement -> while .)
    CASE            reduce using rule 16 (statement -> while .)
    DEFAULT         reduce using rule 16 (statement -> while .)

  ! SEMI            [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! FUNCTION        [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! CLASS           [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! IF              [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! ELSE            [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! WHILE           [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! WITH            [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! DO              [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! FOR             [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! RETURN          [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! YIELD           [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! BREAK           [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! CONTINUE        [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! THROW           [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! TRY             [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! CATCH           [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! SWITCH          [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! NATIVE          [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! NUMBER          [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! ID              [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! DELETE          [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! STRINGLIT       [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! LSBRACKET       [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! LPAREN          [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! MINUS           [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! NOT             [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! BITINV          [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! NEW             [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! INC             [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! DEC             [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! TYPEOF          [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! REGEXPR         [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! GLOBAL          [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! VAR             [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! STATIC          [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! TLTHAN          [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! LBRACKET        [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! RBRACKET        [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! CASE            [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! DEFAULT         [ reduce using rule 37 (statement_nonctrl -> while .) ]
  ! $end            [ reduce using rule 37 (statement_nonctrl -> while .) ]


state 42

    (174) not -> NOT . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 168
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 43

    (262) if -> IF . paren_expr ctrl_statement
    (230) paren_expr -> . LPAREN expr RPAREN
    (231) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 79

    paren_expr                     shift and go to state 169

state 44

    (183) expr -> ID .
    (184) expr -> ID . template_ref
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for TLTHAN resolved as shift
    SEMI            reduce using rule 183 (expr -> ID .)
    RSHIFT          reduce using rule 183 (expr -> ID .)
    LSHIFT          reduce using rule 183 (expr -> ID .)
    LLSHIFT         reduce using rule 183 (expr -> ID .)
    RRSHIFT         reduce using rule 183 (expr -> ID .)
    DOT             reduce using rule 183 (expr -> ID .)
    LAND            reduce using rule 183 (expr -> ID .)
    LOR             reduce using rule 183 (expr -> ID .)
    BOR             reduce using rule 183 (expr -> ID .)
    INSTANCEOF      reduce using rule 183 (expr -> ID .)
    BXOR            reduce using rule 183 (expr -> ID .)
    BAND            reduce using rule 183 (expr -> ID .)
    EQUAL           reduce using rule 183 (expr -> ID .)
    EQUAL_STRICT    reduce using rule 183 (expr -> ID .)
    NOTEQUAL_STRICT reduce using rule 183 (expr -> ID .)
    GTHAN           reduce using rule 183 (expr -> ID .)
    GTHANEQ         reduce using rule 183 (expr -> ID .)
    LTHAN           reduce using rule 183 (expr -> ID .)
    MOD             reduce using rule 183 (expr -> ID .)
    LTHANEQ         reduce using rule 183 (expr -> ID .)
    NOTEQUAL        reduce using rule 183 (expr -> ID .)
    PLUS            reduce using rule 183 (expr -> ID .)
    MINUS           reduce using rule 183 (expr -> ID .)
    DIVIDE          reduce using rule 183 (expr -> ID .)
    TIMES           reduce using rule 183 (expr -> ID .)
    IN              reduce using rule 183 (expr -> ID .)
    QEST            reduce using rule 183 (expr -> ID .)
    COMMA           reduce using rule 183 (expr -> ID .)
    INC             reduce using rule 183 (expr -> ID .)
    DEC             reduce using rule 183 (expr -> ID .)
    ASSIGNPLUS      reduce using rule 183 (expr -> ID .)
    ASSIGNMINUS     reduce using rule 183 (expr -> ID .)
    ASSIGNDIVIDE    reduce using rule 183 (expr -> ID .)
    ASSIGNTIMES     reduce using rule 183 (expr -> ID .)
    ASSIGNBOR       reduce using rule 183 (expr -> ID .)
    ASSIGNBAND      reduce using rule 183 (expr -> ID .)
    ASSIGNBXOR      reduce using rule 183 (expr -> ID .)
    ASSIGNLSHIFT    reduce using rule 183 (expr -> ID .)
    ASSIGNRSHIFT    reduce using rule 183 (expr -> ID .)
    ASSIGNRRSHIFT   reduce using rule 183 (expr -> ID .)
    ASSIGNLLSHIFT   reduce using rule 183 (expr -> ID .)
    ASSIGN          reduce using rule 183 (expr -> ID .)
    LSBRACKET       reduce using rule 183 (expr -> ID .)
    LPAREN          reduce using rule 183 (expr -> ID .)
    RPAREN          reduce using rule 183 (expr -> ID .)
    RSBRACKET       reduce using rule 183 (expr -> ID .)
    COLON           reduce using rule 183 (expr -> ID .)
    RBRACKET        reduce using rule 183 (expr -> ID .)
    TLTHAN          shift and go to state 10

  ! TLTHAN          [ reduce using rule 183 (expr -> ID .) ]

    lthan_restrict                 shift and go to state 13
    template_ref                   shift and go to state 170

state 45

    (225) expr -> dec .

    SEMI            reduce using rule 225 (expr -> dec .)
    RSHIFT          reduce using rule 225 (expr -> dec .)
    LSHIFT          reduce using rule 225 (expr -> dec .)
    LLSHIFT         reduce using rule 225 (expr -> dec .)
    RRSHIFT         reduce using rule 225 (expr -> dec .)
    DOT             reduce using rule 225 (expr -> dec .)
    LAND            reduce using rule 225 (expr -> dec .)
    LOR             reduce using rule 225 (expr -> dec .)
    BOR             reduce using rule 225 (expr -> dec .)
    INSTANCEOF      reduce using rule 225 (expr -> dec .)
    BXOR            reduce using rule 225 (expr -> dec .)
    BAND            reduce using rule 225 (expr -> dec .)
    EQUAL           reduce using rule 225 (expr -> dec .)
    EQUAL_STRICT    reduce using rule 225 (expr -> dec .)
    NOTEQUAL_STRICT reduce using rule 225 (expr -> dec .)
    GTHAN           reduce using rule 225 (expr -> dec .)
    GTHANEQ         reduce using rule 225 (expr -> dec .)
    LTHAN           reduce using rule 225 (expr -> dec .)
    MOD             reduce using rule 225 (expr -> dec .)
    LTHANEQ         reduce using rule 225 (expr -> dec .)
    NOTEQUAL        reduce using rule 225 (expr -> dec .)
    PLUS            reduce using rule 225 (expr -> dec .)
    MINUS           reduce using rule 225 (expr -> dec .)
    DIVIDE          reduce using rule 225 (expr -> dec .)
    TIMES           reduce using rule 225 (expr -> dec .)
    IN              reduce using rule 225 (expr -> dec .)
    QEST            reduce using rule 225 (expr -> dec .)
    COMMA           reduce using rule 225 (expr -> dec .)
    INC             reduce using rule 225 (expr -> dec .)
    DEC             reduce using rule 225 (expr -> dec .)
    ASSIGNPLUS      reduce using rule 225 (expr -> dec .)
    ASSIGNMINUS     reduce using rule 225 (expr -> dec .)
    ASSIGNDIVIDE    reduce using rule 225 (expr -> dec .)
    ASSIGNTIMES     reduce using rule 225 (expr -> dec .)
    ASSIGNBOR       reduce using rule 225 (expr -> dec .)
    ASSIGNBAND      reduce using rule 225 (expr -> dec .)
    ASSIGNBXOR      reduce using rule 225 (expr -> dec .)
    ASSIGNLSHIFT    reduce using rule 225 (expr -> dec .)
    ASSIGNRSHIFT    reduce using rule 225 (expr -> dec .)
    ASSIGNRRSHIFT   reduce using rule 225 (expr -> dec .)
    ASSIGNLLSHIFT   reduce using rule 225 (expr -> dec .)
    ASSIGN          reduce using rule 225 (expr -> dec .)
    LSBRACKET       reduce using rule 225 (expr -> dec .)
    TLTHAN          reduce using rule 225 (expr -> dec .)
    LPAREN          reduce using rule 225 (expr -> dec .)
    RPAREN          reduce using rule 225 (expr -> dec .)
    RSBRACKET       reduce using rule 225 (expr -> dec .)
    COLON           reduce using rule 225 (expr -> dec .)
    RBRACKET        reduce using rule 225 (expr -> dec .)


state 46

    (32) statement_nonctrl -> SEMI .

    SEMI            reduce using rule 32 (statement_nonctrl -> SEMI .)
    FUNCTION        reduce using rule 32 (statement_nonctrl -> SEMI .)
    CLASS           reduce using rule 32 (statement_nonctrl -> SEMI .)
    IF              reduce using rule 32 (statement_nonctrl -> SEMI .)
    ELSE            reduce using rule 32 (statement_nonctrl -> SEMI .)
    WHILE           reduce using rule 32 (statement_nonctrl -> SEMI .)
    WITH            reduce using rule 32 (statement_nonctrl -> SEMI .)
    DO              reduce using rule 32 (statement_nonctrl -> SEMI .)
    FOR             reduce using rule 32 (statement_nonctrl -> SEMI .)
    RETURN          reduce using rule 32 (statement_nonctrl -> SEMI .)
    YIELD           reduce using rule 32 (statement_nonctrl -> SEMI .)
    BREAK           reduce using rule 32 (statement_nonctrl -> SEMI .)
    CONTINUE        reduce using rule 32 (statement_nonctrl -> SEMI .)
    THROW           reduce using rule 32 (statement_nonctrl -> SEMI .)
    TRY             reduce using rule 32 (statement_nonctrl -> SEMI .)
    CATCH           reduce using rule 32 (statement_nonctrl -> SEMI .)
    SWITCH          reduce using rule 32 (statement_nonctrl -> SEMI .)
    NATIVE          reduce using rule 32 (statement_nonctrl -> SEMI .)
    NUMBER          reduce using rule 32 (statement_nonctrl -> SEMI .)
    ID              reduce using rule 32 (statement_nonctrl -> SEMI .)
    DELETE          reduce using rule 32 (statement_nonctrl -> SEMI .)
    STRINGLIT       reduce using rule 32 (statement_nonctrl -> SEMI .)
    LSBRACKET       reduce using rule 32 (statement_nonctrl -> SEMI .)
    LPAREN          reduce using rule 32 (statement_nonctrl -> SEMI .)
    MINUS           reduce using rule 32 (statement_nonctrl -> SEMI .)
    NOT             reduce using rule 32 (statement_nonctrl -> SEMI .)
    BITINV          reduce using rule 32 (statement_nonctrl -> SEMI .)
    NEW             reduce using rule 32 (statement_nonctrl -> SEMI .)
    INC             reduce using rule 32 (statement_nonctrl -> SEMI .)
    DEC             reduce using rule 32 (statement_nonctrl -> SEMI .)
    TYPEOF          reduce using rule 32 (statement_nonctrl -> SEMI .)
    REGEXPR         reduce using rule 32 (statement_nonctrl -> SEMI .)
    GLOBAL          reduce using rule 32 (statement_nonctrl -> SEMI .)
    VAR             reduce using rule 32 (statement_nonctrl -> SEMI .)
    STATIC          reduce using rule 32 (statement_nonctrl -> SEMI .)
    TLTHAN          reduce using rule 32 (statement_nonctrl -> SEMI .)
    LBRACKET        reduce using rule 32 (statement_nonctrl -> SEMI .)
    RBRACKET        reduce using rule 32 (statement_nonctrl -> SEMI .)
    CASE            reduce using rule 32 (statement_nonctrl -> SEMI .)
    DEFAULT         reduce using rule 32 (statement_nonctrl -> SEMI .)
    $end            reduce using rule 32 (statement_nonctrl -> SEMI .)


state 47

    (220) expr -> expr_uminus .

    SEMI            reduce using rule 220 (expr -> expr_uminus .)
    RSHIFT          reduce using rule 220 (expr -> expr_uminus .)
    LSHIFT          reduce using rule 220 (expr -> expr_uminus .)
    LLSHIFT         reduce using rule 220 (expr -> expr_uminus .)
    RRSHIFT         reduce using rule 220 (expr -> expr_uminus .)
    DOT             reduce using rule 220 (expr -> expr_uminus .)
    LAND            reduce using rule 220 (expr -> expr_uminus .)
    LOR             reduce using rule 220 (expr -> expr_uminus .)
    BOR             reduce using rule 220 (expr -> expr_uminus .)
    INSTANCEOF      reduce using rule 220 (expr -> expr_uminus .)
    BXOR            reduce using rule 220 (expr -> expr_uminus .)
    BAND            reduce using rule 220 (expr -> expr_uminus .)
    EQUAL           reduce using rule 220 (expr -> expr_uminus .)
    EQUAL_STRICT    reduce using rule 220 (expr -> expr_uminus .)
    NOTEQUAL_STRICT reduce using rule 220 (expr -> expr_uminus .)
    GTHAN           reduce using rule 220 (expr -> expr_uminus .)
    GTHANEQ         reduce using rule 220 (expr -> expr_uminus .)
    LTHAN           reduce using rule 220 (expr -> expr_uminus .)
    MOD             reduce using rule 220 (expr -> expr_uminus .)
    LTHANEQ         reduce using rule 220 (expr -> expr_uminus .)
    NOTEQUAL        reduce using rule 220 (expr -> expr_uminus .)
    PLUS            reduce using rule 220 (expr -> expr_uminus .)
    MINUS           reduce using rule 220 (expr -> expr_uminus .)
    DIVIDE          reduce using rule 220 (expr -> expr_uminus .)
    TIMES           reduce using rule 220 (expr -> expr_uminus .)
    IN              reduce using rule 220 (expr -> expr_uminus .)
    QEST            reduce using rule 220 (expr -> expr_uminus .)
    COMMA           reduce using rule 220 (expr -> expr_uminus .)
    INC             reduce using rule 220 (expr -> expr_uminus .)
    DEC             reduce using rule 220 (expr -> expr_uminus .)
    ASSIGNPLUS      reduce using rule 220 (expr -> expr_uminus .)
    ASSIGNMINUS     reduce using rule 220 (expr -> expr_uminus .)
    ASSIGNDIVIDE    reduce using rule 220 (expr -> expr_uminus .)
    ASSIGNTIMES     reduce using rule 220 (expr -> expr_uminus .)
    ASSIGNBOR       reduce using rule 220 (expr -> expr_uminus .)
    ASSIGNBAND      reduce using rule 220 (expr -> expr_uminus .)
    ASSIGNBXOR      reduce using rule 220 (expr -> expr_uminus .)
    ASSIGNLSHIFT    reduce using rule 220 (expr -> expr_uminus .)
    ASSIGNRSHIFT    reduce using rule 220 (expr -> expr_uminus .)
    ASSIGNRRSHIFT   reduce using rule 220 (expr -> expr_uminus .)
    ASSIGNLLSHIFT   reduce using rule 220 (expr -> expr_uminus .)
    ASSIGN          reduce using rule 220 (expr -> expr_uminus .)
    LSBRACKET       reduce using rule 220 (expr -> expr_uminus .)
    TLTHAN          reduce using rule 220 (expr -> expr_uminus .)
    LPAREN          reduce using rule 220 (expr -> expr_uminus .)
    RPAREN          reduce using rule 220 (expr -> expr_uminus .)
    RSBRACKET       reduce using rule 220 (expr -> expr_uminus .)
    COLON           reduce using rule 220 (expr -> expr_uminus .)
    RBRACKET        reduce using rule 220 (expr -> expr_uminus .)


state 48

    (223) expr -> new .

    SEMI            reduce using rule 223 (expr -> new .)
    RSHIFT          reduce using rule 223 (expr -> new .)
    LSHIFT          reduce using rule 223 (expr -> new .)
    LLSHIFT         reduce using rule 223 (expr -> new .)
    RRSHIFT         reduce using rule 223 (expr -> new .)
    DOT             reduce using rule 223 (expr -> new .)
    LAND            reduce using rule 223 (expr -> new .)
    LOR             reduce using rule 223 (expr -> new .)
    BOR             reduce using rule 223 (expr -> new .)
    INSTANCEOF      reduce using rule 223 (expr -> new .)
    BXOR            reduce using rule 223 (expr -> new .)
    BAND            reduce using rule 223 (expr -> new .)
    EQUAL           reduce using rule 223 (expr -> new .)
    EQUAL_STRICT    reduce using rule 223 (expr -> new .)
    NOTEQUAL_STRICT reduce using rule 223 (expr -> new .)
    GTHAN           reduce using rule 223 (expr -> new .)
    GTHANEQ         reduce using rule 223 (expr -> new .)
    LTHAN           reduce using rule 223 (expr -> new .)
    MOD             reduce using rule 223 (expr -> new .)
    LTHANEQ         reduce using rule 223 (expr -> new .)
    NOTEQUAL        reduce using rule 223 (expr -> new .)
    PLUS            reduce using rule 223 (expr -> new .)
    MINUS           reduce using rule 223 (expr -> new .)
    DIVIDE          reduce using rule 223 (expr -> new .)
    TIMES           reduce using rule 223 (expr -> new .)
    IN              reduce using rule 223 (expr -> new .)
    QEST            reduce using rule 223 (expr -> new .)
    COMMA           reduce using rule 223 (expr -> new .)
    INC             reduce using rule 223 (expr -> new .)
    DEC             reduce using rule 223 (expr -> new .)
    ASSIGNPLUS      reduce using rule 223 (expr -> new .)
    ASSIGNMINUS     reduce using rule 223 (expr -> new .)
    ASSIGNDIVIDE    reduce using rule 223 (expr -> new .)
    ASSIGNTIMES     reduce using rule 223 (expr -> new .)
    ASSIGNBOR       reduce using rule 223 (expr -> new .)
    ASSIGNBAND      reduce using rule 223 (expr -> new .)
    ASSIGNBXOR      reduce using rule 223 (expr -> new .)
    ASSIGNLSHIFT    reduce using rule 223 (expr -> new .)
    ASSIGNRSHIFT    reduce using rule 223 (expr -> new .)
    ASSIGNRRSHIFT   reduce using rule 223 (expr -> new .)
    ASSIGNLLSHIFT   reduce using rule 223 (expr -> new .)
    ASSIGN          reduce using rule 223 (expr -> new .)
    LSBRACKET       reduce using rule 223 (expr -> new .)
    TLTHAN          reduce using rule 223 (expr -> new .)
    LPAREN          reduce using rule 223 (expr -> new .)
    RPAREN          reduce using rule 223 (expr -> new .)
    RSBRACKET       reduce using rule 223 (expr -> new .)
    COLON           reduce using rule 223 (expr -> new .)
    RBRACKET        reduce using rule 223 (expr -> new .)


state 49

    (270) continue -> CONTINUE .

    SEMI            reduce using rule 270 (continue -> CONTINUE .)


state 50

    (148) function -> FUNCTION . ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (146) funcref -> FUNCTION . ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (155) exprfunction -> FUNCTION . template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> FUNCTION . template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (142) template_opt -> . template
    (143) template_opt -> .
    (52) template -> . lthan_restrict templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    ID              shift and go to state 172
    LPAREN          reduce using rule 143 (template_opt -> .)
    TLTHAN          shift and go to state 10

    template_opt                   shift and go to state 171
    template                       shift and go to state 173
    lthan_restrict                 shift and go to state 174

state 51

    (28) statement -> func_native . SEMI

    SEMI            shift and go to state 175


state 52

    (22) statement -> break . SEMI
    (40) statement_nonctrl -> break . SEMI

    SEMI            shift and go to state 176


state 53

    (1) statementlist -> statement .

    RBRACKET        reduce using rule 1 (statementlist -> statement .)
    SEMI            reduce using rule 1 (statementlist -> statement .)
    FUNCTION        reduce using rule 1 (statementlist -> statement .)
    CLASS           reduce using rule 1 (statementlist -> statement .)
    IF              reduce using rule 1 (statementlist -> statement .)
    ELSE            reduce using rule 1 (statementlist -> statement .)
    WHILE           reduce using rule 1 (statementlist -> statement .)
    WITH            reduce using rule 1 (statementlist -> statement .)
    DO              reduce using rule 1 (statementlist -> statement .)
    FOR             reduce using rule 1 (statementlist -> statement .)
    RETURN          reduce using rule 1 (statementlist -> statement .)
    YIELD           reduce using rule 1 (statementlist -> statement .)
    BREAK           reduce using rule 1 (statementlist -> statement .)
    CONTINUE        reduce using rule 1 (statementlist -> statement .)
    THROW           reduce using rule 1 (statementlist -> statement .)
    TRY             reduce using rule 1 (statementlist -> statement .)
    CATCH           reduce using rule 1 (statementlist -> statement .)
    SWITCH          reduce using rule 1 (statementlist -> statement .)
    NATIVE          reduce using rule 1 (statementlist -> statement .)
    NUMBER          reduce using rule 1 (statementlist -> statement .)
    ID              reduce using rule 1 (statementlist -> statement .)
    DELETE          reduce using rule 1 (statementlist -> statement .)
    STRINGLIT       reduce using rule 1 (statementlist -> statement .)
    LSBRACKET       reduce using rule 1 (statementlist -> statement .)
    LPAREN          reduce using rule 1 (statementlist -> statement .)
    MINUS           reduce using rule 1 (statementlist -> statement .)
    NOT             reduce using rule 1 (statementlist -> statement .)
    BITINV          reduce using rule 1 (statementlist -> statement .)
    NEW             reduce using rule 1 (statementlist -> statement .)
    INC             reduce using rule 1 (statementlist -> statement .)
    DEC             reduce using rule 1 (statementlist -> statement .)
    TYPEOF          reduce using rule 1 (statementlist -> statement .)
    REGEXPR         reduce using rule 1 (statementlist -> statement .)
    GLOBAL          reduce using rule 1 (statementlist -> statement .)
    VAR             reduce using rule 1 (statementlist -> statement .)
    STATIC          reduce using rule 1 (statementlist -> statement .)
    TLTHAN          reduce using rule 1 (statementlist -> statement .)
    LBRACKET        reduce using rule 1 (statementlist -> statement .)
    CASE            reduce using rule 1 (statementlist -> statement .)
    DEFAULT         reduce using rule 1 (statementlist -> statement .)
    $end            reduce using rule 1 (statementlist -> statement .)


state 54

    (247) dowhile -> DO . ctrl_statement WHILE paren_expr
    (244) ctrl_statement -> . statement_nonctrl
    (245) ctrl_statement -> . LBRACKET statementlist_opt RBRACKET
    (246) ctrl_statement -> . SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 162
    SEMI            shift and go to state 160
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    FUNCTION        shift and go to state 97
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    FOR             shift and go to state 35
    DO              shift and go to state 54
    WHILE           shift and go to state 31
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10

    while                          shift and go to state 96
    expr                           shift and go to state 19
    if                             shift and go to state 90
    dec                            shift and go to state 45
    for                            shift and go to state 91
    expr_uminus                    shift and go to state 47
    catch                          shift and go to state 93
    typeof                         shift and go to state 75
    break                          shift and go to state 98
    lthan_restrict                 shift and go to state 13
    funcref                        shift and go to state 15
    exprfunction                   shift and go to state 17
    dowhile                        shift and go to state 99
    delete                         shift and go to state 58
    throw                          shift and go to state 92
    try                            shift and go to state 100
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    array_literal                  shift and go to state 66
    var_decl                       shift and go to state 74
    template_ref                   shift and go to state 5
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 102
    else                           shift and go to state 103
    return                         shift and go to state 94
    bitinv                         shift and go to state 7
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    ctrl_statement                 shift and go to state 177
    re_lit                         shift and go to state 32
    inc                            shift and go to state 37
    yield                          shift and go to state 95
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 163

state 55

    (171) inc -> INC . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 178
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 56

    (18) statement -> dowhile .
    (36) statement_nonctrl -> dowhile .

  ! reduce/reduce conflict for SEMI resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for CLASS resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for IF resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for ELSE resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for WHILE resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for WITH resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for DO resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for FOR resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for RETURN resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for YIELD resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for BREAK resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for THROW resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for TRY resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for CATCH resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for SWITCH resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for NATIVE resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for NUMBER resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for ID resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for DELETE resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for LPAREN resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for MINUS resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for NOT resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for BITINV resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for NEW resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for INC resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for DEC resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for VAR resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for STATIC resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for CASE resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 18 (statement -> dowhile .)
  ! reduce/reduce conflict for $end resolved using rule 18 (statement -> dowhile .)
    SEMI            reduce using rule 18 (statement -> dowhile .)
    FUNCTION        reduce using rule 18 (statement -> dowhile .)
    CLASS           reduce using rule 18 (statement -> dowhile .)
    IF              reduce using rule 18 (statement -> dowhile .)
    ELSE            reduce using rule 18 (statement -> dowhile .)
    WHILE           reduce using rule 18 (statement -> dowhile .)
    WITH            reduce using rule 18 (statement -> dowhile .)
    DO              reduce using rule 18 (statement -> dowhile .)
    FOR             reduce using rule 18 (statement -> dowhile .)
    RETURN          reduce using rule 18 (statement -> dowhile .)
    YIELD           reduce using rule 18 (statement -> dowhile .)
    BREAK           reduce using rule 18 (statement -> dowhile .)
    CONTINUE        reduce using rule 18 (statement -> dowhile .)
    THROW           reduce using rule 18 (statement -> dowhile .)
    TRY             reduce using rule 18 (statement -> dowhile .)
    CATCH           reduce using rule 18 (statement -> dowhile .)
    SWITCH          reduce using rule 18 (statement -> dowhile .)
    NATIVE          reduce using rule 18 (statement -> dowhile .)
    NUMBER          reduce using rule 18 (statement -> dowhile .)
    ID              reduce using rule 18 (statement -> dowhile .)
    DELETE          reduce using rule 18 (statement -> dowhile .)
    STRINGLIT       reduce using rule 18 (statement -> dowhile .)
    LSBRACKET       reduce using rule 18 (statement -> dowhile .)
    LPAREN          reduce using rule 18 (statement -> dowhile .)
    MINUS           reduce using rule 18 (statement -> dowhile .)
    NOT             reduce using rule 18 (statement -> dowhile .)
    BITINV          reduce using rule 18 (statement -> dowhile .)
    NEW             reduce using rule 18 (statement -> dowhile .)
    INC             reduce using rule 18 (statement -> dowhile .)
    DEC             reduce using rule 18 (statement -> dowhile .)
    TYPEOF          reduce using rule 18 (statement -> dowhile .)
    REGEXPR         reduce using rule 18 (statement -> dowhile .)
    GLOBAL          reduce using rule 18 (statement -> dowhile .)
    VAR             reduce using rule 18 (statement -> dowhile .)
    STATIC          reduce using rule 18 (statement -> dowhile .)
    TLTHAN          reduce using rule 18 (statement -> dowhile .)
    LBRACKET        reduce using rule 18 (statement -> dowhile .)
    RBRACKET        reduce using rule 18 (statement -> dowhile .)
    $end            reduce using rule 18 (statement -> dowhile .)
    CASE            reduce using rule 18 (statement -> dowhile .)
    DEFAULT         reduce using rule 18 (statement -> dowhile .)

  ! SEMI            [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! FUNCTION        [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! CLASS           [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! IF              [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! ELSE            [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! WHILE           [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! WITH            [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! DO              [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! FOR             [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! RETURN          [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! YIELD           [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! BREAK           [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! CONTINUE        [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! THROW           [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! TRY             [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! CATCH           [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! SWITCH          [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! NATIVE          [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! NUMBER          [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! ID              [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! DELETE          [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! STRINGLIT       [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! LSBRACKET       [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! LPAREN          [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! MINUS           [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! NOT             [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! BITINV          [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! NEW             [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! INC             [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! DEC             [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! TYPEOF          [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! REGEXPR         [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! GLOBAL          [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! VAR             [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! STATIC          [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! TLTHAN          [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! LBRACKET        [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! RBRACKET        [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! CASE            [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! DEFAULT         [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]
  ! $end            [ reduce using rule 36 (statement_nonctrl -> dowhile .) ]


state 57

    (216) expr -> lparen_restrict . expr rparen_restrict
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 179
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 58

    (45) statement_nonctrl -> delete . SEMI

    SEMI            shift and go to state 180


state 59

    (266) catch -> CATCH . paren_expr statement_nonctrl
    (267) catch -> CATCH . paren_expr LBRACKET statementlist RBRACKET
    (230) paren_expr -> . LPAREN expr RPAREN
    (231) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 79

    paren_expr                     shift and go to state 181

state 60

    (25) statement -> try .
    (43) statement_nonctrl -> try .

  ! reduce/reduce conflict for SEMI resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for CLASS resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for IF resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for ELSE resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for WITH resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for DO resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for RETURN resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for YIELD resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for BREAK resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for THROW resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for TRY resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for CATCH resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for SWITCH resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for NATIVE resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for NUMBER resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for ID resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for DELETE resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for LPAREN resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for MINUS resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for NOT resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for BITINV resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for NEW resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for INC resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for DEC resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for VAR resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for STATIC resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for CASE resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 25 (statement -> try .)
  ! reduce/reduce conflict for $end resolved using rule 25 (statement -> try .)
    SEMI            reduce using rule 25 (statement -> try .)
    FUNCTION        reduce using rule 25 (statement -> try .)
    CLASS           reduce using rule 25 (statement -> try .)
    IF              reduce using rule 25 (statement -> try .)
    ELSE            reduce using rule 25 (statement -> try .)
    WHILE           reduce using rule 25 (statement -> try .)
    WITH            reduce using rule 25 (statement -> try .)
    DO              reduce using rule 25 (statement -> try .)
    FOR             reduce using rule 25 (statement -> try .)
    RETURN          reduce using rule 25 (statement -> try .)
    YIELD           reduce using rule 25 (statement -> try .)
    BREAK           reduce using rule 25 (statement -> try .)
    CONTINUE        reduce using rule 25 (statement -> try .)
    THROW           reduce using rule 25 (statement -> try .)
    TRY             reduce using rule 25 (statement -> try .)
    CATCH           reduce using rule 25 (statement -> try .)
    SWITCH          reduce using rule 25 (statement -> try .)
    NATIVE          reduce using rule 25 (statement -> try .)
    NUMBER          reduce using rule 25 (statement -> try .)
    ID              reduce using rule 25 (statement -> try .)
    DELETE          reduce using rule 25 (statement -> try .)
    STRINGLIT       reduce using rule 25 (statement -> try .)
    LSBRACKET       reduce using rule 25 (statement -> try .)
    LPAREN          reduce using rule 25 (statement -> try .)
    MINUS           reduce using rule 25 (statement -> try .)
    NOT             reduce using rule 25 (statement -> try .)
    BITINV          reduce using rule 25 (statement -> try .)
    NEW             reduce using rule 25 (statement -> try .)
    INC             reduce using rule 25 (statement -> try .)
    DEC             reduce using rule 25 (statement -> try .)
    TYPEOF          reduce using rule 25 (statement -> try .)
    REGEXPR         reduce using rule 25 (statement -> try .)
    GLOBAL          reduce using rule 25 (statement -> try .)
    VAR             reduce using rule 25 (statement -> try .)
    STATIC          reduce using rule 25 (statement -> try .)
    TLTHAN          reduce using rule 25 (statement -> try .)
    LBRACKET        reduce using rule 25 (statement -> try .)
    RBRACKET        reduce using rule 25 (statement -> try .)
    $end            reduce using rule 25 (statement -> try .)
    CASE            reduce using rule 25 (statement -> try .)
    DEFAULT         reduce using rule 25 (statement -> try .)

  ! SEMI            [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! FUNCTION        [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! CLASS           [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! IF              [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! ELSE            [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! WHILE           [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! WITH            [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! DO              [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! FOR             [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! RETURN          [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! YIELD           [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! BREAK           [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! CONTINUE        [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! THROW           [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! TRY             [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! CATCH           [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! SWITCH          [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! NATIVE          [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! NUMBER          [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! ID              [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! DELETE          [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! STRINGLIT       [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! LSBRACKET       [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! LPAREN          [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! MINUS           [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! NOT             [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! BITINV          [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! NEW             [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! INC             [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! DEC             [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! TYPEOF          [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! REGEXPR         [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! GLOBAL          [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! VAR             [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! STATIC          [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! TLTHAN          [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! LBRACKET        [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! RBRACKET        [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! CASE            [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! DEFAULT         [ reduce using rule 43 (statement_nonctrl -> try .) ]
  ! $end            [ reduce using rule 43 (statement_nonctrl -> try .) ]


state 61

    (58) type_modifiers -> STATIC .

    UNSIGNED        reduce using rule 58 (type_modifiers -> STATIC .)
    SIGNED          reduce using rule 58 (type_modifiers -> STATIC .)
    CONST           reduce using rule 58 (type_modifiers -> STATIC .)
    INT             reduce using rule 58 (type_modifiers -> STATIC .)
    SHORT           reduce using rule 58 (type_modifiers -> STATIC .)
    FLOAT           reduce using rule 58 (type_modifiers -> STATIC .)
    DOUBLE          reduce using rule 58 (type_modifiers -> STATIC .)
    CHAR            reduce using rule 58 (type_modifiers -> STATIC .)
    BYTE            reduce using rule 58 (type_modifiers -> STATIC .)
    INFERRED        reduce using rule 58 (type_modifiers -> STATIC .)
    ID              reduce using rule 58 (type_modifiers -> STATIC .)
    GLOBAL          reduce using rule 58 (type_modifiers -> STATIC .)
    VAR             reduce using rule 58 (type_modifiers -> STATIC .)
    STATIC          reduce using rule 58 (type_modifiers -> STATIC .)


state 62

    (27) statement -> switch .

    SEMI            reduce using rule 27 (statement -> switch .)
    FUNCTION        reduce using rule 27 (statement -> switch .)
    CLASS           reduce using rule 27 (statement -> switch .)
    IF              reduce using rule 27 (statement -> switch .)
    ELSE            reduce using rule 27 (statement -> switch .)
    WHILE           reduce using rule 27 (statement -> switch .)
    WITH            reduce using rule 27 (statement -> switch .)
    DO              reduce using rule 27 (statement -> switch .)
    FOR             reduce using rule 27 (statement -> switch .)
    RETURN          reduce using rule 27 (statement -> switch .)
    YIELD           reduce using rule 27 (statement -> switch .)
    BREAK           reduce using rule 27 (statement -> switch .)
    CONTINUE        reduce using rule 27 (statement -> switch .)
    THROW           reduce using rule 27 (statement -> switch .)
    TRY             reduce using rule 27 (statement -> switch .)
    CATCH           reduce using rule 27 (statement -> switch .)
    SWITCH          reduce using rule 27 (statement -> switch .)
    NATIVE          reduce using rule 27 (statement -> switch .)
    NUMBER          reduce using rule 27 (statement -> switch .)
    ID              reduce using rule 27 (statement -> switch .)
    DELETE          reduce using rule 27 (statement -> switch .)
    STRINGLIT       reduce using rule 27 (statement -> switch .)
    LSBRACKET       reduce using rule 27 (statement -> switch .)
    LPAREN          reduce using rule 27 (statement -> switch .)
    MINUS           reduce using rule 27 (statement -> switch .)
    NOT             reduce using rule 27 (statement -> switch .)
    BITINV          reduce using rule 27 (statement -> switch .)
    NEW             reduce using rule 27 (statement -> switch .)
    INC             reduce using rule 27 (statement -> switch .)
    DEC             reduce using rule 27 (statement -> switch .)
    TYPEOF          reduce using rule 27 (statement -> switch .)
    REGEXPR         reduce using rule 27 (statement -> switch .)
    GLOBAL          reduce using rule 27 (statement -> switch .)
    VAR             reduce using rule 27 (statement -> switch .)
    STATIC          reduce using rule 27 (statement -> switch .)
    TLTHAN          reduce using rule 27 (statement -> switch .)
    LBRACKET        reduce using rule 27 (statement -> switch .)
    RBRACKET        reduce using rule 27 (statement -> switch .)
    $end            reduce using rule 27 (statement -> switch .)
    CASE            reduce using rule 27 (statement -> switch .)
    DEFAULT         reduce using rule 27 (statement -> switch .)


state 63

    (157) array_literal -> LSBRACKET . exprlist RSBRACKET
    (158) array_literal -> LSBRACKET . RSBRACKET
    (112) exprlist -> . expr
    (113) exprlist -> . exprlist COMMA expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    RSBRACKET       shift and go to state 184
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    exprlist                       shift and go to state 182
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 183
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 64

    (166) obj_literal -> lbracket_restrict . push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> lbracket_restrict . rbracket_restrict
    (6) push_scope -> .
    (150) rbracket_restrict -> . RBRACKET

    ID              reduce using rule 6 (push_scope -> .)
    NUMBER          reduce using rule 6 (push_scope -> .)
    STRINGLIT       reduce using rule 6 (push_scope -> .)
    RBRACKET        shift and go to state 186

    rbracket_restrict              shift and go to state 185
    push_scope                     shift and go to state 187

state 65

    (147) func_native -> NATIVE . push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (6) push_scope -> .

    FUNCTION        reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 188

state 66

    (186) expr -> array_literal .

    SEMI            reduce using rule 186 (expr -> array_literal .)
    RSHIFT          reduce using rule 186 (expr -> array_literal .)
    LSHIFT          reduce using rule 186 (expr -> array_literal .)
    LLSHIFT         reduce using rule 186 (expr -> array_literal .)
    RRSHIFT         reduce using rule 186 (expr -> array_literal .)
    DOT             reduce using rule 186 (expr -> array_literal .)
    LAND            reduce using rule 186 (expr -> array_literal .)
    LOR             reduce using rule 186 (expr -> array_literal .)
    BOR             reduce using rule 186 (expr -> array_literal .)
    INSTANCEOF      reduce using rule 186 (expr -> array_literal .)
    BXOR            reduce using rule 186 (expr -> array_literal .)
    BAND            reduce using rule 186 (expr -> array_literal .)
    EQUAL           reduce using rule 186 (expr -> array_literal .)
    EQUAL_STRICT    reduce using rule 186 (expr -> array_literal .)
    NOTEQUAL_STRICT reduce using rule 186 (expr -> array_literal .)
    GTHAN           reduce using rule 186 (expr -> array_literal .)
    GTHANEQ         reduce using rule 186 (expr -> array_literal .)
    LTHAN           reduce using rule 186 (expr -> array_literal .)
    MOD             reduce using rule 186 (expr -> array_literal .)
    LTHANEQ         reduce using rule 186 (expr -> array_literal .)
    NOTEQUAL        reduce using rule 186 (expr -> array_literal .)
    PLUS            reduce using rule 186 (expr -> array_literal .)
    MINUS           reduce using rule 186 (expr -> array_literal .)
    DIVIDE          reduce using rule 186 (expr -> array_literal .)
    TIMES           reduce using rule 186 (expr -> array_literal .)
    IN              reduce using rule 186 (expr -> array_literal .)
    QEST            reduce using rule 186 (expr -> array_literal .)
    COMMA           reduce using rule 186 (expr -> array_literal .)
    INC             reduce using rule 186 (expr -> array_literal .)
    DEC             reduce using rule 186 (expr -> array_literal .)
    ASSIGNPLUS      reduce using rule 186 (expr -> array_literal .)
    ASSIGNMINUS     reduce using rule 186 (expr -> array_literal .)
    ASSIGNDIVIDE    reduce using rule 186 (expr -> array_literal .)
    ASSIGNTIMES     reduce using rule 186 (expr -> array_literal .)
    ASSIGNBOR       reduce using rule 186 (expr -> array_literal .)
    ASSIGNBAND      reduce using rule 186 (expr -> array_literal .)
    ASSIGNBXOR      reduce using rule 186 (expr -> array_literal .)
    ASSIGNLSHIFT    reduce using rule 186 (expr -> array_literal .)
    ASSIGNRSHIFT    reduce using rule 186 (expr -> array_literal .)
    ASSIGNRRSHIFT   reduce using rule 186 (expr -> array_literal .)
    ASSIGNLLSHIFT   reduce using rule 186 (expr -> array_literal .)
    ASSIGN          reduce using rule 186 (expr -> array_literal .)
    LSBRACKET       reduce using rule 186 (expr -> array_literal .)
    TLTHAN          reduce using rule 186 (expr -> array_literal .)
    LPAREN          reduce using rule 186 (expr -> array_literal .)
    RPAREN          reduce using rule 186 (expr -> array_literal .)
    RSBRACKET       reduce using rule 186 (expr -> array_literal .)
    COLON           reduce using rule 186 (expr -> array_literal .)
    RBRACKET        reduce using rule 186 (expr -> array_literal .)


state 67

    (149) lbracket_restrict -> LBRACKET .

    RBRACKET        reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    ID              reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    NUMBER          reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    STRINGLIT       reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    SEMI            reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    FUNCTION        reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    CLASS           reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    IF              reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    ELSE            reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    WHILE           reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    WITH            reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    DO              reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    FOR             reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    RETURN          reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    YIELD           reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    BREAK           reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    CONTINUE        reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    THROW           reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    TRY             reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    CATCH           reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    SWITCH          reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    NATIVE          reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    DELETE          reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    LSBRACKET       reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    LPAREN          reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    MINUS           reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    NOT             reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    BITINV          reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    NEW             reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    INC             reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    DEC             reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    TYPEOF          reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    REGEXPR         reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    GLOBAL          reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    VAR             reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    STATIC          reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    TLTHAN          reduce using rule 149 (lbracket_restrict -> LBRACKET .)
    LBRACKET        reduce using rule 149 (lbracket_restrict -> LBRACKET .)


state 68

    (273) yield -> YIELD . expr
    (274) yield -> YIELD .
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    SEMI            reduce using rule 274 (yield -> YIELD .)
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 189
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 69

    (72) var_decl -> type_modifiers . var_type
    (53) type_modifiers -> type_modifiers . UNSIGNED
    (54) type_modifiers -> type_modifiers . SIGNED
    (55) type_modifiers -> type_modifiers . CONST
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    UNSIGNED        shift and go to state 202
    SIGNED          shift and go to state 199
    CONST           shift and go to state 196
    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    var_type                       shift and go to state 201
    id_var_type                    shift and go to state 191

state 70

    (23) statement -> continue . SEMI
    (41) statement_nonctrl -> continue . SEMI

    SEMI            shift and go to state 203


state 71

    (15) statement -> else .
    (34) statement_nonctrl -> else .

  ! reduce/reduce conflict for SEMI resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for CLASS resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for IF resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for WITH resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for DO resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for YIELD resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for BREAK resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for THROW resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for TRY resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for CATCH resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for SWITCH resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for NATIVE resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for ID resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for DELETE resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for LPAREN resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for BITINV resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for NEW resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for INC resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for DEC resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for VAR resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for STATIC resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for CASE resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 15 (statement -> else .)
  ! reduce/reduce conflict for $end resolved using rule 15 (statement -> else .)
    SEMI            reduce using rule 15 (statement -> else .)
    FUNCTION        reduce using rule 15 (statement -> else .)
    CLASS           reduce using rule 15 (statement -> else .)
    IF              reduce using rule 15 (statement -> else .)
    ELSE            reduce using rule 15 (statement -> else .)
    WHILE           reduce using rule 15 (statement -> else .)
    WITH            reduce using rule 15 (statement -> else .)
    DO              reduce using rule 15 (statement -> else .)
    FOR             reduce using rule 15 (statement -> else .)
    RETURN          reduce using rule 15 (statement -> else .)
    YIELD           reduce using rule 15 (statement -> else .)
    BREAK           reduce using rule 15 (statement -> else .)
    CONTINUE        reduce using rule 15 (statement -> else .)
    THROW           reduce using rule 15 (statement -> else .)
    TRY             reduce using rule 15 (statement -> else .)
    CATCH           reduce using rule 15 (statement -> else .)
    SWITCH          reduce using rule 15 (statement -> else .)
    NATIVE          reduce using rule 15 (statement -> else .)
    NUMBER          reduce using rule 15 (statement -> else .)
    ID              reduce using rule 15 (statement -> else .)
    DELETE          reduce using rule 15 (statement -> else .)
    STRINGLIT       reduce using rule 15 (statement -> else .)
    LSBRACKET       reduce using rule 15 (statement -> else .)
    LPAREN          reduce using rule 15 (statement -> else .)
    MINUS           reduce using rule 15 (statement -> else .)
    NOT             reduce using rule 15 (statement -> else .)
    BITINV          reduce using rule 15 (statement -> else .)
    NEW             reduce using rule 15 (statement -> else .)
    INC             reduce using rule 15 (statement -> else .)
    DEC             reduce using rule 15 (statement -> else .)
    TYPEOF          reduce using rule 15 (statement -> else .)
    REGEXPR         reduce using rule 15 (statement -> else .)
    GLOBAL          reduce using rule 15 (statement -> else .)
    VAR             reduce using rule 15 (statement -> else .)
    STATIC          reduce using rule 15 (statement -> else .)
    TLTHAN          reduce using rule 15 (statement -> else .)
    LBRACKET        reduce using rule 15 (statement -> else .)
    RBRACKET        reduce using rule 15 (statement -> else .)
    $end            reduce using rule 15 (statement -> else .)
    CASE            reduce using rule 15 (statement -> else .)
    DEFAULT         reduce using rule 15 (statement -> else .)

  ! SEMI            [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! FUNCTION        [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! CLASS           [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! IF              [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! ELSE            [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! WHILE           [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! WITH            [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! DO              [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! FOR             [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! RETURN          [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! YIELD           [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! BREAK           [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! CONTINUE        [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! THROW           [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! TRY             [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! CATCH           [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! SWITCH          [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! NATIVE          [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! NUMBER          [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! ID              [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! DELETE          [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! STRINGLIT       [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! LSBRACKET       [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! LPAREN          [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! MINUS           [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! NOT             [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! BITINV          [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! NEW             [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! INC             [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! DEC             [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! TYPEOF          [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! REGEXPR         [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! GLOBAL          [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! VAR             [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! STATIC          [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! TLTHAN          [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! LBRACKET        [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! RBRACKET        [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! CASE            [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! DEFAULT         [ reduce using rule 34 (statement_nonctrl -> else .) ]
  ! $end            [ reduce using rule 34 (statement_nonctrl -> else .) ]


state 72

    (261) with -> WITH . paren_expr ctrl_statement
    (230) paren_expr -> . LPAREN expr RPAREN
    (231) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 79

    paren_expr                     shift and go to state 204

state 73

    (173) dec -> DEC . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 205
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 74

    (30) statement_nonctrl -> var_decl . SEMI
    (73) var_decl -> var_decl . ASSIGN expr
    (74) var_decl -> var_decl . COMMA ID
    (75) var_decl -> var_decl . COMMA ID ASSIGN expr

    SEMI            shift and go to state 207
    ASSIGN          shift and go to state 206
    COMMA           shift and go to state 208


state 75

    (226) expr -> typeof .

    SEMI            reduce using rule 226 (expr -> typeof .)
    RSHIFT          reduce using rule 226 (expr -> typeof .)
    LSHIFT          reduce using rule 226 (expr -> typeof .)
    LLSHIFT         reduce using rule 226 (expr -> typeof .)
    RRSHIFT         reduce using rule 226 (expr -> typeof .)
    DOT             reduce using rule 226 (expr -> typeof .)
    LAND            reduce using rule 226 (expr -> typeof .)
    LOR             reduce using rule 226 (expr -> typeof .)
    BOR             reduce using rule 226 (expr -> typeof .)
    INSTANCEOF      reduce using rule 226 (expr -> typeof .)
    BXOR            reduce using rule 226 (expr -> typeof .)
    BAND            reduce using rule 226 (expr -> typeof .)
    EQUAL           reduce using rule 226 (expr -> typeof .)
    EQUAL_STRICT    reduce using rule 226 (expr -> typeof .)
    NOTEQUAL_STRICT reduce using rule 226 (expr -> typeof .)
    GTHAN           reduce using rule 226 (expr -> typeof .)
    GTHANEQ         reduce using rule 226 (expr -> typeof .)
    LTHAN           reduce using rule 226 (expr -> typeof .)
    MOD             reduce using rule 226 (expr -> typeof .)
    LTHANEQ         reduce using rule 226 (expr -> typeof .)
    NOTEQUAL        reduce using rule 226 (expr -> typeof .)
    PLUS            reduce using rule 226 (expr -> typeof .)
    MINUS           reduce using rule 226 (expr -> typeof .)
    DIVIDE          reduce using rule 226 (expr -> typeof .)
    TIMES           reduce using rule 226 (expr -> typeof .)
    IN              reduce using rule 226 (expr -> typeof .)
    QEST            reduce using rule 226 (expr -> typeof .)
    COMMA           reduce using rule 226 (expr -> typeof .)
    INC             reduce using rule 226 (expr -> typeof .)
    DEC             reduce using rule 226 (expr -> typeof .)
    ASSIGNPLUS      reduce using rule 226 (expr -> typeof .)
    ASSIGNMINUS     reduce using rule 226 (expr -> typeof .)
    ASSIGNDIVIDE    reduce using rule 226 (expr -> typeof .)
    ASSIGNTIMES     reduce using rule 226 (expr -> typeof .)
    ASSIGNBOR       reduce using rule 226 (expr -> typeof .)
    ASSIGNBAND      reduce using rule 226 (expr -> typeof .)
    ASSIGNBXOR      reduce using rule 226 (expr -> typeof .)
    ASSIGNLSHIFT    reduce using rule 226 (expr -> typeof .)
    ASSIGNRSHIFT    reduce using rule 226 (expr -> typeof .)
    ASSIGNRRSHIFT   reduce using rule 226 (expr -> typeof .)
    ASSIGNLLSHIFT   reduce using rule 226 (expr -> typeof .)
    ASSIGN          reduce using rule 226 (expr -> typeof .)
    LSBRACKET       reduce using rule 226 (expr -> typeof .)
    TLTHAN          reduce using rule 226 (expr -> typeof .)
    LPAREN          reduce using rule 226 (expr -> typeof .)
    RPAREN          reduce using rule 226 (expr -> typeof .)
    RSBRACKET       reduce using rule 226 (expr -> typeof .)
    COLON           reduce using rule 226 (expr -> typeof .)
    RBRACKET        reduce using rule 226 (expr -> typeof .)


state 76

    (13) statement -> class .

    SEMI            reduce using rule 13 (statement -> class .)
    FUNCTION        reduce using rule 13 (statement -> class .)
    CLASS           reduce using rule 13 (statement -> class .)
    IF              reduce using rule 13 (statement -> class .)
    ELSE            reduce using rule 13 (statement -> class .)
    WHILE           reduce using rule 13 (statement -> class .)
    WITH            reduce using rule 13 (statement -> class .)
    DO              reduce using rule 13 (statement -> class .)
    FOR             reduce using rule 13 (statement -> class .)
    RETURN          reduce using rule 13 (statement -> class .)
    YIELD           reduce using rule 13 (statement -> class .)
    BREAK           reduce using rule 13 (statement -> class .)
    CONTINUE        reduce using rule 13 (statement -> class .)
    THROW           reduce using rule 13 (statement -> class .)
    TRY             reduce using rule 13 (statement -> class .)
    CATCH           reduce using rule 13 (statement -> class .)
    SWITCH          reduce using rule 13 (statement -> class .)
    NATIVE          reduce using rule 13 (statement -> class .)
    NUMBER          reduce using rule 13 (statement -> class .)
    ID              reduce using rule 13 (statement -> class .)
    DELETE          reduce using rule 13 (statement -> class .)
    STRINGLIT       reduce using rule 13 (statement -> class .)
    LSBRACKET       reduce using rule 13 (statement -> class .)
    LPAREN          reduce using rule 13 (statement -> class .)
    MINUS           reduce using rule 13 (statement -> class .)
    NOT             reduce using rule 13 (statement -> class .)
    BITINV          reduce using rule 13 (statement -> class .)
    NEW             reduce using rule 13 (statement -> class .)
    INC             reduce using rule 13 (statement -> class .)
    DEC             reduce using rule 13 (statement -> class .)
    TYPEOF          reduce using rule 13 (statement -> class .)
    REGEXPR         reduce using rule 13 (statement -> class .)
    GLOBAL          reduce using rule 13 (statement -> class .)
    VAR             reduce using rule 13 (statement -> class .)
    STATIC          reduce using rule 13 (statement -> class .)
    TLTHAN          reduce using rule 13 (statement -> class .)
    LBRACKET        reduce using rule 13 (statement -> class .)
    RBRACKET        reduce using rule 13 (statement -> class .)
    $end            reduce using rule 13 (statement -> class .)
    CASE            reduce using rule 13 (statement -> class .)
    DEFAULT         reduce using rule 13 (statement -> class .)


state 77

    (182) expr -> strlit .

    SEMI            reduce using rule 182 (expr -> strlit .)
    RSHIFT          reduce using rule 182 (expr -> strlit .)
    LSHIFT          reduce using rule 182 (expr -> strlit .)
    LLSHIFT         reduce using rule 182 (expr -> strlit .)
    RRSHIFT         reduce using rule 182 (expr -> strlit .)
    DOT             reduce using rule 182 (expr -> strlit .)
    LAND            reduce using rule 182 (expr -> strlit .)
    LOR             reduce using rule 182 (expr -> strlit .)
    BOR             reduce using rule 182 (expr -> strlit .)
    INSTANCEOF      reduce using rule 182 (expr -> strlit .)
    BXOR            reduce using rule 182 (expr -> strlit .)
    BAND            reduce using rule 182 (expr -> strlit .)
    EQUAL           reduce using rule 182 (expr -> strlit .)
    EQUAL_STRICT    reduce using rule 182 (expr -> strlit .)
    NOTEQUAL_STRICT reduce using rule 182 (expr -> strlit .)
    GTHAN           reduce using rule 182 (expr -> strlit .)
    GTHANEQ         reduce using rule 182 (expr -> strlit .)
    LTHAN           reduce using rule 182 (expr -> strlit .)
    MOD             reduce using rule 182 (expr -> strlit .)
    LTHANEQ         reduce using rule 182 (expr -> strlit .)
    NOTEQUAL        reduce using rule 182 (expr -> strlit .)
    PLUS            reduce using rule 182 (expr -> strlit .)
    MINUS           reduce using rule 182 (expr -> strlit .)
    DIVIDE          reduce using rule 182 (expr -> strlit .)
    TIMES           reduce using rule 182 (expr -> strlit .)
    IN              reduce using rule 182 (expr -> strlit .)
    QEST            reduce using rule 182 (expr -> strlit .)
    COMMA           reduce using rule 182 (expr -> strlit .)
    INC             reduce using rule 182 (expr -> strlit .)
    DEC             reduce using rule 182 (expr -> strlit .)
    ASSIGNPLUS      reduce using rule 182 (expr -> strlit .)
    ASSIGNMINUS     reduce using rule 182 (expr -> strlit .)
    ASSIGNDIVIDE    reduce using rule 182 (expr -> strlit .)
    ASSIGNTIMES     reduce using rule 182 (expr -> strlit .)
    ASSIGNBOR       reduce using rule 182 (expr -> strlit .)
    ASSIGNBAND      reduce using rule 182 (expr -> strlit .)
    ASSIGNBXOR      reduce using rule 182 (expr -> strlit .)
    ASSIGNLSHIFT    reduce using rule 182 (expr -> strlit .)
    ASSIGNRSHIFT    reduce using rule 182 (expr -> strlit .)
    ASSIGNRRSHIFT   reduce using rule 182 (expr -> strlit .)
    ASSIGNLLSHIFT   reduce using rule 182 (expr -> strlit .)
    ASSIGN          reduce using rule 182 (expr -> strlit .)
    LSBRACKET       reduce using rule 182 (expr -> strlit .)
    TLTHAN          reduce using rule 182 (expr -> strlit .)
    LPAREN          reduce using rule 182 (expr -> strlit .)
    RPAREN          reduce using rule 182 (expr -> strlit .)
    RSBRACKET       reduce using rule 182 (expr -> strlit .)
    COLON           reduce using rule 182 (expr -> strlit .)
    RBRACKET        reduce using rule 182 (expr -> strlit .)


state 78

    (2) statementlist -> statement_nonctrl .

    RBRACKET        reduce using rule 2 (statementlist -> statement_nonctrl .)
    SEMI            reduce using rule 2 (statementlist -> statement_nonctrl .)
    FUNCTION        reduce using rule 2 (statementlist -> statement_nonctrl .)
    CLASS           reduce using rule 2 (statementlist -> statement_nonctrl .)
    IF              reduce using rule 2 (statementlist -> statement_nonctrl .)
    ELSE            reduce using rule 2 (statementlist -> statement_nonctrl .)
    WHILE           reduce using rule 2 (statementlist -> statement_nonctrl .)
    WITH            reduce using rule 2 (statementlist -> statement_nonctrl .)
    DO              reduce using rule 2 (statementlist -> statement_nonctrl .)
    FOR             reduce using rule 2 (statementlist -> statement_nonctrl .)
    RETURN          reduce using rule 2 (statementlist -> statement_nonctrl .)
    YIELD           reduce using rule 2 (statementlist -> statement_nonctrl .)
    BREAK           reduce using rule 2 (statementlist -> statement_nonctrl .)
    CONTINUE        reduce using rule 2 (statementlist -> statement_nonctrl .)
    THROW           reduce using rule 2 (statementlist -> statement_nonctrl .)
    TRY             reduce using rule 2 (statementlist -> statement_nonctrl .)
    CATCH           reduce using rule 2 (statementlist -> statement_nonctrl .)
    SWITCH          reduce using rule 2 (statementlist -> statement_nonctrl .)
    NATIVE          reduce using rule 2 (statementlist -> statement_nonctrl .)
    NUMBER          reduce using rule 2 (statementlist -> statement_nonctrl .)
    ID              reduce using rule 2 (statementlist -> statement_nonctrl .)
    DELETE          reduce using rule 2 (statementlist -> statement_nonctrl .)
    STRINGLIT       reduce using rule 2 (statementlist -> statement_nonctrl .)
    LSBRACKET       reduce using rule 2 (statementlist -> statement_nonctrl .)
    LPAREN          reduce using rule 2 (statementlist -> statement_nonctrl .)
    MINUS           reduce using rule 2 (statementlist -> statement_nonctrl .)
    NOT             reduce using rule 2 (statementlist -> statement_nonctrl .)
    BITINV          reduce using rule 2 (statementlist -> statement_nonctrl .)
    NEW             reduce using rule 2 (statementlist -> statement_nonctrl .)
    INC             reduce using rule 2 (statementlist -> statement_nonctrl .)
    DEC             reduce using rule 2 (statementlist -> statement_nonctrl .)
    TYPEOF          reduce using rule 2 (statementlist -> statement_nonctrl .)
    REGEXPR         reduce using rule 2 (statementlist -> statement_nonctrl .)
    GLOBAL          reduce using rule 2 (statementlist -> statement_nonctrl .)
    VAR             reduce using rule 2 (statementlist -> statement_nonctrl .)
    STATIC          reduce using rule 2 (statementlist -> statement_nonctrl .)
    TLTHAN          reduce using rule 2 (statementlist -> statement_nonctrl .)
    LBRACKET        reduce using rule 2 (statementlist -> statement_nonctrl .)
    CASE            reduce using rule 2 (statementlist -> statement_nonctrl .)
    DEFAULT         reduce using rule 2 (statementlist -> statement_nonctrl .)
    $end            reduce using rule 2 (statementlist -> statement_nonctrl .)


state 79

    (230) paren_expr -> LPAREN . expr RPAREN
    (231) paren_expr -> LPAREN . RPAREN
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    RPAREN          shift and go to state 210
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 209
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 80

    (260) switch -> SWITCH paren_expr . LBRACKET case_block RBRACKET

    LBRACKET        shift and go to state 211


state 81

    (114) class -> CLASS ID . template_opt class_tail
    (142) template_opt -> . template
    (143) template_opt -> .
    (52) template -> . lthan_restrict templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    EXTENDS         reduce using rule 143 (template_opt -> .)
    LBRACKET        reduce using rule 143 (template_opt -> .)
    TLTHAN          shift and go to state 10

    template_opt                   shift and go to state 212
    template                       shift and go to state 173
    lthan_restrict                 shift and go to state 174

state 82

    (155) exprfunction -> FUNCTION . template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> FUNCTION . template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (142) template_opt -> . template
    (143) template_opt -> .
    (52) template -> . lthan_restrict templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 143 (template_opt -> .)
    TLTHAN          shift and go to state 10

    template                       shift and go to state 173
    template_opt                   shift and go to state 171
    lthan_restrict                 shift and go to state 174

state 83

    (162) typeof -> TYPEOF expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 162 (typeof -> TYPEOF expr .)
    RSHIFT          reduce using rule 162 (typeof -> TYPEOF expr .)
    LSHIFT          reduce using rule 162 (typeof -> TYPEOF expr .)
    LLSHIFT         reduce using rule 162 (typeof -> TYPEOF expr .)
    RRSHIFT         reduce using rule 162 (typeof -> TYPEOF expr .)
    LAND            reduce using rule 162 (typeof -> TYPEOF expr .)
    LOR             reduce using rule 162 (typeof -> TYPEOF expr .)
    BOR             reduce using rule 162 (typeof -> TYPEOF expr .)
    INSTANCEOF      reduce using rule 162 (typeof -> TYPEOF expr .)
    BXOR            reduce using rule 162 (typeof -> TYPEOF expr .)
    BAND            reduce using rule 162 (typeof -> TYPEOF expr .)
    EQUAL           reduce using rule 162 (typeof -> TYPEOF expr .)
    EQUAL_STRICT    reduce using rule 162 (typeof -> TYPEOF expr .)
    NOTEQUAL_STRICT reduce using rule 162 (typeof -> TYPEOF expr .)
    GTHAN           reduce using rule 162 (typeof -> TYPEOF expr .)
    GTHANEQ         reduce using rule 162 (typeof -> TYPEOF expr .)
    LTHAN           reduce using rule 162 (typeof -> TYPEOF expr .)
    MOD             reduce using rule 162 (typeof -> TYPEOF expr .)
    LTHANEQ         reduce using rule 162 (typeof -> TYPEOF expr .)
    NOTEQUAL        reduce using rule 162 (typeof -> TYPEOF expr .)
    PLUS            reduce using rule 162 (typeof -> TYPEOF expr .)
    MINUS           reduce using rule 162 (typeof -> TYPEOF expr .)
    DIVIDE          reduce using rule 162 (typeof -> TYPEOF expr .)
    TIMES           reduce using rule 162 (typeof -> TYPEOF expr .)
    IN              reduce using rule 162 (typeof -> TYPEOF expr .)
    QEST            reduce using rule 162 (typeof -> TYPEOF expr .)
    COMMA           reduce using rule 162 (typeof -> TYPEOF expr .)
    ASSIGNPLUS      reduce using rule 162 (typeof -> TYPEOF expr .)
    ASSIGNMINUS     reduce using rule 162 (typeof -> TYPEOF expr .)
    ASSIGNDIVIDE    reduce using rule 162 (typeof -> TYPEOF expr .)
    ASSIGNTIMES     reduce using rule 162 (typeof -> TYPEOF expr .)
    ASSIGNBOR       reduce using rule 162 (typeof -> TYPEOF expr .)
    ASSIGNBAND      reduce using rule 162 (typeof -> TYPEOF expr .)
    ASSIGNBXOR      reduce using rule 162 (typeof -> TYPEOF expr .)
    ASSIGNLSHIFT    reduce using rule 162 (typeof -> TYPEOF expr .)
    ASSIGNRSHIFT    reduce using rule 162 (typeof -> TYPEOF expr .)
    ASSIGNRRSHIFT   reduce using rule 162 (typeof -> TYPEOF expr .)
    ASSIGNLLSHIFT   reduce using rule 162 (typeof -> TYPEOF expr .)
    ASSIGN          reduce using rule 162 (typeof -> TYPEOF expr .)
    TLTHAN          reduce using rule 162 (typeof -> TYPEOF expr .)
    RPAREN          reduce using rule 162 (typeof -> TYPEOF expr .)
    RSBRACKET       reduce using rule 162 (typeof -> TYPEOF expr .)
    COLON           reduce using rule 162 (typeof -> TYPEOF expr .)
    RBRACKET        reduce using rule 162 (typeof -> TYPEOF expr .)
    DOT             shift and go to state 117
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 162 (typeof -> TYPEOF expr .) ]
  ! INC             [ reduce using rule 162 (typeof -> TYPEOF expr .) ]
  ! DEC             [ reduce using rule 162 (typeof -> TYPEOF expr .) ]
  ! LSBRACKET       [ reduce using rule 162 (typeof -> TYPEOF expr .) ]
  ! LPAREN          [ reduce using rule 162 (typeof -> TYPEOF expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! PLUS            [ shift and go to state 152 ]
  ! MINUS           [ shift and go to state 132 ]
  ! DIVIDE          [ shift and go to state 135 ]
  ! TIMES           [ shift and go to state 113 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 84

    (175) bitinv -> BITINV expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    RSHIFT          reduce using rule 175 (bitinv -> BITINV expr .)
    LSHIFT          reduce using rule 175 (bitinv -> BITINV expr .)
    LLSHIFT         reduce using rule 175 (bitinv -> BITINV expr .)
    RRSHIFT         reduce using rule 175 (bitinv -> BITINV expr .)
    LAND            reduce using rule 175 (bitinv -> BITINV expr .)
    LOR             reduce using rule 175 (bitinv -> BITINV expr .)
    BOR             reduce using rule 175 (bitinv -> BITINV expr .)
    INSTANCEOF      reduce using rule 175 (bitinv -> BITINV expr .)
    BXOR            reduce using rule 175 (bitinv -> BITINV expr .)
    BAND            reduce using rule 175 (bitinv -> BITINV expr .)
    EQUAL           reduce using rule 175 (bitinv -> BITINV expr .)
    EQUAL_STRICT    reduce using rule 175 (bitinv -> BITINV expr .)
    NOTEQUAL_STRICT reduce using rule 175 (bitinv -> BITINV expr .)
    GTHAN           reduce using rule 175 (bitinv -> BITINV expr .)
    GTHANEQ         reduce using rule 175 (bitinv -> BITINV expr .)
    LTHAN           reduce using rule 175 (bitinv -> BITINV expr .)
    MOD             reduce using rule 175 (bitinv -> BITINV expr .)
    LTHANEQ         reduce using rule 175 (bitinv -> BITINV expr .)
    NOTEQUAL        reduce using rule 175 (bitinv -> BITINV expr .)
    PLUS            reduce using rule 175 (bitinv -> BITINV expr .)
    MINUS           reduce using rule 175 (bitinv -> BITINV expr .)
    DIVIDE          reduce using rule 175 (bitinv -> BITINV expr .)
    TIMES           reduce using rule 175 (bitinv -> BITINV expr .)
    IN              reduce using rule 175 (bitinv -> BITINV expr .)
    QEST            reduce using rule 175 (bitinv -> BITINV expr .)
    COMMA           reduce using rule 175 (bitinv -> BITINV expr .)
    ASSIGNPLUS      reduce using rule 175 (bitinv -> BITINV expr .)
    ASSIGNMINUS     reduce using rule 175 (bitinv -> BITINV expr .)
    ASSIGNDIVIDE    reduce using rule 175 (bitinv -> BITINV expr .)
    ASSIGNTIMES     reduce using rule 175 (bitinv -> BITINV expr .)
    ASSIGNBOR       reduce using rule 175 (bitinv -> BITINV expr .)
    ASSIGNBAND      reduce using rule 175 (bitinv -> BITINV expr .)
    ASSIGNBXOR      reduce using rule 175 (bitinv -> BITINV expr .)
    ASSIGNLSHIFT    reduce using rule 175 (bitinv -> BITINV expr .)
    ASSIGNRSHIFT    reduce using rule 175 (bitinv -> BITINV expr .)
    ASSIGNRRSHIFT   reduce using rule 175 (bitinv -> BITINV expr .)
    ASSIGNLLSHIFT   reduce using rule 175 (bitinv -> BITINV expr .)
    ASSIGN          reduce using rule 175 (bitinv -> BITINV expr .)
    TLTHAN          reduce using rule 175 (bitinv -> BITINV expr .)
    RBRACKET        reduce using rule 175 (bitinv -> BITINV expr .)
    SEMI            reduce using rule 175 (bitinv -> BITINV expr .)
    RSBRACKET       reduce using rule 175 (bitinv -> BITINV expr .)
    RPAREN          reduce using rule 175 (bitinv -> BITINV expr .)
    COLON           reduce using rule 175 (bitinv -> BITINV expr .)
    DOT             shift and go to state 117
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 175 (bitinv -> BITINV expr .) ]
  ! INC             [ reduce using rule 175 (bitinv -> BITINV expr .) ]
  ! DEC             [ reduce using rule 175 (bitinv -> BITINV expr .) ]
  ! LSBRACKET       [ reduce using rule 175 (bitinv -> BITINV expr .) ]
  ! LPAREN          [ reduce using rule 175 (bitinv -> BITINV expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! PLUS            [ shift and go to state 152 ]
  ! MINUS           [ shift and go to state 132 ]
  ! DIVIDE          [ shift and go to state 135 ]
  ! TIMES           [ shift and go to state 113 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 85

    (169) new -> NEW expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    RSHIFT          reduce using rule 169 (new -> NEW expr .)
    LSHIFT          reduce using rule 169 (new -> NEW expr .)
    LLSHIFT         reduce using rule 169 (new -> NEW expr .)
    RRSHIFT         reduce using rule 169 (new -> NEW expr .)
    LAND            reduce using rule 169 (new -> NEW expr .)
    LOR             reduce using rule 169 (new -> NEW expr .)
    BOR             reduce using rule 169 (new -> NEW expr .)
    INSTANCEOF      reduce using rule 169 (new -> NEW expr .)
    BXOR            reduce using rule 169 (new -> NEW expr .)
    BAND            reduce using rule 169 (new -> NEW expr .)
    EQUAL           reduce using rule 169 (new -> NEW expr .)
    EQUAL_STRICT    reduce using rule 169 (new -> NEW expr .)
    NOTEQUAL_STRICT reduce using rule 169 (new -> NEW expr .)
    GTHAN           reduce using rule 169 (new -> NEW expr .)
    GTHANEQ         reduce using rule 169 (new -> NEW expr .)
    LTHAN           reduce using rule 169 (new -> NEW expr .)
    MOD             reduce using rule 169 (new -> NEW expr .)
    LTHANEQ         reduce using rule 169 (new -> NEW expr .)
    NOTEQUAL        reduce using rule 169 (new -> NEW expr .)
    PLUS            reduce using rule 169 (new -> NEW expr .)
    MINUS           reduce using rule 169 (new -> NEW expr .)
    DIVIDE          reduce using rule 169 (new -> NEW expr .)
    TIMES           reduce using rule 169 (new -> NEW expr .)
    IN              reduce using rule 169 (new -> NEW expr .)
    QEST            reduce using rule 169 (new -> NEW expr .)
    COMMA           reduce using rule 169 (new -> NEW expr .)
    INC             reduce using rule 169 (new -> NEW expr .)
    DEC             reduce using rule 169 (new -> NEW expr .)
    ASSIGNPLUS      reduce using rule 169 (new -> NEW expr .)
    ASSIGNMINUS     reduce using rule 169 (new -> NEW expr .)
    ASSIGNDIVIDE    reduce using rule 169 (new -> NEW expr .)
    ASSIGNTIMES     reduce using rule 169 (new -> NEW expr .)
    ASSIGNBOR       reduce using rule 169 (new -> NEW expr .)
    ASSIGNBAND      reduce using rule 169 (new -> NEW expr .)
    ASSIGNBXOR      reduce using rule 169 (new -> NEW expr .)
    ASSIGNLSHIFT    reduce using rule 169 (new -> NEW expr .)
    ASSIGNRSHIFT    reduce using rule 169 (new -> NEW expr .)
    ASSIGNRRSHIFT   reduce using rule 169 (new -> NEW expr .)
    ASSIGNLLSHIFT   reduce using rule 169 (new -> NEW expr .)
    ASSIGN          reduce using rule 169 (new -> NEW expr .)
    LSBRACKET       reduce using rule 169 (new -> NEW expr .)
    TLTHAN          reduce using rule 169 (new -> NEW expr .)
    SEMI            reduce using rule 169 (new -> NEW expr .)
    RPAREN          reduce using rule 169 (new -> NEW expr .)
    RSBRACKET       reduce using rule 169 (new -> NEW expr .)
    COLON           reduce using rule 169 (new -> NEW expr .)
    RBRACKET        reduce using rule 169 (new -> NEW expr .)
    DOT             shift and go to state 117
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 169 (new -> NEW expr .) ]
  ! LPAREN          [ reduce using rule 169 (new -> NEW expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! PLUS            [ shift and go to state 152 ]
  ! MINUS           [ shift and go to state 132 ]
  ! DIVIDE          [ shift and go to state 135 ]
  ! TIMES           [ shift and go to state 113 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! INC             [ shift and go to state 118 ]
  ! DEC             [ shift and go to state 149 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! LSBRACKET       [ shift and go to state 111 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 86

    (92) simple_templatedeflist -> typeof_opt . var_type
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    var_type                       shift and go to state 213
    id_var_type                    shift and go to state 191

state 87

    (62) template_ref -> lthan_restrict simple_templatedeflist . gthan_restrict
    (93) simple_templatedeflist -> simple_templatedeflist . COMMA typeof_opt var_type
    (67) gthan_restrict -> . TGTHAN

    COMMA           shift and go to state 216
    TGTHAN          shift and go to state 214

    gthan_restrict                 shift and go to state 215

state 88

    (90) typeof_opt -> TYPEOF .

    INT             reduce using rule 90 (typeof_opt -> TYPEOF .)
    SHORT           reduce using rule 90 (typeof_opt -> TYPEOF .)
    FLOAT           reduce using rule 90 (typeof_opt -> TYPEOF .)
    DOUBLE          reduce using rule 90 (typeof_opt -> TYPEOF .)
    CHAR            reduce using rule 90 (typeof_opt -> TYPEOF .)
    BYTE            reduce using rule 90 (typeof_opt -> TYPEOF .)
    INFERRED        reduce using rule 90 (typeof_opt -> TYPEOF .)
    ID              reduce using rule 90 (typeof_opt -> TYPEOF .)


state 89

    (31) statement_nonctrl -> funcref SEMI .

    SEMI            reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    FUNCTION        reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    CLASS           reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    IF              reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    ELSE            reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    WHILE           reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    WITH            reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    DO              reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    FOR             reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    RETURN          reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    YIELD           reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    BREAK           reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    CONTINUE        reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    THROW           reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    TRY             reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    CATCH           reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    SWITCH          reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    NATIVE          reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    NUMBER          reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    ID              reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    DELETE          reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    STRINGLIT       reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    LSBRACKET       reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    LPAREN          reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    MINUS           reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    NOT             reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    BITINV          reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    NEW             reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    INC             reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    DEC             reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    TYPEOF          reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    REGEXPR         reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    GLOBAL          reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    VAR             reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    STATIC          reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    TLTHAN          reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    LBRACKET        reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    RBRACKET        reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    $end            reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    CASE            reduce using rule 31 (statement_nonctrl -> funcref SEMI .)
    DEFAULT         reduce using rule 31 (statement_nonctrl -> funcref SEMI .)


state 90

    (33) statement_nonctrl -> if .

    SEMI            reduce using rule 33 (statement_nonctrl -> if .)
    FUNCTION        reduce using rule 33 (statement_nonctrl -> if .)
    CLASS           reduce using rule 33 (statement_nonctrl -> if .)
    IF              reduce using rule 33 (statement_nonctrl -> if .)
    ELSE            reduce using rule 33 (statement_nonctrl -> if .)
    WHILE           reduce using rule 33 (statement_nonctrl -> if .)
    WITH            reduce using rule 33 (statement_nonctrl -> if .)
    DO              reduce using rule 33 (statement_nonctrl -> if .)
    FOR             reduce using rule 33 (statement_nonctrl -> if .)
    RETURN          reduce using rule 33 (statement_nonctrl -> if .)
    YIELD           reduce using rule 33 (statement_nonctrl -> if .)
    BREAK           reduce using rule 33 (statement_nonctrl -> if .)
    CONTINUE        reduce using rule 33 (statement_nonctrl -> if .)
    THROW           reduce using rule 33 (statement_nonctrl -> if .)
    TRY             reduce using rule 33 (statement_nonctrl -> if .)
    CATCH           reduce using rule 33 (statement_nonctrl -> if .)
    SWITCH          reduce using rule 33 (statement_nonctrl -> if .)
    NATIVE          reduce using rule 33 (statement_nonctrl -> if .)
    NUMBER          reduce using rule 33 (statement_nonctrl -> if .)
    ID              reduce using rule 33 (statement_nonctrl -> if .)
    DELETE          reduce using rule 33 (statement_nonctrl -> if .)
    STRINGLIT       reduce using rule 33 (statement_nonctrl -> if .)
    LSBRACKET       reduce using rule 33 (statement_nonctrl -> if .)
    LPAREN          reduce using rule 33 (statement_nonctrl -> if .)
    MINUS           reduce using rule 33 (statement_nonctrl -> if .)
    NOT             reduce using rule 33 (statement_nonctrl -> if .)
    BITINV          reduce using rule 33 (statement_nonctrl -> if .)
    NEW             reduce using rule 33 (statement_nonctrl -> if .)
    INC             reduce using rule 33 (statement_nonctrl -> if .)
    DEC             reduce using rule 33 (statement_nonctrl -> if .)
    TYPEOF          reduce using rule 33 (statement_nonctrl -> if .)
    REGEXPR         reduce using rule 33 (statement_nonctrl -> if .)
    GLOBAL          reduce using rule 33 (statement_nonctrl -> if .)
    VAR             reduce using rule 33 (statement_nonctrl -> if .)
    STATIC          reduce using rule 33 (statement_nonctrl -> if .)
    TLTHAN          reduce using rule 33 (statement_nonctrl -> if .)
    LBRACKET        reduce using rule 33 (statement_nonctrl -> if .)
    $end            reduce using rule 33 (statement_nonctrl -> if .)
    RBRACKET        reduce using rule 33 (statement_nonctrl -> if .)
    CASE            reduce using rule 33 (statement_nonctrl -> if .)
    DEFAULT         reduce using rule 33 (statement_nonctrl -> if .)


state 91

    (35) statement_nonctrl -> for .

    SEMI            reduce using rule 35 (statement_nonctrl -> for .)
    FUNCTION        reduce using rule 35 (statement_nonctrl -> for .)
    CLASS           reduce using rule 35 (statement_nonctrl -> for .)
    IF              reduce using rule 35 (statement_nonctrl -> for .)
    ELSE            reduce using rule 35 (statement_nonctrl -> for .)
    WHILE           reduce using rule 35 (statement_nonctrl -> for .)
    WITH            reduce using rule 35 (statement_nonctrl -> for .)
    DO              reduce using rule 35 (statement_nonctrl -> for .)
    FOR             reduce using rule 35 (statement_nonctrl -> for .)
    RETURN          reduce using rule 35 (statement_nonctrl -> for .)
    YIELD           reduce using rule 35 (statement_nonctrl -> for .)
    BREAK           reduce using rule 35 (statement_nonctrl -> for .)
    CONTINUE        reduce using rule 35 (statement_nonctrl -> for .)
    THROW           reduce using rule 35 (statement_nonctrl -> for .)
    TRY             reduce using rule 35 (statement_nonctrl -> for .)
    CATCH           reduce using rule 35 (statement_nonctrl -> for .)
    SWITCH          reduce using rule 35 (statement_nonctrl -> for .)
    NATIVE          reduce using rule 35 (statement_nonctrl -> for .)
    NUMBER          reduce using rule 35 (statement_nonctrl -> for .)
    ID              reduce using rule 35 (statement_nonctrl -> for .)
    DELETE          reduce using rule 35 (statement_nonctrl -> for .)
    STRINGLIT       reduce using rule 35 (statement_nonctrl -> for .)
    LSBRACKET       reduce using rule 35 (statement_nonctrl -> for .)
    LPAREN          reduce using rule 35 (statement_nonctrl -> for .)
    MINUS           reduce using rule 35 (statement_nonctrl -> for .)
    NOT             reduce using rule 35 (statement_nonctrl -> for .)
    BITINV          reduce using rule 35 (statement_nonctrl -> for .)
    NEW             reduce using rule 35 (statement_nonctrl -> for .)
    INC             reduce using rule 35 (statement_nonctrl -> for .)
    DEC             reduce using rule 35 (statement_nonctrl -> for .)
    TYPEOF          reduce using rule 35 (statement_nonctrl -> for .)
    REGEXPR         reduce using rule 35 (statement_nonctrl -> for .)
    GLOBAL          reduce using rule 35 (statement_nonctrl -> for .)
    VAR             reduce using rule 35 (statement_nonctrl -> for .)
    STATIC          reduce using rule 35 (statement_nonctrl -> for .)
    TLTHAN          reduce using rule 35 (statement_nonctrl -> for .)
    LBRACKET        reduce using rule 35 (statement_nonctrl -> for .)
    $end            reduce using rule 35 (statement_nonctrl -> for .)
    RBRACKET        reduce using rule 35 (statement_nonctrl -> for .)
    CASE            reduce using rule 35 (statement_nonctrl -> for .)
    DEFAULT         reduce using rule 35 (statement_nonctrl -> for .)


state 92

    (42) statement_nonctrl -> throw . SEMI

    SEMI            shift and go to state 217


state 93

    (44) statement_nonctrl -> catch .

    SEMI            reduce using rule 44 (statement_nonctrl -> catch .)
    FUNCTION        reduce using rule 44 (statement_nonctrl -> catch .)
    CLASS           reduce using rule 44 (statement_nonctrl -> catch .)
    IF              reduce using rule 44 (statement_nonctrl -> catch .)
    ELSE            reduce using rule 44 (statement_nonctrl -> catch .)
    WHILE           reduce using rule 44 (statement_nonctrl -> catch .)
    WITH            reduce using rule 44 (statement_nonctrl -> catch .)
    DO              reduce using rule 44 (statement_nonctrl -> catch .)
    FOR             reduce using rule 44 (statement_nonctrl -> catch .)
    RETURN          reduce using rule 44 (statement_nonctrl -> catch .)
    YIELD           reduce using rule 44 (statement_nonctrl -> catch .)
    BREAK           reduce using rule 44 (statement_nonctrl -> catch .)
    CONTINUE        reduce using rule 44 (statement_nonctrl -> catch .)
    THROW           reduce using rule 44 (statement_nonctrl -> catch .)
    TRY             reduce using rule 44 (statement_nonctrl -> catch .)
    CATCH           reduce using rule 44 (statement_nonctrl -> catch .)
    SWITCH          reduce using rule 44 (statement_nonctrl -> catch .)
    NATIVE          reduce using rule 44 (statement_nonctrl -> catch .)
    NUMBER          reduce using rule 44 (statement_nonctrl -> catch .)
    ID              reduce using rule 44 (statement_nonctrl -> catch .)
    DELETE          reduce using rule 44 (statement_nonctrl -> catch .)
    STRINGLIT       reduce using rule 44 (statement_nonctrl -> catch .)
    LSBRACKET       reduce using rule 44 (statement_nonctrl -> catch .)
    LPAREN          reduce using rule 44 (statement_nonctrl -> catch .)
    MINUS           reduce using rule 44 (statement_nonctrl -> catch .)
    NOT             reduce using rule 44 (statement_nonctrl -> catch .)
    BITINV          reduce using rule 44 (statement_nonctrl -> catch .)
    NEW             reduce using rule 44 (statement_nonctrl -> catch .)
    INC             reduce using rule 44 (statement_nonctrl -> catch .)
    DEC             reduce using rule 44 (statement_nonctrl -> catch .)
    TYPEOF          reduce using rule 44 (statement_nonctrl -> catch .)
    REGEXPR         reduce using rule 44 (statement_nonctrl -> catch .)
    GLOBAL          reduce using rule 44 (statement_nonctrl -> catch .)
    VAR             reduce using rule 44 (statement_nonctrl -> catch .)
    STATIC          reduce using rule 44 (statement_nonctrl -> catch .)
    TLTHAN          reduce using rule 44 (statement_nonctrl -> catch .)
    LBRACKET        reduce using rule 44 (statement_nonctrl -> catch .)
    $end            reduce using rule 44 (statement_nonctrl -> catch .)
    RBRACKET        reduce using rule 44 (statement_nonctrl -> catch .)
    CASE            reduce using rule 44 (statement_nonctrl -> catch .)
    DEFAULT         reduce using rule 44 (statement_nonctrl -> catch .)


state 94

    (38) statement_nonctrl -> return . SEMI

    SEMI            shift and go to state 218


state 95

    (39) statement_nonctrl -> yield . SEMI

    SEMI            shift and go to state 219


state 96

    (37) statement_nonctrl -> while .

    SEMI            reduce using rule 37 (statement_nonctrl -> while .)
    FUNCTION        reduce using rule 37 (statement_nonctrl -> while .)
    CLASS           reduce using rule 37 (statement_nonctrl -> while .)
    IF              reduce using rule 37 (statement_nonctrl -> while .)
    ELSE            reduce using rule 37 (statement_nonctrl -> while .)
    WHILE           reduce using rule 37 (statement_nonctrl -> while .)
    WITH            reduce using rule 37 (statement_nonctrl -> while .)
    DO              reduce using rule 37 (statement_nonctrl -> while .)
    FOR             reduce using rule 37 (statement_nonctrl -> while .)
    RETURN          reduce using rule 37 (statement_nonctrl -> while .)
    YIELD           reduce using rule 37 (statement_nonctrl -> while .)
    BREAK           reduce using rule 37 (statement_nonctrl -> while .)
    CONTINUE        reduce using rule 37 (statement_nonctrl -> while .)
    THROW           reduce using rule 37 (statement_nonctrl -> while .)
    TRY             reduce using rule 37 (statement_nonctrl -> while .)
    CATCH           reduce using rule 37 (statement_nonctrl -> while .)
    SWITCH          reduce using rule 37 (statement_nonctrl -> while .)
    NATIVE          reduce using rule 37 (statement_nonctrl -> while .)
    NUMBER          reduce using rule 37 (statement_nonctrl -> while .)
    ID              reduce using rule 37 (statement_nonctrl -> while .)
    DELETE          reduce using rule 37 (statement_nonctrl -> while .)
    STRINGLIT       reduce using rule 37 (statement_nonctrl -> while .)
    LSBRACKET       reduce using rule 37 (statement_nonctrl -> while .)
    LPAREN          reduce using rule 37 (statement_nonctrl -> while .)
    MINUS           reduce using rule 37 (statement_nonctrl -> while .)
    NOT             reduce using rule 37 (statement_nonctrl -> while .)
    BITINV          reduce using rule 37 (statement_nonctrl -> while .)
    NEW             reduce using rule 37 (statement_nonctrl -> while .)
    INC             reduce using rule 37 (statement_nonctrl -> while .)
    DEC             reduce using rule 37 (statement_nonctrl -> while .)
    TYPEOF          reduce using rule 37 (statement_nonctrl -> while .)
    REGEXPR         reduce using rule 37 (statement_nonctrl -> while .)
    GLOBAL          reduce using rule 37 (statement_nonctrl -> while .)
    VAR             reduce using rule 37 (statement_nonctrl -> while .)
    STATIC          reduce using rule 37 (statement_nonctrl -> while .)
    TLTHAN          reduce using rule 37 (statement_nonctrl -> while .)
    LBRACKET        reduce using rule 37 (statement_nonctrl -> while .)
    $end            reduce using rule 37 (statement_nonctrl -> while .)
    RBRACKET        reduce using rule 37 (statement_nonctrl -> while .)
    CASE            reduce using rule 37 (statement_nonctrl -> while .)
    DEFAULT         reduce using rule 37 (statement_nonctrl -> while .)


state 97

    (146) funcref -> FUNCTION . ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (155) exprfunction -> FUNCTION . template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> FUNCTION . template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (142) template_opt -> . template
    (143) template_opt -> .
    (52) template -> . lthan_restrict templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    ID              shift and go to state 220
    LPAREN          reduce using rule 143 (template_opt -> .)
    TLTHAN          shift and go to state 10

    template_opt                   shift and go to state 171
    template                       shift and go to state 173
    lthan_restrict                 shift and go to state 174

state 98

    (40) statement_nonctrl -> break . SEMI

    SEMI            shift and go to state 221


state 99

    (36) statement_nonctrl -> dowhile .

    SEMI            reduce using rule 36 (statement_nonctrl -> dowhile .)
    FUNCTION        reduce using rule 36 (statement_nonctrl -> dowhile .)
    CLASS           reduce using rule 36 (statement_nonctrl -> dowhile .)
    IF              reduce using rule 36 (statement_nonctrl -> dowhile .)
    ELSE            reduce using rule 36 (statement_nonctrl -> dowhile .)
    WHILE           reduce using rule 36 (statement_nonctrl -> dowhile .)
    WITH            reduce using rule 36 (statement_nonctrl -> dowhile .)
    DO              reduce using rule 36 (statement_nonctrl -> dowhile .)
    FOR             reduce using rule 36 (statement_nonctrl -> dowhile .)
    RETURN          reduce using rule 36 (statement_nonctrl -> dowhile .)
    YIELD           reduce using rule 36 (statement_nonctrl -> dowhile .)
    BREAK           reduce using rule 36 (statement_nonctrl -> dowhile .)
    CONTINUE        reduce using rule 36 (statement_nonctrl -> dowhile .)
    THROW           reduce using rule 36 (statement_nonctrl -> dowhile .)
    TRY             reduce using rule 36 (statement_nonctrl -> dowhile .)
    CATCH           reduce using rule 36 (statement_nonctrl -> dowhile .)
    SWITCH          reduce using rule 36 (statement_nonctrl -> dowhile .)
    NATIVE          reduce using rule 36 (statement_nonctrl -> dowhile .)
    NUMBER          reduce using rule 36 (statement_nonctrl -> dowhile .)
    ID              reduce using rule 36 (statement_nonctrl -> dowhile .)
    DELETE          reduce using rule 36 (statement_nonctrl -> dowhile .)
    STRINGLIT       reduce using rule 36 (statement_nonctrl -> dowhile .)
    LSBRACKET       reduce using rule 36 (statement_nonctrl -> dowhile .)
    LPAREN          reduce using rule 36 (statement_nonctrl -> dowhile .)
    MINUS           reduce using rule 36 (statement_nonctrl -> dowhile .)
    NOT             reduce using rule 36 (statement_nonctrl -> dowhile .)
    BITINV          reduce using rule 36 (statement_nonctrl -> dowhile .)
    NEW             reduce using rule 36 (statement_nonctrl -> dowhile .)
    INC             reduce using rule 36 (statement_nonctrl -> dowhile .)
    DEC             reduce using rule 36 (statement_nonctrl -> dowhile .)
    TYPEOF          reduce using rule 36 (statement_nonctrl -> dowhile .)
    REGEXPR         reduce using rule 36 (statement_nonctrl -> dowhile .)
    GLOBAL          reduce using rule 36 (statement_nonctrl -> dowhile .)
    VAR             reduce using rule 36 (statement_nonctrl -> dowhile .)
    STATIC          reduce using rule 36 (statement_nonctrl -> dowhile .)
    TLTHAN          reduce using rule 36 (statement_nonctrl -> dowhile .)
    LBRACKET        reduce using rule 36 (statement_nonctrl -> dowhile .)
    $end            reduce using rule 36 (statement_nonctrl -> dowhile .)
    RBRACKET        reduce using rule 36 (statement_nonctrl -> dowhile .)
    CASE            reduce using rule 36 (statement_nonctrl -> dowhile .)
    DEFAULT         reduce using rule 36 (statement_nonctrl -> dowhile .)


state 100

    (43) statement_nonctrl -> try .

    SEMI            reduce using rule 43 (statement_nonctrl -> try .)
    FUNCTION        reduce using rule 43 (statement_nonctrl -> try .)
    CLASS           reduce using rule 43 (statement_nonctrl -> try .)
    IF              reduce using rule 43 (statement_nonctrl -> try .)
    ELSE            reduce using rule 43 (statement_nonctrl -> try .)
    WHILE           reduce using rule 43 (statement_nonctrl -> try .)
    WITH            reduce using rule 43 (statement_nonctrl -> try .)
    DO              reduce using rule 43 (statement_nonctrl -> try .)
    FOR             reduce using rule 43 (statement_nonctrl -> try .)
    RETURN          reduce using rule 43 (statement_nonctrl -> try .)
    YIELD           reduce using rule 43 (statement_nonctrl -> try .)
    BREAK           reduce using rule 43 (statement_nonctrl -> try .)
    CONTINUE        reduce using rule 43 (statement_nonctrl -> try .)
    THROW           reduce using rule 43 (statement_nonctrl -> try .)
    TRY             reduce using rule 43 (statement_nonctrl -> try .)
    CATCH           reduce using rule 43 (statement_nonctrl -> try .)
    SWITCH          reduce using rule 43 (statement_nonctrl -> try .)
    NATIVE          reduce using rule 43 (statement_nonctrl -> try .)
    NUMBER          reduce using rule 43 (statement_nonctrl -> try .)
    ID              reduce using rule 43 (statement_nonctrl -> try .)
    DELETE          reduce using rule 43 (statement_nonctrl -> try .)
    STRINGLIT       reduce using rule 43 (statement_nonctrl -> try .)
    LSBRACKET       reduce using rule 43 (statement_nonctrl -> try .)
    LPAREN          reduce using rule 43 (statement_nonctrl -> try .)
    MINUS           reduce using rule 43 (statement_nonctrl -> try .)
    NOT             reduce using rule 43 (statement_nonctrl -> try .)
    BITINV          reduce using rule 43 (statement_nonctrl -> try .)
    NEW             reduce using rule 43 (statement_nonctrl -> try .)
    INC             reduce using rule 43 (statement_nonctrl -> try .)
    DEC             reduce using rule 43 (statement_nonctrl -> try .)
    TYPEOF          reduce using rule 43 (statement_nonctrl -> try .)
    REGEXPR         reduce using rule 43 (statement_nonctrl -> try .)
    GLOBAL          reduce using rule 43 (statement_nonctrl -> try .)
    VAR             reduce using rule 43 (statement_nonctrl -> try .)
    STATIC          reduce using rule 43 (statement_nonctrl -> try .)
    TLTHAN          reduce using rule 43 (statement_nonctrl -> try .)
    LBRACKET        reduce using rule 43 (statement_nonctrl -> try .)
    $end            reduce using rule 43 (statement_nonctrl -> try .)
    RBRACKET        reduce using rule 43 (statement_nonctrl -> try .)
    CASE            reduce using rule 43 (statement_nonctrl -> try .)
    DEFAULT         reduce using rule 43 (statement_nonctrl -> try .)


state 101

    (264) try -> TRY LBRACKET . statementlist RBRACKET
    (265) try -> TRY LBRACKET . RBRACKET
    (149) lbracket_restrict -> LBRACKET .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! shift/reduce conflict for RBRACKET resolved as shift
  ! shift/reduce conflict for RBRACKET resolved as shift
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        shift and go to state 223
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! RBRACKET        [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! RBRACKET        [ reduce using rule 5 (statementlist -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 222
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 78

state 102

    (41) statement_nonctrl -> continue . SEMI

    SEMI            shift and go to state 224


state 103

    (34) statement_nonctrl -> else .

    SEMI            reduce using rule 34 (statement_nonctrl -> else .)
    FUNCTION        reduce using rule 34 (statement_nonctrl -> else .)
    CLASS           reduce using rule 34 (statement_nonctrl -> else .)
    IF              reduce using rule 34 (statement_nonctrl -> else .)
    ELSE            reduce using rule 34 (statement_nonctrl -> else .)
    WHILE           reduce using rule 34 (statement_nonctrl -> else .)
    WITH            reduce using rule 34 (statement_nonctrl -> else .)
    DO              reduce using rule 34 (statement_nonctrl -> else .)
    FOR             reduce using rule 34 (statement_nonctrl -> else .)
    RETURN          reduce using rule 34 (statement_nonctrl -> else .)
    YIELD           reduce using rule 34 (statement_nonctrl -> else .)
    BREAK           reduce using rule 34 (statement_nonctrl -> else .)
    CONTINUE        reduce using rule 34 (statement_nonctrl -> else .)
    THROW           reduce using rule 34 (statement_nonctrl -> else .)
    TRY             reduce using rule 34 (statement_nonctrl -> else .)
    CATCH           reduce using rule 34 (statement_nonctrl -> else .)
    SWITCH          reduce using rule 34 (statement_nonctrl -> else .)
    NATIVE          reduce using rule 34 (statement_nonctrl -> else .)
    NUMBER          reduce using rule 34 (statement_nonctrl -> else .)
    ID              reduce using rule 34 (statement_nonctrl -> else .)
    DELETE          reduce using rule 34 (statement_nonctrl -> else .)
    STRINGLIT       reduce using rule 34 (statement_nonctrl -> else .)
    LSBRACKET       reduce using rule 34 (statement_nonctrl -> else .)
    LPAREN          reduce using rule 34 (statement_nonctrl -> else .)
    MINUS           reduce using rule 34 (statement_nonctrl -> else .)
    NOT             reduce using rule 34 (statement_nonctrl -> else .)
    BITINV          reduce using rule 34 (statement_nonctrl -> else .)
    NEW             reduce using rule 34 (statement_nonctrl -> else .)
    INC             reduce using rule 34 (statement_nonctrl -> else .)
    DEC             reduce using rule 34 (statement_nonctrl -> else .)
    TYPEOF          reduce using rule 34 (statement_nonctrl -> else .)
    REGEXPR         reduce using rule 34 (statement_nonctrl -> else .)
    GLOBAL          reduce using rule 34 (statement_nonctrl -> else .)
    VAR             reduce using rule 34 (statement_nonctrl -> else .)
    STATIC          reduce using rule 34 (statement_nonctrl -> else .)
    TLTHAN          reduce using rule 34 (statement_nonctrl -> else .)
    LBRACKET        reduce using rule 34 (statement_nonctrl -> else .)
    $end            reduce using rule 34 (statement_nonctrl -> else .)
    RBRACKET        reduce using rule 34 (statement_nonctrl -> else .)
    CASE            reduce using rule 34 (statement_nonctrl -> else .)
    DEFAULT         reduce using rule 34 (statement_nonctrl -> else .)


state 104

    (263) try -> TRY statement_nonctrl .

    SEMI            reduce using rule 263 (try -> TRY statement_nonctrl .)
    FUNCTION        reduce using rule 263 (try -> TRY statement_nonctrl .)
    CLASS           reduce using rule 263 (try -> TRY statement_nonctrl .)
    IF              reduce using rule 263 (try -> TRY statement_nonctrl .)
    ELSE            reduce using rule 263 (try -> TRY statement_nonctrl .)
    WHILE           reduce using rule 263 (try -> TRY statement_nonctrl .)
    WITH            reduce using rule 263 (try -> TRY statement_nonctrl .)
    DO              reduce using rule 263 (try -> TRY statement_nonctrl .)
    FOR             reduce using rule 263 (try -> TRY statement_nonctrl .)
    RETURN          reduce using rule 263 (try -> TRY statement_nonctrl .)
    YIELD           reduce using rule 263 (try -> TRY statement_nonctrl .)
    BREAK           reduce using rule 263 (try -> TRY statement_nonctrl .)
    CONTINUE        reduce using rule 263 (try -> TRY statement_nonctrl .)
    THROW           reduce using rule 263 (try -> TRY statement_nonctrl .)
    TRY             reduce using rule 263 (try -> TRY statement_nonctrl .)
    CATCH           reduce using rule 263 (try -> TRY statement_nonctrl .)
    SWITCH          reduce using rule 263 (try -> TRY statement_nonctrl .)
    NATIVE          reduce using rule 263 (try -> TRY statement_nonctrl .)
    NUMBER          reduce using rule 263 (try -> TRY statement_nonctrl .)
    ID              reduce using rule 263 (try -> TRY statement_nonctrl .)
    DELETE          reduce using rule 263 (try -> TRY statement_nonctrl .)
    STRINGLIT       reduce using rule 263 (try -> TRY statement_nonctrl .)
    LSBRACKET       reduce using rule 263 (try -> TRY statement_nonctrl .)
    LPAREN          reduce using rule 263 (try -> TRY statement_nonctrl .)
    MINUS           reduce using rule 263 (try -> TRY statement_nonctrl .)
    NOT             reduce using rule 263 (try -> TRY statement_nonctrl .)
    BITINV          reduce using rule 263 (try -> TRY statement_nonctrl .)
    NEW             reduce using rule 263 (try -> TRY statement_nonctrl .)
    INC             reduce using rule 263 (try -> TRY statement_nonctrl .)
    DEC             reduce using rule 263 (try -> TRY statement_nonctrl .)
    TYPEOF          reduce using rule 263 (try -> TRY statement_nonctrl .)
    REGEXPR         reduce using rule 263 (try -> TRY statement_nonctrl .)
    GLOBAL          reduce using rule 263 (try -> TRY statement_nonctrl .)
    VAR             reduce using rule 263 (try -> TRY statement_nonctrl .)
    STATIC          reduce using rule 263 (try -> TRY statement_nonctrl .)
    TLTHAN          reduce using rule 263 (try -> TRY statement_nonctrl .)
    LBRACKET        reduce using rule 263 (try -> TRY statement_nonctrl .)
    RBRACKET        reduce using rule 263 (try -> TRY statement_nonctrl .)
    CASE            reduce using rule 263 (try -> TRY statement_nonctrl .)
    $end            reduce using rule 263 (try -> TRY statement_nonctrl .)
    DEFAULT         reduce using rule 263 (try -> TRY statement_nonctrl .)


state 105

    (200) expr -> expr BXOR . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 225
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 106

    (192) expr -> expr LSHIFT . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 226
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 107

    (107) cmplx_assign -> ASSIGN .

    NUMBER          reduce using rule 107 (cmplx_assign -> ASSIGN .)
    ID              reduce using rule 107 (cmplx_assign -> ASSIGN .)
    STRINGLIT       reduce using rule 107 (cmplx_assign -> ASSIGN .)
    LSBRACKET       reduce using rule 107 (cmplx_assign -> ASSIGN .)
    FUNCTION        reduce using rule 107 (cmplx_assign -> ASSIGN .)
    LPAREN          reduce using rule 107 (cmplx_assign -> ASSIGN .)
    MINUS           reduce using rule 107 (cmplx_assign -> ASSIGN .)
    NOT             reduce using rule 107 (cmplx_assign -> ASSIGN .)
    BITINV          reduce using rule 107 (cmplx_assign -> ASSIGN .)
    NEW             reduce using rule 107 (cmplx_assign -> ASSIGN .)
    INC             reduce using rule 107 (cmplx_assign -> ASSIGN .)
    DEC             reduce using rule 107 (cmplx_assign -> ASSIGN .)
    TYPEOF          reduce using rule 107 (cmplx_assign -> ASSIGN .)
    REGEXPR         reduce using rule 107 (cmplx_assign -> ASSIGN .)
    TLTHAN          reduce using rule 107 (cmplx_assign -> ASSIGN .)
    LBRACKET        reduce using rule 107 (cmplx_assign -> ASSIGN .)


state 108

    (29) statement_nonctrl -> expr SEMI .

    SEMI            reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    FUNCTION        reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    CLASS           reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    IF              reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    ELSE            reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    WHILE           reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    WITH            reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    DO              reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    FOR             reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    RETURN          reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    YIELD           reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    BREAK           reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    CONTINUE        reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    THROW           reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    TRY             reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    CATCH           reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    SWITCH          reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    NATIVE          reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    NUMBER          reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    ID              reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    DELETE          reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    STRINGLIT       reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    LSBRACKET       reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    LPAREN          reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    MINUS           reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    NOT             reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    BITINV          reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    NEW             reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    INC             reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    DEC             reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    TYPEOF          reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    REGEXPR         reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    GLOBAL          reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    VAR             reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    STATIC          reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    TLTHAN          reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    LBRACKET        reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    RBRACKET        reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    $end            reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    CASE            reduce using rule 29 (statement_nonctrl -> expr SEMI .)
    DEFAULT         reduce using rule 29 (statement_nonctrl -> expr SEMI .)


state 109

    (215) expr -> expr IN . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 227
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 110

    (135) template_ref_opt -> template_ref .

    LPAREN          reduce using rule 135 (template_ref_opt -> template_ref .)


state 111

    (179) lsbracket_restrict -> LSBRACKET .

    NUMBER          reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    ID              reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    STRINGLIT       reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    LSBRACKET       reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    FUNCTION        reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    LPAREN          reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    MINUS           reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    NOT             reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    BITINV          reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    NEW             reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    INC             reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    DEC             reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    TYPEOF          reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    REGEXPR         reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    TLTHAN          reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)
    LBRACKET        reduce using rule 179 (lsbracket_restrict -> LSBRACKET .)


state 112

    (218) expr -> expr lsbracket_restrict . expr rsbracket_restrict
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 228
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 113

    (214) expr -> expr TIMES . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 229
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 114

    (106) cmplx_assign -> ASSIGNLLSHIFT .

    NUMBER          reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    ID              reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    STRINGLIT       reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    LSBRACKET       reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    FUNCTION        reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    LPAREN          reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    MINUS           reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    NOT             reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    BITINV          reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    NEW             reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    INC             reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    DEC             reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    TYPEOF          reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    REGEXPR         reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    TLTHAN          reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)
    LBRACKET        reduce using rule 106 (cmplx_assign -> ASSIGNLLSHIFT .)


state 115

    (104) cmplx_assign -> ASSIGNRSHIFT .

    NUMBER          reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    ID              reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    STRINGLIT       reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    LSBRACKET       reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    FUNCTION        reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    LPAREN          reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    MINUS           reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    NOT             reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    BITINV          reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    NEW             reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    INC             reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    DEC             reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    TYPEOF          reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    REGEXPR         reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    TLTHAN          reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)
    LBRACKET        reduce using rule 104 (cmplx_assign -> ASSIGNRSHIFT .)


state 116

    (99) cmplx_assign -> ASSIGNTIMES .

    NUMBER          reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    ID              reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    STRINGLIT       reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    LSBRACKET       reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    FUNCTION        reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    LPAREN          reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    MINUS           reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    NOT             reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    BITINV          reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    NEW             reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    INC             reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    DEC             reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    TYPEOF          reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    REGEXPR         reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    TLTHAN          reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)
    LBRACKET        reduce using rule 99 (cmplx_assign -> ASSIGNTIMES .)


state 117

    (195) expr -> expr DOT . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 230
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 118

    (170) inc -> expr INC .

    RSHIFT          reduce using rule 170 (inc -> expr INC .)
    LSHIFT          reduce using rule 170 (inc -> expr INC .)
    LLSHIFT         reduce using rule 170 (inc -> expr INC .)
    RRSHIFT         reduce using rule 170 (inc -> expr INC .)
    DOT             reduce using rule 170 (inc -> expr INC .)
    LAND            reduce using rule 170 (inc -> expr INC .)
    LOR             reduce using rule 170 (inc -> expr INC .)
    BOR             reduce using rule 170 (inc -> expr INC .)
    INSTANCEOF      reduce using rule 170 (inc -> expr INC .)
    BXOR            reduce using rule 170 (inc -> expr INC .)
    BAND            reduce using rule 170 (inc -> expr INC .)
    EQUAL           reduce using rule 170 (inc -> expr INC .)
    EQUAL_STRICT    reduce using rule 170 (inc -> expr INC .)
    NOTEQUAL_STRICT reduce using rule 170 (inc -> expr INC .)
    GTHAN           reduce using rule 170 (inc -> expr INC .)
    GTHANEQ         reduce using rule 170 (inc -> expr INC .)
    LTHAN           reduce using rule 170 (inc -> expr INC .)
    MOD             reduce using rule 170 (inc -> expr INC .)
    LTHANEQ         reduce using rule 170 (inc -> expr INC .)
    NOTEQUAL        reduce using rule 170 (inc -> expr INC .)
    PLUS            reduce using rule 170 (inc -> expr INC .)
    MINUS           reduce using rule 170 (inc -> expr INC .)
    DIVIDE          reduce using rule 170 (inc -> expr INC .)
    TIMES           reduce using rule 170 (inc -> expr INC .)
    IN              reduce using rule 170 (inc -> expr INC .)
    QEST            reduce using rule 170 (inc -> expr INC .)
    COMMA           reduce using rule 170 (inc -> expr INC .)
    INC             reduce using rule 170 (inc -> expr INC .)
    DEC             reduce using rule 170 (inc -> expr INC .)
    ASSIGNPLUS      reduce using rule 170 (inc -> expr INC .)
    ASSIGNMINUS     reduce using rule 170 (inc -> expr INC .)
    ASSIGNDIVIDE    reduce using rule 170 (inc -> expr INC .)
    ASSIGNTIMES     reduce using rule 170 (inc -> expr INC .)
    ASSIGNBOR       reduce using rule 170 (inc -> expr INC .)
    ASSIGNBAND      reduce using rule 170 (inc -> expr INC .)
    ASSIGNBXOR      reduce using rule 170 (inc -> expr INC .)
    ASSIGNLSHIFT    reduce using rule 170 (inc -> expr INC .)
    ASSIGNRSHIFT    reduce using rule 170 (inc -> expr INC .)
    ASSIGNRRSHIFT   reduce using rule 170 (inc -> expr INC .)
    ASSIGNLLSHIFT   reduce using rule 170 (inc -> expr INC .)
    ASSIGN          reduce using rule 170 (inc -> expr INC .)
    LSBRACKET       reduce using rule 170 (inc -> expr INC .)
    TLTHAN          reduce using rule 170 (inc -> expr INC .)
    LPAREN          reduce using rule 170 (inc -> expr INC .)
    SEMI            reduce using rule 170 (inc -> expr INC .)
    RPAREN          reduce using rule 170 (inc -> expr INC .)
    RSBRACKET       reduce using rule 170 (inc -> expr INC .)
    COLON           reduce using rule 170 (inc -> expr INC .)
    RBRACKET        reduce using rule 170 (inc -> expr INC .)


state 119

    (198) expr -> expr BOR . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 231
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 120

    (209) expr -> expr LTHANEQ . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 232
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 121

    (210) expr -> expr NOTEQUAL . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 233
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 122

    (204) expr -> expr NOTEQUAL_STRICT . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 234
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 123

    (208) expr -> expr MOD . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 235
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 124

    (197) expr -> expr LOR . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 236
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 125

    (137) func_call -> template_ref_opt . LPAREN exprlist RPAREN
    (138) func_call -> template_ref_opt . LPAREN RPAREN

    LPAREN          shift and go to state 237


state 126

    (97) cmplx_assign -> ASSIGNMINUS .

    NUMBER          reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    ID              reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    STRINGLIT       reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    LSBRACKET       reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    FUNCTION        reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    LPAREN          reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    MINUS           reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    NOT             reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    BITINV          reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    NEW             reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    INC             reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    DEC             reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    TYPEOF          reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    REGEXPR         reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    TLTHAN          reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)
    LBRACKET        reduce using rule 97 (cmplx_assign -> ASSIGNMINUS .)


state 127

    (205) expr -> expr GTHAN . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 238
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 128

    (96) cmplx_assign -> ASSIGNPLUS .

    NUMBER          reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    ID              reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    STRINGLIT       reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    LSBRACKET       reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    FUNCTION        reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    LPAREN          reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    MINUS           reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    NOT             reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    BITINV          reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    NEW             reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    INC             reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    DEC             reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    TYPEOF          reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    REGEXPR         reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    TLTHAN          reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)
    LBRACKET        reduce using rule 96 (cmplx_assign -> ASSIGNPLUS .)


state 129

    (219) expr -> expr QEST . expr COLON expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 239
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 130

    (203) expr -> expr EQUAL_STRICT . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 240
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 131

    (201) expr -> expr BAND . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 241
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 132

    (212) expr -> expr MINUS . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 242
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 133

    (193) expr -> expr LLSHIFT . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 243
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 134

    (217) expr -> expr func_call .

    SEMI            reduce using rule 217 (expr -> expr func_call .)
    RSHIFT          reduce using rule 217 (expr -> expr func_call .)
    LSHIFT          reduce using rule 217 (expr -> expr func_call .)
    LLSHIFT         reduce using rule 217 (expr -> expr func_call .)
    RRSHIFT         reduce using rule 217 (expr -> expr func_call .)
    DOT             reduce using rule 217 (expr -> expr func_call .)
    LAND            reduce using rule 217 (expr -> expr func_call .)
    LOR             reduce using rule 217 (expr -> expr func_call .)
    BOR             reduce using rule 217 (expr -> expr func_call .)
    INSTANCEOF      reduce using rule 217 (expr -> expr func_call .)
    BXOR            reduce using rule 217 (expr -> expr func_call .)
    BAND            reduce using rule 217 (expr -> expr func_call .)
    EQUAL           reduce using rule 217 (expr -> expr func_call .)
    EQUAL_STRICT    reduce using rule 217 (expr -> expr func_call .)
    NOTEQUAL_STRICT reduce using rule 217 (expr -> expr func_call .)
    GTHAN           reduce using rule 217 (expr -> expr func_call .)
    GTHANEQ         reduce using rule 217 (expr -> expr func_call .)
    LTHAN           reduce using rule 217 (expr -> expr func_call .)
    MOD             reduce using rule 217 (expr -> expr func_call .)
    LTHANEQ         reduce using rule 217 (expr -> expr func_call .)
    NOTEQUAL        reduce using rule 217 (expr -> expr func_call .)
    PLUS            reduce using rule 217 (expr -> expr func_call .)
    MINUS           reduce using rule 217 (expr -> expr func_call .)
    DIVIDE          reduce using rule 217 (expr -> expr func_call .)
    TIMES           reduce using rule 217 (expr -> expr func_call .)
    IN              reduce using rule 217 (expr -> expr func_call .)
    QEST            reduce using rule 217 (expr -> expr func_call .)
    COMMA           reduce using rule 217 (expr -> expr func_call .)
    INC             reduce using rule 217 (expr -> expr func_call .)
    DEC             reduce using rule 217 (expr -> expr func_call .)
    ASSIGNPLUS      reduce using rule 217 (expr -> expr func_call .)
    ASSIGNMINUS     reduce using rule 217 (expr -> expr func_call .)
    ASSIGNDIVIDE    reduce using rule 217 (expr -> expr func_call .)
    ASSIGNTIMES     reduce using rule 217 (expr -> expr func_call .)
    ASSIGNBOR       reduce using rule 217 (expr -> expr func_call .)
    ASSIGNBAND      reduce using rule 217 (expr -> expr func_call .)
    ASSIGNBXOR      reduce using rule 217 (expr -> expr func_call .)
    ASSIGNLSHIFT    reduce using rule 217 (expr -> expr func_call .)
    ASSIGNRSHIFT    reduce using rule 217 (expr -> expr func_call .)
    ASSIGNRRSHIFT   reduce using rule 217 (expr -> expr func_call .)
    ASSIGNLLSHIFT   reduce using rule 217 (expr -> expr func_call .)
    ASSIGN          reduce using rule 217 (expr -> expr func_call .)
    LSBRACKET       reduce using rule 217 (expr -> expr func_call .)
    TLTHAN          reduce using rule 217 (expr -> expr func_call .)
    LPAREN          reduce using rule 217 (expr -> expr func_call .)
    RPAREN          reduce using rule 217 (expr -> expr func_call .)
    RSBRACKET       reduce using rule 217 (expr -> expr func_call .)
    COLON           reduce using rule 217 (expr -> expr func_call .)
    RBRACKET        reduce using rule 217 (expr -> expr func_call .)


state 135

    (213) expr -> expr DIVIDE . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 244
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 136

    (206) expr -> expr GTHANEQ . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 245
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 137

    (100) cmplx_assign -> ASSIGNBOR .

    NUMBER          reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    ID              reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    STRINGLIT       reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    LSBRACKET       reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    FUNCTION        reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    LPAREN          reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    MINUS           reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    NOT             reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    BITINV          reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    NEW             reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    INC             reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    DEC             reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    TYPEOF          reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    REGEXPR         reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    TLTHAN          reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)
    LBRACKET        reduce using rule 100 (cmplx_assign -> ASSIGNBOR .)


state 138

    (105) cmplx_assign -> ASSIGNRRSHIFT .

    NUMBER          reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    ID              reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    STRINGLIT       reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    LSBRACKET       reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    FUNCTION        reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    LPAREN          reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    MINUS           reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    NOT             reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    BITINV          reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    NEW             reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    INC             reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    DEC             reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    TYPEOF          reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    REGEXPR         reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    TLTHAN          reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)
    LBRACKET        reduce using rule 105 (cmplx_assign -> ASSIGNRRSHIFT .)


state 139

    (202) expr -> expr EQUAL . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 246
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 140

    (103) cmplx_assign -> ASSIGNLSHIFT .

    NUMBER          reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    ID              reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    STRINGLIT       reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    LSBRACKET       reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    FUNCTION        reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    LPAREN          reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    MINUS           reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    NOT             reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    BITINV          reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    NEW             reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    INC             reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    DEC             reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    TYPEOF          reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    REGEXPR         reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    TLTHAN          reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)
    LBRACKET        reduce using rule 103 (cmplx_assign -> ASSIGNLSHIFT .)


state 141

    (194) expr -> expr RRSHIFT . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 247
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 142

    (101) cmplx_assign -> ASSIGNBAND .

    NUMBER          reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    ID              reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    STRINGLIT       reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    LSBRACKET       reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    FUNCTION        reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    LPAREN          reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    MINUS           reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    NOT             reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    BITINV          reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    NEW             reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    INC             reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    DEC             reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    TYPEOF          reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    REGEXPR         reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    TLTHAN          reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)
    LBRACKET        reduce using rule 101 (cmplx_assign -> ASSIGNBAND .)


state 143

    (207) expr -> expr LTHAN . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 248
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 144

    (102) cmplx_assign -> ASSIGNBXOR .

    NUMBER          reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    ID              reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    STRINGLIT       reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    LSBRACKET       reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    FUNCTION        reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    LPAREN          reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    MINUS           reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    NOT             reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    BITINV          reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    NEW             reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    INC             reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    DEC             reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    TYPEOF          reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    REGEXPR         reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    TLTHAN          reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)
    LBRACKET        reduce using rule 102 (cmplx_assign -> ASSIGNBXOR .)


state 145

    (196) expr -> expr LAND . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 249
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 146

    (98) cmplx_assign -> ASSIGNDIVIDE .

    NUMBER          reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    ID              reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    STRINGLIT       reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    LSBRACKET       reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    FUNCTION        reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    LPAREN          reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    MINUS           reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    NOT             reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    BITINV          reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    NEW             reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    INC             reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    DEC             reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    TYPEOF          reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    REGEXPR         reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    TLTHAN          reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)
    LBRACKET        reduce using rule 98 (cmplx_assign -> ASSIGNDIVIDE .)


state 147

    (228) expr -> expr COMMA . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 250
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 148

    (191) expr -> expr RSHIFT . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 251
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 149

    (172) dec -> expr DEC .

    RSHIFT          reduce using rule 172 (dec -> expr DEC .)
    LSHIFT          reduce using rule 172 (dec -> expr DEC .)
    LLSHIFT         reduce using rule 172 (dec -> expr DEC .)
    RRSHIFT         reduce using rule 172 (dec -> expr DEC .)
    DOT             reduce using rule 172 (dec -> expr DEC .)
    LAND            reduce using rule 172 (dec -> expr DEC .)
    LOR             reduce using rule 172 (dec -> expr DEC .)
    BOR             reduce using rule 172 (dec -> expr DEC .)
    INSTANCEOF      reduce using rule 172 (dec -> expr DEC .)
    BXOR            reduce using rule 172 (dec -> expr DEC .)
    BAND            reduce using rule 172 (dec -> expr DEC .)
    EQUAL           reduce using rule 172 (dec -> expr DEC .)
    EQUAL_STRICT    reduce using rule 172 (dec -> expr DEC .)
    NOTEQUAL_STRICT reduce using rule 172 (dec -> expr DEC .)
    GTHAN           reduce using rule 172 (dec -> expr DEC .)
    GTHANEQ         reduce using rule 172 (dec -> expr DEC .)
    LTHAN           reduce using rule 172 (dec -> expr DEC .)
    MOD             reduce using rule 172 (dec -> expr DEC .)
    LTHANEQ         reduce using rule 172 (dec -> expr DEC .)
    NOTEQUAL        reduce using rule 172 (dec -> expr DEC .)
    PLUS            reduce using rule 172 (dec -> expr DEC .)
    MINUS           reduce using rule 172 (dec -> expr DEC .)
    DIVIDE          reduce using rule 172 (dec -> expr DEC .)
    TIMES           reduce using rule 172 (dec -> expr DEC .)
    IN              reduce using rule 172 (dec -> expr DEC .)
    QEST            reduce using rule 172 (dec -> expr DEC .)
    COMMA           reduce using rule 172 (dec -> expr DEC .)
    INC             reduce using rule 172 (dec -> expr DEC .)
    DEC             reduce using rule 172 (dec -> expr DEC .)
    ASSIGNPLUS      reduce using rule 172 (dec -> expr DEC .)
    ASSIGNMINUS     reduce using rule 172 (dec -> expr DEC .)
    ASSIGNDIVIDE    reduce using rule 172 (dec -> expr DEC .)
    ASSIGNTIMES     reduce using rule 172 (dec -> expr DEC .)
    ASSIGNBOR       reduce using rule 172 (dec -> expr DEC .)
    ASSIGNBAND      reduce using rule 172 (dec -> expr DEC .)
    ASSIGNBXOR      reduce using rule 172 (dec -> expr DEC .)
    ASSIGNLSHIFT    reduce using rule 172 (dec -> expr DEC .)
    ASSIGNRSHIFT    reduce using rule 172 (dec -> expr DEC .)
    ASSIGNRRSHIFT   reduce using rule 172 (dec -> expr DEC .)
    ASSIGNLLSHIFT   reduce using rule 172 (dec -> expr DEC .)
    ASSIGN          reduce using rule 172 (dec -> expr DEC .)
    LSBRACKET       reduce using rule 172 (dec -> expr DEC .)
    TLTHAN          reduce using rule 172 (dec -> expr DEC .)
    LPAREN          reduce using rule 172 (dec -> expr DEC .)
    SEMI            reduce using rule 172 (dec -> expr DEC .)
    COLON           reduce using rule 172 (dec -> expr DEC .)
    RPAREN          reduce using rule 172 (dec -> expr DEC .)
    RSBRACKET       reduce using rule 172 (dec -> expr DEC .)
    RBRACKET        reduce using rule 172 (dec -> expr DEC .)


state 150

    (199) expr -> expr INSTANCEOF . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 252
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 151

    (189) expr -> expr cmplx_assign . expr
    (190) expr -> expr cmplx_assign . expr COLON var_type SEMI
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 253
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 152

    (211) expr -> expr PLUS . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 254
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 153

    (20) statement -> return SEMI .
    (38) statement_nonctrl -> return SEMI .

  ! reduce/reduce conflict for SEMI resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for CLASS resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for STATIC resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 20 (statement -> return SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 20 (statement -> return SEMI .)
    SEMI            reduce using rule 20 (statement -> return SEMI .)
    FUNCTION        reduce using rule 20 (statement -> return SEMI .)
    CLASS           reduce using rule 20 (statement -> return SEMI .)
    IF              reduce using rule 20 (statement -> return SEMI .)
    ELSE            reduce using rule 20 (statement -> return SEMI .)
    WHILE           reduce using rule 20 (statement -> return SEMI .)
    WITH            reduce using rule 20 (statement -> return SEMI .)
    DO              reduce using rule 20 (statement -> return SEMI .)
    FOR             reduce using rule 20 (statement -> return SEMI .)
    RETURN          reduce using rule 20 (statement -> return SEMI .)
    YIELD           reduce using rule 20 (statement -> return SEMI .)
    BREAK           reduce using rule 20 (statement -> return SEMI .)
    CONTINUE        reduce using rule 20 (statement -> return SEMI .)
    THROW           reduce using rule 20 (statement -> return SEMI .)
    TRY             reduce using rule 20 (statement -> return SEMI .)
    CATCH           reduce using rule 20 (statement -> return SEMI .)
    SWITCH          reduce using rule 20 (statement -> return SEMI .)
    NATIVE          reduce using rule 20 (statement -> return SEMI .)
    NUMBER          reduce using rule 20 (statement -> return SEMI .)
    ID              reduce using rule 20 (statement -> return SEMI .)
    DELETE          reduce using rule 20 (statement -> return SEMI .)
    STRINGLIT       reduce using rule 20 (statement -> return SEMI .)
    LSBRACKET       reduce using rule 20 (statement -> return SEMI .)
    LPAREN          reduce using rule 20 (statement -> return SEMI .)
    MINUS           reduce using rule 20 (statement -> return SEMI .)
    NOT             reduce using rule 20 (statement -> return SEMI .)
    BITINV          reduce using rule 20 (statement -> return SEMI .)
    NEW             reduce using rule 20 (statement -> return SEMI .)
    INC             reduce using rule 20 (statement -> return SEMI .)
    DEC             reduce using rule 20 (statement -> return SEMI .)
    TYPEOF          reduce using rule 20 (statement -> return SEMI .)
    REGEXPR         reduce using rule 20 (statement -> return SEMI .)
    GLOBAL          reduce using rule 20 (statement -> return SEMI .)
    VAR             reduce using rule 20 (statement -> return SEMI .)
    STATIC          reduce using rule 20 (statement -> return SEMI .)
    TLTHAN          reduce using rule 20 (statement -> return SEMI .)
    LBRACKET        reduce using rule 20 (statement -> return SEMI .)
    RBRACKET        reduce using rule 20 (statement -> return SEMI .)
    $end            reduce using rule 20 (statement -> return SEMI .)
    CASE            reduce using rule 20 (statement -> return SEMI .)
    DEFAULT         reduce using rule 20 (statement -> return SEMI .)

  ! SEMI            [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! FUNCTION        [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! CLASS           [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! IF              [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! ELSE            [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! WHILE           [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! WITH            [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! DO              [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! FOR             [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! RETURN          [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! YIELD           [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! BREAK           [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! CONTINUE        [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! THROW           [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! TRY             [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! CATCH           [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! SWITCH          [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! NATIVE          [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! NUMBER          [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! ID              [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! DELETE          [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! STRINGLIT       [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! LSBRACKET       [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! LPAREN          [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! MINUS           [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! NOT             [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! BITINV          [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! NEW             [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! INC             [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! DEC             [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! TYPEOF          [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! REGEXPR         [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! GLOBAL          [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! VAR             [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! STATIC          [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! TLTHAN          [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! LBRACKET        [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! RBRACKET        [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! CASE            [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! DEFAULT         [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]
  ! $end            [ reduce using rule 38 (statement_nonctrl -> return SEMI .) ]


state 154

    (24) statement -> throw SEMI .
    (42) statement_nonctrl -> throw SEMI .

  ! reduce/reduce conflict for SEMI resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for CLASS resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for STATIC resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 24 (statement -> throw SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 24 (statement -> throw SEMI .)
    SEMI            reduce using rule 24 (statement -> throw SEMI .)
    FUNCTION        reduce using rule 24 (statement -> throw SEMI .)
    CLASS           reduce using rule 24 (statement -> throw SEMI .)
    IF              reduce using rule 24 (statement -> throw SEMI .)
    ELSE            reduce using rule 24 (statement -> throw SEMI .)
    WHILE           reduce using rule 24 (statement -> throw SEMI .)
    WITH            reduce using rule 24 (statement -> throw SEMI .)
    DO              reduce using rule 24 (statement -> throw SEMI .)
    FOR             reduce using rule 24 (statement -> throw SEMI .)
    RETURN          reduce using rule 24 (statement -> throw SEMI .)
    YIELD           reduce using rule 24 (statement -> throw SEMI .)
    BREAK           reduce using rule 24 (statement -> throw SEMI .)
    CONTINUE        reduce using rule 24 (statement -> throw SEMI .)
    THROW           reduce using rule 24 (statement -> throw SEMI .)
    TRY             reduce using rule 24 (statement -> throw SEMI .)
    CATCH           reduce using rule 24 (statement -> throw SEMI .)
    SWITCH          reduce using rule 24 (statement -> throw SEMI .)
    NATIVE          reduce using rule 24 (statement -> throw SEMI .)
    NUMBER          reduce using rule 24 (statement -> throw SEMI .)
    ID              reduce using rule 24 (statement -> throw SEMI .)
    DELETE          reduce using rule 24 (statement -> throw SEMI .)
    STRINGLIT       reduce using rule 24 (statement -> throw SEMI .)
    LSBRACKET       reduce using rule 24 (statement -> throw SEMI .)
    LPAREN          reduce using rule 24 (statement -> throw SEMI .)
    MINUS           reduce using rule 24 (statement -> throw SEMI .)
    NOT             reduce using rule 24 (statement -> throw SEMI .)
    BITINV          reduce using rule 24 (statement -> throw SEMI .)
    NEW             reduce using rule 24 (statement -> throw SEMI .)
    INC             reduce using rule 24 (statement -> throw SEMI .)
    DEC             reduce using rule 24 (statement -> throw SEMI .)
    TYPEOF          reduce using rule 24 (statement -> throw SEMI .)
    REGEXPR         reduce using rule 24 (statement -> throw SEMI .)
    GLOBAL          reduce using rule 24 (statement -> throw SEMI .)
    VAR             reduce using rule 24 (statement -> throw SEMI .)
    STATIC          reduce using rule 24 (statement -> throw SEMI .)
    TLTHAN          reduce using rule 24 (statement -> throw SEMI .)
    LBRACKET        reduce using rule 24 (statement -> throw SEMI .)
    RBRACKET        reduce using rule 24 (statement -> throw SEMI .)
    $end            reduce using rule 24 (statement -> throw SEMI .)
    CASE            reduce using rule 24 (statement -> throw SEMI .)
    DEFAULT         reduce using rule 24 (statement -> throw SEMI .)

  ! SEMI            [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! FUNCTION        [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! CLASS           [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! IF              [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! ELSE            [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! WHILE           [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! WITH            [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! DO              [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! FOR             [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! RETURN          [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! YIELD           [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! BREAK           [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! CONTINUE        [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! THROW           [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! TRY             [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! CATCH           [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! SWITCH          [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! NATIVE          [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! NUMBER          [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! ID              [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! DELETE          [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! STRINGLIT       [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! LSBRACKET       [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! LPAREN          [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! MINUS           [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! NOT             [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! BITINV          [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! NEW             [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! INC             [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! DEC             [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! TYPEOF          [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! REGEXPR         [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! GLOBAL          [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! VAR             [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! STATIC          [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! TLTHAN          [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! LBRACKET        [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! RBRACKET        [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! CASE            [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! DEFAULT         [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]
  ! $end            [ reduce using rule 42 (statement_nonctrl -> throw SEMI .) ]


state 155

    (168) delete -> DELETE expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 168 (delete -> DELETE expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 156

    (229) expr_uminus -> MINUS expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 229 (expr_uminus -> MINUS expr .)
    RSHIFT          reduce using rule 229 (expr_uminus -> MINUS expr .)
    LSHIFT          reduce using rule 229 (expr_uminus -> MINUS expr .)
    LLSHIFT         reduce using rule 229 (expr_uminus -> MINUS expr .)
    RRSHIFT         reduce using rule 229 (expr_uminus -> MINUS expr .)
    LAND            reduce using rule 229 (expr_uminus -> MINUS expr .)
    LOR             reduce using rule 229 (expr_uminus -> MINUS expr .)
    BOR             reduce using rule 229 (expr_uminus -> MINUS expr .)
    INSTANCEOF      reduce using rule 229 (expr_uminus -> MINUS expr .)
    BXOR            reduce using rule 229 (expr_uminus -> MINUS expr .)
    BAND            reduce using rule 229 (expr_uminus -> MINUS expr .)
    EQUAL           reduce using rule 229 (expr_uminus -> MINUS expr .)
    EQUAL_STRICT    reduce using rule 229 (expr_uminus -> MINUS expr .)
    NOTEQUAL_STRICT reduce using rule 229 (expr_uminus -> MINUS expr .)
    GTHAN           reduce using rule 229 (expr_uminus -> MINUS expr .)
    GTHANEQ         reduce using rule 229 (expr_uminus -> MINUS expr .)
    LTHAN           reduce using rule 229 (expr_uminus -> MINUS expr .)
    MOD             reduce using rule 229 (expr_uminus -> MINUS expr .)
    LTHANEQ         reduce using rule 229 (expr_uminus -> MINUS expr .)
    NOTEQUAL        reduce using rule 229 (expr_uminus -> MINUS expr .)
    PLUS            reduce using rule 229 (expr_uminus -> MINUS expr .)
    MINUS           reduce using rule 229 (expr_uminus -> MINUS expr .)
    DIVIDE          reduce using rule 229 (expr_uminus -> MINUS expr .)
    TIMES           reduce using rule 229 (expr_uminus -> MINUS expr .)
    IN              reduce using rule 229 (expr_uminus -> MINUS expr .)
    QEST            reduce using rule 229 (expr_uminus -> MINUS expr .)
    COMMA           reduce using rule 229 (expr_uminus -> MINUS expr .)
    ASSIGNPLUS      reduce using rule 229 (expr_uminus -> MINUS expr .)
    ASSIGNMINUS     reduce using rule 229 (expr_uminus -> MINUS expr .)
    ASSIGNDIVIDE    reduce using rule 229 (expr_uminus -> MINUS expr .)
    ASSIGNTIMES     reduce using rule 229 (expr_uminus -> MINUS expr .)
    ASSIGNBOR       reduce using rule 229 (expr_uminus -> MINUS expr .)
    ASSIGNBAND      reduce using rule 229 (expr_uminus -> MINUS expr .)
    ASSIGNBXOR      reduce using rule 229 (expr_uminus -> MINUS expr .)
    ASSIGNLSHIFT    reduce using rule 229 (expr_uminus -> MINUS expr .)
    ASSIGNRSHIFT    reduce using rule 229 (expr_uminus -> MINUS expr .)
    ASSIGNRRSHIFT   reduce using rule 229 (expr_uminus -> MINUS expr .)
    ASSIGNLLSHIFT   reduce using rule 229 (expr_uminus -> MINUS expr .)
    ASSIGN          reduce using rule 229 (expr_uminus -> MINUS expr .)
    TLTHAN          reduce using rule 229 (expr_uminus -> MINUS expr .)
    RPAREN          reduce using rule 229 (expr_uminus -> MINUS expr .)
    RSBRACKET       reduce using rule 229 (expr_uminus -> MINUS expr .)
    COLON           reduce using rule 229 (expr_uminus -> MINUS expr .)
    RBRACKET        reduce using rule 229 (expr_uminus -> MINUS expr .)
    DOT             shift and go to state 117
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 229 (expr_uminus -> MINUS expr .) ]
  ! INC             [ reduce using rule 229 (expr_uminus -> MINUS expr .) ]
  ! DEC             [ reduce using rule 229 (expr_uminus -> MINUS expr .) ]
  ! LSBRACKET       [ reduce using rule 229 (expr_uminus -> MINUS expr .) ]
  ! LPAREN          [ reduce using rule 229 (expr_uminus -> MINUS expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! PLUS            [ shift and go to state 152 ]
  ! MINUS           [ shift and go to state 132 ]
  ! DIVIDE          [ shift and go to state 135 ]
  ! TIMES           [ shift and go to state 113 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 157

    (3) statementlist -> statementlist statement .

    RBRACKET        reduce using rule 3 (statementlist -> statementlist statement .)
    SEMI            reduce using rule 3 (statementlist -> statementlist statement .)
    FUNCTION        reduce using rule 3 (statementlist -> statementlist statement .)
    CLASS           reduce using rule 3 (statementlist -> statementlist statement .)
    IF              reduce using rule 3 (statementlist -> statementlist statement .)
    ELSE            reduce using rule 3 (statementlist -> statementlist statement .)
    WHILE           reduce using rule 3 (statementlist -> statementlist statement .)
    WITH            reduce using rule 3 (statementlist -> statementlist statement .)
    DO              reduce using rule 3 (statementlist -> statementlist statement .)
    FOR             reduce using rule 3 (statementlist -> statementlist statement .)
    RETURN          reduce using rule 3 (statementlist -> statementlist statement .)
    YIELD           reduce using rule 3 (statementlist -> statementlist statement .)
    BREAK           reduce using rule 3 (statementlist -> statementlist statement .)
    CONTINUE        reduce using rule 3 (statementlist -> statementlist statement .)
    THROW           reduce using rule 3 (statementlist -> statementlist statement .)
    TRY             reduce using rule 3 (statementlist -> statementlist statement .)
    CATCH           reduce using rule 3 (statementlist -> statementlist statement .)
    SWITCH          reduce using rule 3 (statementlist -> statementlist statement .)
    NATIVE          reduce using rule 3 (statementlist -> statementlist statement .)
    NUMBER          reduce using rule 3 (statementlist -> statementlist statement .)
    ID              reduce using rule 3 (statementlist -> statementlist statement .)
    DELETE          reduce using rule 3 (statementlist -> statementlist statement .)
    STRINGLIT       reduce using rule 3 (statementlist -> statementlist statement .)
    LSBRACKET       reduce using rule 3 (statementlist -> statementlist statement .)
    LPAREN          reduce using rule 3 (statementlist -> statementlist statement .)
    MINUS           reduce using rule 3 (statementlist -> statementlist statement .)
    NOT             reduce using rule 3 (statementlist -> statementlist statement .)
    BITINV          reduce using rule 3 (statementlist -> statementlist statement .)
    NEW             reduce using rule 3 (statementlist -> statementlist statement .)
    INC             reduce using rule 3 (statementlist -> statementlist statement .)
    DEC             reduce using rule 3 (statementlist -> statementlist statement .)
    TYPEOF          reduce using rule 3 (statementlist -> statementlist statement .)
    REGEXPR         reduce using rule 3 (statementlist -> statementlist statement .)
    GLOBAL          reduce using rule 3 (statementlist -> statementlist statement .)
    VAR             reduce using rule 3 (statementlist -> statementlist statement .)
    STATIC          reduce using rule 3 (statementlist -> statementlist statement .)
    TLTHAN          reduce using rule 3 (statementlist -> statementlist statement .)
    LBRACKET        reduce using rule 3 (statementlist -> statementlist statement .)
    CASE            reduce using rule 3 (statementlist -> statementlist statement .)
    DEFAULT         reduce using rule 3 (statementlist -> statementlist statement .)
    $end            reduce using rule 3 (statementlist -> statementlist statement .)


state 158

    (4) statementlist -> statementlist statement_nonctrl .

    RBRACKET        reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    SEMI            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    FUNCTION        reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    CLASS           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    IF              reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    ELSE            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    WHILE           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    WITH            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    DO              reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    FOR             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    RETURN          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    YIELD           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    BREAK           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    CONTINUE        reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    THROW           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    TRY             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    CATCH           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    SWITCH          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    NATIVE          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    NUMBER          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    ID              reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    DELETE          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    STRINGLIT       reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    LSBRACKET       reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    LPAREN          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    MINUS           reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    NOT             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    BITINV          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    NEW             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    INC             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    DEC             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    TYPEOF          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    REGEXPR         reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    GLOBAL          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    VAR             reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    STATIC          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    TLTHAN          reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    LBRACKET        reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    CASE            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    DEFAULT         reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)
    $end            reduce using rule 4 (statementlist -> statementlist statement_nonctrl .)


state 159

    (108) throw -> THROW expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 108 (throw -> THROW expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 160

    (246) ctrl_statement -> SEMI .
    (32) statement_nonctrl -> SEMI .

  ! reduce/reduce conflict for SEMI resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for CLASS resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for STATIC resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 32 (statement_nonctrl -> SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 32 (statement_nonctrl -> SEMI .)
    SEMI            reduce using rule 32 (statement_nonctrl -> SEMI .)
    FUNCTION        reduce using rule 32 (statement_nonctrl -> SEMI .)
    CLASS           reduce using rule 32 (statement_nonctrl -> SEMI .)
    IF              reduce using rule 32 (statement_nonctrl -> SEMI .)
    ELSE            reduce using rule 32 (statement_nonctrl -> SEMI .)
    WHILE           reduce using rule 32 (statement_nonctrl -> SEMI .)
    WITH            reduce using rule 32 (statement_nonctrl -> SEMI .)
    DO              reduce using rule 32 (statement_nonctrl -> SEMI .)
    FOR             reduce using rule 32 (statement_nonctrl -> SEMI .)
    RETURN          reduce using rule 32 (statement_nonctrl -> SEMI .)
    YIELD           reduce using rule 32 (statement_nonctrl -> SEMI .)
    BREAK           reduce using rule 32 (statement_nonctrl -> SEMI .)
    CONTINUE        reduce using rule 32 (statement_nonctrl -> SEMI .)
    THROW           reduce using rule 32 (statement_nonctrl -> SEMI .)
    TRY             reduce using rule 32 (statement_nonctrl -> SEMI .)
    CATCH           reduce using rule 32 (statement_nonctrl -> SEMI .)
    SWITCH          reduce using rule 32 (statement_nonctrl -> SEMI .)
    NATIVE          reduce using rule 32 (statement_nonctrl -> SEMI .)
    NUMBER          reduce using rule 32 (statement_nonctrl -> SEMI .)
    ID              reduce using rule 32 (statement_nonctrl -> SEMI .)
    DELETE          reduce using rule 32 (statement_nonctrl -> SEMI .)
    STRINGLIT       reduce using rule 32 (statement_nonctrl -> SEMI .)
    LSBRACKET       reduce using rule 32 (statement_nonctrl -> SEMI .)
    LPAREN          reduce using rule 32 (statement_nonctrl -> SEMI .)
    MINUS           reduce using rule 32 (statement_nonctrl -> SEMI .)
    NOT             reduce using rule 32 (statement_nonctrl -> SEMI .)
    BITINV          reduce using rule 32 (statement_nonctrl -> SEMI .)
    NEW             reduce using rule 32 (statement_nonctrl -> SEMI .)
    INC             reduce using rule 32 (statement_nonctrl -> SEMI .)
    DEC             reduce using rule 32 (statement_nonctrl -> SEMI .)
    TYPEOF          reduce using rule 32 (statement_nonctrl -> SEMI .)
    REGEXPR         reduce using rule 32 (statement_nonctrl -> SEMI .)
    GLOBAL          reduce using rule 32 (statement_nonctrl -> SEMI .)
    VAR             reduce using rule 32 (statement_nonctrl -> SEMI .)
    STATIC          reduce using rule 32 (statement_nonctrl -> SEMI .)
    TLTHAN          reduce using rule 32 (statement_nonctrl -> SEMI .)
    LBRACKET        reduce using rule 32 (statement_nonctrl -> SEMI .)
    $end            reduce using rule 32 (statement_nonctrl -> SEMI .)
    RBRACKET        reduce using rule 32 (statement_nonctrl -> SEMI .)
    CASE            reduce using rule 32 (statement_nonctrl -> SEMI .)
    DEFAULT         reduce using rule 32 (statement_nonctrl -> SEMI .)

  ! WHILE           [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! SEMI            [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! FUNCTION        [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! CLASS           [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! IF              [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! ELSE            [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! WITH            [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! DO              [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! FOR             [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! RETURN          [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! YIELD           [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! BREAK           [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! CONTINUE        [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! THROW           [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! TRY             [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! CATCH           [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! SWITCH          [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! NATIVE          [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! NUMBER          [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! ID              [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! DELETE          [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! STRINGLIT       [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! LSBRACKET       [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! LPAREN          [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! MINUS           [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! NOT             [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! BITINV          [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! NEW             [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! INC             [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! DEC             [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! TYPEOF          [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! REGEXPR         [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! GLOBAL          [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! VAR             [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! STATIC          [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! TLTHAN          [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! LBRACKET        [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! $end            [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! RBRACKET        [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! CASE            [ reduce using rule 246 (ctrl_statement -> SEMI .) ]
  ! DEFAULT         [ reduce using rule 246 (ctrl_statement -> SEMI .) ]


state 161

    (268) else -> ELSE ctrl_statement .

    SEMI            reduce using rule 268 (else -> ELSE ctrl_statement .)
    FUNCTION        reduce using rule 268 (else -> ELSE ctrl_statement .)
    CLASS           reduce using rule 268 (else -> ELSE ctrl_statement .)
    IF              reduce using rule 268 (else -> ELSE ctrl_statement .)
    ELSE            reduce using rule 268 (else -> ELSE ctrl_statement .)
    WHILE           reduce using rule 268 (else -> ELSE ctrl_statement .)
    WITH            reduce using rule 268 (else -> ELSE ctrl_statement .)
    DO              reduce using rule 268 (else -> ELSE ctrl_statement .)
    FOR             reduce using rule 268 (else -> ELSE ctrl_statement .)
    RETURN          reduce using rule 268 (else -> ELSE ctrl_statement .)
    YIELD           reduce using rule 268 (else -> ELSE ctrl_statement .)
    BREAK           reduce using rule 268 (else -> ELSE ctrl_statement .)
    CONTINUE        reduce using rule 268 (else -> ELSE ctrl_statement .)
    THROW           reduce using rule 268 (else -> ELSE ctrl_statement .)
    TRY             reduce using rule 268 (else -> ELSE ctrl_statement .)
    CATCH           reduce using rule 268 (else -> ELSE ctrl_statement .)
    SWITCH          reduce using rule 268 (else -> ELSE ctrl_statement .)
    NATIVE          reduce using rule 268 (else -> ELSE ctrl_statement .)
    NUMBER          reduce using rule 268 (else -> ELSE ctrl_statement .)
    ID              reduce using rule 268 (else -> ELSE ctrl_statement .)
    DELETE          reduce using rule 268 (else -> ELSE ctrl_statement .)
    STRINGLIT       reduce using rule 268 (else -> ELSE ctrl_statement .)
    LSBRACKET       reduce using rule 268 (else -> ELSE ctrl_statement .)
    LPAREN          reduce using rule 268 (else -> ELSE ctrl_statement .)
    MINUS           reduce using rule 268 (else -> ELSE ctrl_statement .)
    NOT             reduce using rule 268 (else -> ELSE ctrl_statement .)
    BITINV          reduce using rule 268 (else -> ELSE ctrl_statement .)
    NEW             reduce using rule 268 (else -> ELSE ctrl_statement .)
    INC             reduce using rule 268 (else -> ELSE ctrl_statement .)
    DEC             reduce using rule 268 (else -> ELSE ctrl_statement .)
    TYPEOF          reduce using rule 268 (else -> ELSE ctrl_statement .)
    REGEXPR         reduce using rule 268 (else -> ELSE ctrl_statement .)
    GLOBAL          reduce using rule 268 (else -> ELSE ctrl_statement .)
    VAR             reduce using rule 268 (else -> ELSE ctrl_statement .)
    STATIC          reduce using rule 268 (else -> ELSE ctrl_statement .)
    TLTHAN          reduce using rule 268 (else -> ELSE ctrl_statement .)
    LBRACKET        reduce using rule 268 (else -> ELSE ctrl_statement .)
    CASE            reduce using rule 268 (else -> ELSE ctrl_statement .)
    RBRACKET        reduce using rule 268 (else -> ELSE ctrl_statement .)
    $end            reduce using rule 268 (else -> ELSE ctrl_statement .)
    DEFAULT         reduce using rule 268 (else -> ELSE ctrl_statement .)


state 162

    (245) ctrl_statement -> LBRACKET . statementlist_opt RBRACKET
    (149) lbracket_restrict -> LBRACKET .
    (251) statementlist_opt -> . statementlist
    (252) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 149 (lbracket_restrict -> LBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! RBRACKET        [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! RBRACKET        [ reduce using rule 252 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    statementlist_opt              shift and go to state 255
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 256
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 78

state 163

    (244) ctrl_statement -> statement_nonctrl .

    WHILE           reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    SEMI            reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    FUNCTION        reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    CLASS           reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    IF              reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    ELSE            reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    WITH            reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    DO              reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    FOR             reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    RETURN          reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    YIELD           reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    BREAK           reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    CONTINUE        reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    THROW           reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    TRY             reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    CATCH           reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    SWITCH          reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    NATIVE          reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    NUMBER          reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    ID              reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    DELETE          reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    STRINGLIT       reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    LSBRACKET       reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    LPAREN          reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    MINUS           reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    NOT             reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    BITINV          reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    NEW             reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    INC             reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    DEC             reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    TYPEOF          reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    REGEXPR         reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    GLOBAL          reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    VAR             reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    STATIC          reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    TLTHAN          reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    LBRACKET        reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    $end            reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    RBRACKET        reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    CASE            reduce using rule 244 (ctrl_statement -> statement_nonctrl .)
    DEFAULT         reduce using rule 244 (ctrl_statement -> statement_nonctrl .)


state 164

    (271) return -> RETURN expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 271 (return -> RETURN expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 165

    (248) while -> WHILE paren_expr . statement_nonctrl
    (249) while -> WHILE paren_expr . LBRACKET statementlist_opt RBRACKET
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 257
    SEMI            shift and go to state 46
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    FUNCTION        shift and go to state 97
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    FOR             shift and go to state 35
    DO              shift and go to state 54
    WHILE           shift and go to state 31
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10

    while                          shift and go to state 96
    expr                           shift and go to state 19
    if                             shift and go to state 90
    dec                            shift and go to state 45
    for                            shift and go to state 91
    expr_uminus                    shift and go to state 47
    catch                          shift and go to state 93
    break                          shift and go to state 98
    lthan_restrict                 shift and go to state 13
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    dowhile                        shift and go to state 99
    delete                         shift and go to state 58
    throw                          shift and go to state 92
    try                            shift and go to state 100
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    array_literal                  shift and go to state 66
    var_decl                       shift and go to state 74
    template_ref                   shift and go to state 5
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 102
    else                           shift and go to state 103
    return                         shift and go to state 94
    bitinv                         shift and go to state 7
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    typeof                         shift and go to state 75
    yield                          shift and go to state 95
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 258

state 166

    (242) for -> FOR LPAREN . for_decl RPAREN statement_nonctrl
    (243) for -> FOR LPAREN . for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (240) for_decl -> . for_var_decl SEMI expr_opt SEMI expr_opt
    (241) for_decl -> . for_var_decl IN expr
    (237) for_var_decl -> . ID
    (238) for_var_decl -> . ID ASSIGN expr
    (239) for_var_decl -> . var_decl
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC

    ID              shift and go to state 259
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61

    var_decl                       shift and go to state 260
    type_modifiers                 shift and go to state 69
    for_var_decl                   shift and go to state 261
    for_decl                       shift and go to state 262

state 167

    (21) statement -> yield SEMI .
    (39) statement_nonctrl -> yield SEMI .

  ! reduce/reduce conflict for SEMI resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for CLASS resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for STATIC resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 21 (statement -> yield SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 21 (statement -> yield SEMI .)
    SEMI            reduce using rule 21 (statement -> yield SEMI .)
    FUNCTION        reduce using rule 21 (statement -> yield SEMI .)
    CLASS           reduce using rule 21 (statement -> yield SEMI .)
    IF              reduce using rule 21 (statement -> yield SEMI .)
    ELSE            reduce using rule 21 (statement -> yield SEMI .)
    WHILE           reduce using rule 21 (statement -> yield SEMI .)
    WITH            reduce using rule 21 (statement -> yield SEMI .)
    DO              reduce using rule 21 (statement -> yield SEMI .)
    FOR             reduce using rule 21 (statement -> yield SEMI .)
    RETURN          reduce using rule 21 (statement -> yield SEMI .)
    YIELD           reduce using rule 21 (statement -> yield SEMI .)
    BREAK           reduce using rule 21 (statement -> yield SEMI .)
    CONTINUE        reduce using rule 21 (statement -> yield SEMI .)
    THROW           reduce using rule 21 (statement -> yield SEMI .)
    TRY             reduce using rule 21 (statement -> yield SEMI .)
    CATCH           reduce using rule 21 (statement -> yield SEMI .)
    SWITCH          reduce using rule 21 (statement -> yield SEMI .)
    NATIVE          reduce using rule 21 (statement -> yield SEMI .)
    NUMBER          reduce using rule 21 (statement -> yield SEMI .)
    ID              reduce using rule 21 (statement -> yield SEMI .)
    DELETE          reduce using rule 21 (statement -> yield SEMI .)
    STRINGLIT       reduce using rule 21 (statement -> yield SEMI .)
    LSBRACKET       reduce using rule 21 (statement -> yield SEMI .)
    LPAREN          reduce using rule 21 (statement -> yield SEMI .)
    MINUS           reduce using rule 21 (statement -> yield SEMI .)
    NOT             reduce using rule 21 (statement -> yield SEMI .)
    BITINV          reduce using rule 21 (statement -> yield SEMI .)
    NEW             reduce using rule 21 (statement -> yield SEMI .)
    INC             reduce using rule 21 (statement -> yield SEMI .)
    DEC             reduce using rule 21 (statement -> yield SEMI .)
    TYPEOF          reduce using rule 21 (statement -> yield SEMI .)
    REGEXPR         reduce using rule 21 (statement -> yield SEMI .)
    GLOBAL          reduce using rule 21 (statement -> yield SEMI .)
    VAR             reduce using rule 21 (statement -> yield SEMI .)
    STATIC          reduce using rule 21 (statement -> yield SEMI .)
    TLTHAN          reduce using rule 21 (statement -> yield SEMI .)
    LBRACKET        reduce using rule 21 (statement -> yield SEMI .)
    RBRACKET        reduce using rule 21 (statement -> yield SEMI .)
    $end            reduce using rule 21 (statement -> yield SEMI .)
    CASE            reduce using rule 21 (statement -> yield SEMI .)
    DEFAULT         reduce using rule 21 (statement -> yield SEMI .)

  ! SEMI            [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! FUNCTION        [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! CLASS           [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! IF              [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! ELSE            [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! WHILE           [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! WITH            [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! DO              [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! FOR             [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! RETURN          [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! YIELD           [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! BREAK           [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! CONTINUE        [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! THROW           [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! TRY             [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! CATCH           [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! SWITCH          [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! NATIVE          [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! NUMBER          [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! ID              [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! DELETE          [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! STRINGLIT       [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! LSBRACKET       [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! LPAREN          [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! MINUS           [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! NOT             [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! BITINV          [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! NEW             [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! INC             [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! DEC             [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! TYPEOF          [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! REGEXPR         [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! GLOBAL          [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! VAR             [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! STATIC          [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! TLTHAN          [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! LBRACKET        [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! RBRACKET        [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! CASE            [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! DEFAULT         [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]
  ! $end            [ reduce using rule 39 (statement_nonctrl -> yield SEMI .) ]


state 168

    (174) not -> NOT expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    RSHIFT          reduce using rule 174 (not -> NOT expr .)
    LSHIFT          reduce using rule 174 (not -> NOT expr .)
    LLSHIFT         reduce using rule 174 (not -> NOT expr .)
    RRSHIFT         reduce using rule 174 (not -> NOT expr .)
    LAND            reduce using rule 174 (not -> NOT expr .)
    LOR             reduce using rule 174 (not -> NOT expr .)
    BOR             reduce using rule 174 (not -> NOT expr .)
    INSTANCEOF      reduce using rule 174 (not -> NOT expr .)
    BXOR            reduce using rule 174 (not -> NOT expr .)
    BAND            reduce using rule 174 (not -> NOT expr .)
    EQUAL           reduce using rule 174 (not -> NOT expr .)
    EQUAL_STRICT    reduce using rule 174 (not -> NOT expr .)
    NOTEQUAL_STRICT reduce using rule 174 (not -> NOT expr .)
    GTHAN           reduce using rule 174 (not -> NOT expr .)
    GTHANEQ         reduce using rule 174 (not -> NOT expr .)
    LTHAN           reduce using rule 174 (not -> NOT expr .)
    MOD             reduce using rule 174 (not -> NOT expr .)
    LTHANEQ         reduce using rule 174 (not -> NOT expr .)
    NOTEQUAL        reduce using rule 174 (not -> NOT expr .)
    PLUS            reduce using rule 174 (not -> NOT expr .)
    MINUS           reduce using rule 174 (not -> NOT expr .)
    DIVIDE          reduce using rule 174 (not -> NOT expr .)
    TIMES           reduce using rule 174 (not -> NOT expr .)
    IN              reduce using rule 174 (not -> NOT expr .)
    QEST            reduce using rule 174 (not -> NOT expr .)
    COMMA           reduce using rule 174 (not -> NOT expr .)
    ASSIGNPLUS      reduce using rule 174 (not -> NOT expr .)
    ASSIGNMINUS     reduce using rule 174 (not -> NOT expr .)
    ASSIGNDIVIDE    reduce using rule 174 (not -> NOT expr .)
    ASSIGNTIMES     reduce using rule 174 (not -> NOT expr .)
    ASSIGNBOR       reduce using rule 174 (not -> NOT expr .)
    ASSIGNBAND      reduce using rule 174 (not -> NOT expr .)
    ASSIGNBXOR      reduce using rule 174 (not -> NOT expr .)
    ASSIGNLSHIFT    reduce using rule 174 (not -> NOT expr .)
    ASSIGNRSHIFT    reduce using rule 174 (not -> NOT expr .)
    ASSIGNRRSHIFT   reduce using rule 174 (not -> NOT expr .)
    ASSIGNLLSHIFT   reduce using rule 174 (not -> NOT expr .)
    ASSIGN          reduce using rule 174 (not -> NOT expr .)
    TLTHAN          reduce using rule 174 (not -> NOT expr .)
    SEMI            reduce using rule 174 (not -> NOT expr .)
    RPAREN          reduce using rule 174 (not -> NOT expr .)
    RSBRACKET       reduce using rule 174 (not -> NOT expr .)
    COLON           reduce using rule 174 (not -> NOT expr .)
    RBRACKET        reduce using rule 174 (not -> NOT expr .)
    DOT             shift and go to state 117
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 174 (not -> NOT expr .) ]
  ! INC             [ reduce using rule 174 (not -> NOT expr .) ]
  ! DEC             [ reduce using rule 174 (not -> NOT expr .) ]
  ! LSBRACKET       [ reduce using rule 174 (not -> NOT expr .) ]
  ! LPAREN          [ reduce using rule 174 (not -> NOT expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! PLUS            [ shift and go to state 152 ]
  ! MINUS           [ shift and go to state 132 ]
  ! DIVIDE          [ shift and go to state 135 ]
  ! TIMES           [ shift and go to state 113 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 169

    (262) if -> IF paren_expr . ctrl_statement
    (244) ctrl_statement -> . statement_nonctrl
    (245) ctrl_statement -> . LBRACKET statementlist_opt RBRACKET
    (246) ctrl_statement -> . SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 162
    SEMI            shift and go to state 160
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    FUNCTION        shift and go to state 97
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    FOR             shift and go to state 35
    DO              shift and go to state 54
    WHILE           shift and go to state 31
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10

    while                          shift and go to state 96
    expr                           shift and go to state 19
    if                             shift and go to state 90
    dec                            shift and go to state 45
    for                            shift and go to state 91
    expr_uminus                    shift and go to state 47
    catch                          shift and go to state 93
    typeof                         shift and go to state 75
    break                          shift and go to state 98
    lthan_restrict                 shift and go to state 13
    funcref                        shift and go to state 15
    exprfunction                   shift and go to state 17
    dowhile                        shift and go to state 99
    delete                         shift and go to state 58
    throw                          shift and go to state 92
    try                            shift and go to state 100
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    array_literal                  shift and go to state 66
    var_decl                       shift and go to state 74
    template_ref                   shift and go to state 5
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 102
    else                           shift and go to state 103
    return                         shift and go to state 94
    bitinv                         shift and go to state 7
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    ctrl_statement                 shift and go to state 263
    re_lit                         shift and go to state 32
    inc                            shift and go to state 37
    yield                          shift and go to state 95
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 163

state 170

    (184) expr -> ID template_ref .

    SEMI            reduce using rule 184 (expr -> ID template_ref .)
    RSHIFT          reduce using rule 184 (expr -> ID template_ref .)
    LSHIFT          reduce using rule 184 (expr -> ID template_ref .)
    LLSHIFT         reduce using rule 184 (expr -> ID template_ref .)
    RRSHIFT         reduce using rule 184 (expr -> ID template_ref .)
    DOT             reduce using rule 184 (expr -> ID template_ref .)
    LAND            reduce using rule 184 (expr -> ID template_ref .)
    LOR             reduce using rule 184 (expr -> ID template_ref .)
    BOR             reduce using rule 184 (expr -> ID template_ref .)
    INSTANCEOF      reduce using rule 184 (expr -> ID template_ref .)
    BXOR            reduce using rule 184 (expr -> ID template_ref .)
    BAND            reduce using rule 184 (expr -> ID template_ref .)
    EQUAL           reduce using rule 184 (expr -> ID template_ref .)
    EQUAL_STRICT    reduce using rule 184 (expr -> ID template_ref .)
    NOTEQUAL_STRICT reduce using rule 184 (expr -> ID template_ref .)
    GTHAN           reduce using rule 184 (expr -> ID template_ref .)
    GTHANEQ         reduce using rule 184 (expr -> ID template_ref .)
    LTHAN           reduce using rule 184 (expr -> ID template_ref .)
    MOD             reduce using rule 184 (expr -> ID template_ref .)
    LTHANEQ         reduce using rule 184 (expr -> ID template_ref .)
    NOTEQUAL        reduce using rule 184 (expr -> ID template_ref .)
    PLUS            reduce using rule 184 (expr -> ID template_ref .)
    MINUS           reduce using rule 184 (expr -> ID template_ref .)
    DIVIDE          reduce using rule 184 (expr -> ID template_ref .)
    TIMES           reduce using rule 184 (expr -> ID template_ref .)
    IN              reduce using rule 184 (expr -> ID template_ref .)
    QEST            reduce using rule 184 (expr -> ID template_ref .)
    COMMA           reduce using rule 184 (expr -> ID template_ref .)
    INC             reduce using rule 184 (expr -> ID template_ref .)
    DEC             reduce using rule 184 (expr -> ID template_ref .)
    ASSIGNPLUS      reduce using rule 184 (expr -> ID template_ref .)
    ASSIGNMINUS     reduce using rule 184 (expr -> ID template_ref .)
    ASSIGNDIVIDE    reduce using rule 184 (expr -> ID template_ref .)
    ASSIGNTIMES     reduce using rule 184 (expr -> ID template_ref .)
    ASSIGNBOR       reduce using rule 184 (expr -> ID template_ref .)
    ASSIGNBAND      reduce using rule 184 (expr -> ID template_ref .)
    ASSIGNBXOR      reduce using rule 184 (expr -> ID template_ref .)
    ASSIGNLSHIFT    reduce using rule 184 (expr -> ID template_ref .)
    ASSIGNRSHIFT    reduce using rule 184 (expr -> ID template_ref .)
    ASSIGNRRSHIFT   reduce using rule 184 (expr -> ID template_ref .)
    ASSIGNLLSHIFT   reduce using rule 184 (expr -> ID template_ref .)
    ASSIGN          reduce using rule 184 (expr -> ID template_ref .)
    LSBRACKET       reduce using rule 184 (expr -> ID template_ref .)
    TLTHAN          reduce using rule 184 (expr -> ID template_ref .)
    LPAREN          reduce using rule 184 (expr -> ID template_ref .)
    RPAREN          reduce using rule 184 (expr -> ID template_ref .)
    RSBRACKET       reduce using rule 184 (expr -> ID template_ref .)
    COLON           reduce using rule 184 (expr -> ID template_ref .)
    RBRACKET        reduce using rule 184 (expr -> ID template_ref .)


state 171

    (155) exprfunction -> FUNCTION template_opt . push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> FUNCTION template_opt . push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (6) push_scope -> .

    LPAREN          reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 264

state 172

    (148) function -> FUNCTION ID . template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (146) funcref -> FUNCTION ID . template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (142) template_opt -> . template
    (143) template_opt -> .
    (52) template -> . lthan_restrict templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 143 (template_opt -> .)
    TLTHAN          shift and go to state 10

    template_opt                   shift and go to state 265
    template                       shift and go to state 173
    lthan_restrict                 shift and go to state 174

state 173

    (142) template_opt -> template .

    LPAREN          reduce using rule 142 (template_opt -> template .)
    EXTENDS         reduce using rule 142 (template_opt -> template .)
    LBRACKET        reduce using rule 142 (template_opt -> template .)


state 174

    (52) template -> lthan_restrict . templatedeflist gthan_restrict
    (48) templatedeflist -> . var_type
    (49) templatedeflist -> . var_type ASSIGN var_type
    (50) templatedeflist -> . templatedeflist COMMA var_type
    (51) templatedeflist -> . templatedeflist COMMA var_type ASSIGN var_type
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    templatedeflist                shift and go to state 266
    var_type                       shift and go to state 267
    id_var_type                    shift and go to state 191

state 175

    (28) statement -> func_native SEMI .

    SEMI            reduce using rule 28 (statement -> func_native SEMI .)
    FUNCTION        reduce using rule 28 (statement -> func_native SEMI .)
    CLASS           reduce using rule 28 (statement -> func_native SEMI .)
    IF              reduce using rule 28 (statement -> func_native SEMI .)
    ELSE            reduce using rule 28 (statement -> func_native SEMI .)
    WHILE           reduce using rule 28 (statement -> func_native SEMI .)
    WITH            reduce using rule 28 (statement -> func_native SEMI .)
    DO              reduce using rule 28 (statement -> func_native SEMI .)
    FOR             reduce using rule 28 (statement -> func_native SEMI .)
    RETURN          reduce using rule 28 (statement -> func_native SEMI .)
    YIELD           reduce using rule 28 (statement -> func_native SEMI .)
    BREAK           reduce using rule 28 (statement -> func_native SEMI .)
    CONTINUE        reduce using rule 28 (statement -> func_native SEMI .)
    THROW           reduce using rule 28 (statement -> func_native SEMI .)
    TRY             reduce using rule 28 (statement -> func_native SEMI .)
    CATCH           reduce using rule 28 (statement -> func_native SEMI .)
    SWITCH          reduce using rule 28 (statement -> func_native SEMI .)
    NATIVE          reduce using rule 28 (statement -> func_native SEMI .)
    NUMBER          reduce using rule 28 (statement -> func_native SEMI .)
    ID              reduce using rule 28 (statement -> func_native SEMI .)
    DELETE          reduce using rule 28 (statement -> func_native SEMI .)
    STRINGLIT       reduce using rule 28 (statement -> func_native SEMI .)
    LSBRACKET       reduce using rule 28 (statement -> func_native SEMI .)
    LPAREN          reduce using rule 28 (statement -> func_native SEMI .)
    MINUS           reduce using rule 28 (statement -> func_native SEMI .)
    NOT             reduce using rule 28 (statement -> func_native SEMI .)
    BITINV          reduce using rule 28 (statement -> func_native SEMI .)
    NEW             reduce using rule 28 (statement -> func_native SEMI .)
    INC             reduce using rule 28 (statement -> func_native SEMI .)
    DEC             reduce using rule 28 (statement -> func_native SEMI .)
    TYPEOF          reduce using rule 28 (statement -> func_native SEMI .)
    REGEXPR         reduce using rule 28 (statement -> func_native SEMI .)
    GLOBAL          reduce using rule 28 (statement -> func_native SEMI .)
    VAR             reduce using rule 28 (statement -> func_native SEMI .)
    STATIC          reduce using rule 28 (statement -> func_native SEMI .)
    TLTHAN          reduce using rule 28 (statement -> func_native SEMI .)
    LBRACKET        reduce using rule 28 (statement -> func_native SEMI .)
    RBRACKET        reduce using rule 28 (statement -> func_native SEMI .)
    $end            reduce using rule 28 (statement -> func_native SEMI .)
    CASE            reduce using rule 28 (statement -> func_native SEMI .)
    DEFAULT         reduce using rule 28 (statement -> func_native SEMI .)


state 176

    (22) statement -> break SEMI .
    (40) statement_nonctrl -> break SEMI .

  ! reduce/reduce conflict for SEMI resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for CLASS resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for STATIC resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 22 (statement -> break SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 22 (statement -> break SEMI .)
    SEMI            reduce using rule 22 (statement -> break SEMI .)
    FUNCTION        reduce using rule 22 (statement -> break SEMI .)
    CLASS           reduce using rule 22 (statement -> break SEMI .)
    IF              reduce using rule 22 (statement -> break SEMI .)
    ELSE            reduce using rule 22 (statement -> break SEMI .)
    WHILE           reduce using rule 22 (statement -> break SEMI .)
    WITH            reduce using rule 22 (statement -> break SEMI .)
    DO              reduce using rule 22 (statement -> break SEMI .)
    FOR             reduce using rule 22 (statement -> break SEMI .)
    RETURN          reduce using rule 22 (statement -> break SEMI .)
    YIELD           reduce using rule 22 (statement -> break SEMI .)
    BREAK           reduce using rule 22 (statement -> break SEMI .)
    CONTINUE        reduce using rule 22 (statement -> break SEMI .)
    THROW           reduce using rule 22 (statement -> break SEMI .)
    TRY             reduce using rule 22 (statement -> break SEMI .)
    CATCH           reduce using rule 22 (statement -> break SEMI .)
    SWITCH          reduce using rule 22 (statement -> break SEMI .)
    NATIVE          reduce using rule 22 (statement -> break SEMI .)
    NUMBER          reduce using rule 22 (statement -> break SEMI .)
    ID              reduce using rule 22 (statement -> break SEMI .)
    DELETE          reduce using rule 22 (statement -> break SEMI .)
    STRINGLIT       reduce using rule 22 (statement -> break SEMI .)
    LSBRACKET       reduce using rule 22 (statement -> break SEMI .)
    LPAREN          reduce using rule 22 (statement -> break SEMI .)
    MINUS           reduce using rule 22 (statement -> break SEMI .)
    NOT             reduce using rule 22 (statement -> break SEMI .)
    BITINV          reduce using rule 22 (statement -> break SEMI .)
    NEW             reduce using rule 22 (statement -> break SEMI .)
    INC             reduce using rule 22 (statement -> break SEMI .)
    DEC             reduce using rule 22 (statement -> break SEMI .)
    TYPEOF          reduce using rule 22 (statement -> break SEMI .)
    REGEXPR         reduce using rule 22 (statement -> break SEMI .)
    GLOBAL          reduce using rule 22 (statement -> break SEMI .)
    VAR             reduce using rule 22 (statement -> break SEMI .)
    STATIC          reduce using rule 22 (statement -> break SEMI .)
    TLTHAN          reduce using rule 22 (statement -> break SEMI .)
    LBRACKET        reduce using rule 22 (statement -> break SEMI .)
    RBRACKET        reduce using rule 22 (statement -> break SEMI .)
    $end            reduce using rule 22 (statement -> break SEMI .)
    CASE            reduce using rule 22 (statement -> break SEMI .)
    DEFAULT         reduce using rule 22 (statement -> break SEMI .)

  ! SEMI            [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! FUNCTION        [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! CLASS           [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! IF              [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! ELSE            [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! WHILE           [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! WITH            [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! DO              [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! FOR             [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! RETURN          [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! YIELD           [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! BREAK           [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! CONTINUE        [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! THROW           [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! TRY             [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! CATCH           [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! SWITCH          [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! NATIVE          [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! NUMBER          [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! ID              [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! DELETE          [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! STRINGLIT       [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! LSBRACKET       [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! LPAREN          [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! MINUS           [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! NOT             [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! BITINV          [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! NEW             [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! INC             [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! DEC             [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! TYPEOF          [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! REGEXPR         [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! GLOBAL          [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! VAR             [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! STATIC          [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! TLTHAN          [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! LBRACKET        [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! RBRACKET        [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! CASE            [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! DEFAULT         [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]
  ! $end            [ reduce using rule 40 (statement_nonctrl -> break SEMI .) ]


state 177

    (247) dowhile -> DO ctrl_statement . WHILE paren_expr

    WHILE           shift and go to state 268


state 178

    (171) inc -> INC expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    RSHIFT          reduce using rule 171 (inc -> INC expr .)
    LSHIFT          reduce using rule 171 (inc -> INC expr .)
    LLSHIFT         reduce using rule 171 (inc -> INC expr .)
    RRSHIFT         reduce using rule 171 (inc -> INC expr .)
    LAND            reduce using rule 171 (inc -> INC expr .)
    LOR             reduce using rule 171 (inc -> INC expr .)
    BOR             reduce using rule 171 (inc -> INC expr .)
    INSTANCEOF      reduce using rule 171 (inc -> INC expr .)
    BXOR            reduce using rule 171 (inc -> INC expr .)
    BAND            reduce using rule 171 (inc -> INC expr .)
    EQUAL           reduce using rule 171 (inc -> INC expr .)
    EQUAL_STRICT    reduce using rule 171 (inc -> INC expr .)
    NOTEQUAL_STRICT reduce using rule 171 (inc -> INC expr .)
    GTHAN           reduce using rule 171 (inc -> INC expr .)
    GTHANEQ         reduce using rule 171 (inc -> INC expr .)
    LTHAN           reduce using rule 171 (inc -> INC expr .)
    MOD             reduce using rule 171 (inc -> INC expr .)
    LTHANEQ         reduce using rule 171 (inc -> INC expr .)
    NOTEQUAL        reduce using rule 171 (inc -> INC expr .)
    PLUS            reduce using rule 171 (inc -> INC expr .)
    MINUS           reduce using rule 171 (inc -> INC expr .)
    DIVIDE          reduce using rule 171 (inc -> INC expr .)
    TIMES           reduce using rule 171 (inc -> INC expr .)
    IN              reduce using rule 171 (inc -> INC expr .)
    QEST            reduce using rule 171 (inc -> INC expr .)
    COMMA           reduce using rule 171 (inc -> INC expr .)
    INC             reduce using rule 171 (inc -> INC expr .)
    DEC             reduce using rule 171 (inc -> INC expr .)
    ASSIGNPLUS      reduce using rule 171 (inc -> INC expr .)
    ASSIGNMINUS     reduce using rule 171 (inc -> INC expr .)
    ASSIGNDIVIDE    reduce using rule 171 (inc -> INC expr .)
    ASSIGNTIMES     reduce using rule 171 (inc -> INC expr .)
    ASSIGNBOR       reduce using rule 171 (inc -> INC expr .)
    ASSIGNBAND      reduce using rule 171 (inc -> INC expr .)
    ASSIGNBXOR      reduce using rule 171 (inc -> INC expr .)
    ASSIGNLSHIFT    reduce using rule 171 (inc -> INC expr .)
    ASSIGNRSHIFT    reduce using rule 171 (inc -> INC expr .)
    ASSIGNRRSHIFT   reduce using rule 171 (inc -> INC expr .)
    ASSIGNLLSHIFT   reduce using rule 171 (inc -> INC expr .)
    ASSIGN          reduce using rule 171 (inc -> INC expr .)
    LSBRACKET       reduce using rule 171 (inc -> INC expr .)
    TLTHAN          reduce using rule 171 (inc -> INC expr .)
    SEMI            reduce using rule 171 (inc -> INC expr .)
    RPAREN          reduce using rule 171 (inc -> INC expr .)
    RSBRACKET       reduce using rule 171 (inc -> INC expr .)
    COLON           reduce using rule 171 (inc -> INC expr .)
    RBRACKET        reduce using rule 171 (inc -> INC expr .)
    DOT             shift and go to state 117
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 171 (inc -> INC expr .) ]
  ! LPAREN          [ reduce using rule 171 (inc -> INC expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! PLUS            [ shift and go to state 152 ]
  ! MINUS           [ shift and go to state 132 ]
  ! DIVIDE          [ shift and go to state 135 ]
  ! TIMES           [ shift and go to state 113 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! INC             [ shift and go to state 118 ]
  ! DEC             [ shift and go to state 149 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! LSBRACKET       [ shift and go to state 111 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 179

    (216) expr -> lparen_restrict expr . rparen_restrict
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (178) rparen_restrict -> . RPAREN
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    RPAREN          shift and go to state 270
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

    rparen_restrict                shift and go to state 269
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    func_call                      shift and go to state 134
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112
    lthan_restrict                 shift and go to state 13

state 180

    (45) statement_nonctrl -> delete SEMI .

    SEMI            reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    FUNCTION        reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    CLASS           reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    IF              reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    ELSE            reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    WHILE           reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    WITH            reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    DO              reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    FOR             reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    RETURN          reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    YIELD           reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    BREAK           reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    CONTINUE        reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    THROW           reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    TRY             reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    CATCH           reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    SWITCH          reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    NATIVE          reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    NUMBER          reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    ID              reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    DELETE          reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    STRINGLIT       reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    LSBRACKET       reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    LPAREN          reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    MINUS           reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    NOT             reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    BITINV          reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    NEW             reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    INC             reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    DEC             reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    TYPEOF          reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    REGEXPR         reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    GLOBAL          reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    VAR             reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    STATIC          reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    TLTHAN          reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    LBRACKET        reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    RBRACKET        reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    $end            reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    CASE            reduce using rule 45 (statement_nonctrl -> delete SEMI .)
    DEFAULT         reduce using rule 45 (statement_nonctrl -> delete SEMI .)


state 181

    (266) catch -> CATCH paren_expr . statement_nonctrl
    (267) catch -> CATCH paren_expr . LBRACKET statementlist RBRACKET
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 271
    SEMI            shift and go to state 46
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    FUNCTION        shift and go to state 97
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    FOR             shift and go to state 35
    DO              shift and go to state 54
    WHILE           shift and go to state 31
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10

    while                          shift and go to state 96
    expr                           shift and go to state 19
    if                             shift and go to state 90
    dec                            shift and go to state 45
    for                            shift and go to state 91
    expr_uminus                    shift and go to state 47
    catch                          shift and go to state 93
    break                          shift and go to state 98
    lthan_restrict                 shift and go to state 13
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    dowhile                        shift and go to state 99
    delete                         shift and go to state 58
    throw                          shift and go to state 92
    try                            shift and go to state 100
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    array_literal                  shift and go to state 66
    template_ref                   shift and go to state 5
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 102
    else                           shift and go to state 103
    return                         shift and go to state 94
    bitinv                         shift and go to state 7
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    typeof                         shift and go to state 75
    yield                          shift and go to state 95
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 272

state 182

    (157) array_literal -> LSBRACKET exprlist . RSBRACKET
    (113) exprlist -> exprlist . COMMA expr

    RSBRACKET       shift and go to state 273
    COMMA           shift and go to state 274


state 183

    (112) exprlist -> expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 112 (exprlist -> expr .)
    RSBRACKET       reduce using rule 112 (exprlist -> expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

  ! COMMA           [ reduce using rule 112 (exprlist -> expr .) ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 184

    (158) array_literal -> LSBRACKET RSBRACKET .

    SEMI            reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    RSHIFT          reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    LSHIFT          reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    LLSHIFT         reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    RRSHIFT         reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    DOT             reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    LAND            reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    LOR             reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    BOR             reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    INSTANCEOF      reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    BXOR            reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    BAND            reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    EQUAL           reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    EQUAL_STRICT    reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    NOTEQUAL_STRICT reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    GTHAN           reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    GTHANEQ         reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    LTHAN           reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    MOD             reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    LTHANEQ         reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    NOTEQUAL        reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    PLUS            reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    MINUS           reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    DIVIDE          reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    TIMES           reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    IN              reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    QEST            reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    COMMA           reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    INC             reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    DEC             reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNPLUS      reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNMINUS     reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNTIMES     reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNBOR       reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNBAND      reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNBXOR      reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNLSHIFT    reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNRSHIFT    reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNRRSHIFT   reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGNLLSHIFT   reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    ASSIGN          reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    LSBRACKET       reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    TLTHAN          reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    LPAREN          reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    RPAREN          reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    RSBRACKET       reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    COLON           reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)
    RBRACKET        reduce using rule 158 (array_literal -> LSBRACKET RSBRACKET .)


state 185

    (167) obj_literal -> lbracket_restrict rbracket_restrict .

    RSHIFT          reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LSHIFT          reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LLSHIFT         reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RRSHIFT         reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    DOT             reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LAND            reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LOR             reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    BOR             reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    INSTANCEOF      reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    BXOR            reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    BAND            reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    EQUAL           reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    EQUAL_STRICT    reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    GTHAN           reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    GTHANEQ         reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LTHAN           reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    MOD             reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LTHANEQ         reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    NOTEQUAL        reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    PLUS            reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    MINUS           reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    DIVIDE          reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    TIMES           reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    IN              reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    QEST            reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    COMMA           reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    INC             reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    DEC             reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNPLUS      reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNMINUS     reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNTIMES     reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNBOR       reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNBAND      reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNBXOR      reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNLSHIFT    reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNRSHIFT    reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNRRSHIFT   reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGNLLSHIFT   reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    ASSIGN          reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LSBRACKET       reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    TLTHAN          reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    LPAREN          reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    SEMI            reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RPAREN          reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RSBRACKET       reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    COLON           reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)
    RBRACKET        reduce using rule 167 (obj_literal -> lbracket_restrict rbracket_restrict .)


state 186

    (150) rbracket_restrict -> RBRACKET .

    SEMI            reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    RSHIFT          reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    LSHIFT          reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    LLSHIFT         reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    RRSHIFT         reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    DOT             reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    LAND            reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    LOR             reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    BOR             reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    INSTANCEOF      reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    BXOR            reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    BAND            reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    EQUAL           reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    EQUAL_STRICT    reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    NOTEQUAL_STRICT reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    GTHAN           reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    GTHANEQ         reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    LTHAN           reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    MOD             reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    LTHANEQ         reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    NOTEQUAL        reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    PLUS            reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    MINUS           reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    DIVIDE          reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    TIMES           reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    IN              reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    QEST            reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    COMMA           reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    INC             reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    DEC             reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    ASSIGNPLUS      reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    ASSIGNMINUS     reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    ASSIGNDIVIDE    reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    ASSIGNTIMES     reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    ASSIGNBOR       reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    ASSIGNBAND      reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    ASSIGNBXOR      reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    ASSIGNLSHIFT    reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    ASSIGNRSHIFT    reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    ASSIGNRRSHIFT   reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    ASSIGNLLSHIFT   reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    ASSIGN          reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    LSBRACKET       reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    TLTHAN          reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    LPAREN          reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    RPAREN          reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    RSBRACKET       reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    COLON           reduce using rule 150 (rbracket_restrict -> RBRACKET .)
    RBRACKET        reduce using rule 150 (rbracket_restrict -> RBRACKET .)


state 187

    (166) obj_literal -> lbracket_restrict push_scope . obj_lit_list rbracket_restrict
    (163) obj_lit_list -> . id_str_or_num COLON expr
    (164) obj_lit_list -> . obj_lit_list COMMA id_str_or_num COLON expr
    (165) obj_lit_list -> . obj_lit_list COMMA
    (159) id_str_or_num -> . ID
    (160) id_str_or_num -> . NUMBER
    (161) id_str_or_num -> . STRINGLIT

    ID              shift and go to state 278
    NUMBER          shift and go to state 277
    STRINGLIT       shift and go to state 275

    id_str_or_num                  shift and go to state 276
    obj_lit_list                   shift and go to state 279

state 188

    (147) func_native -> NATIVE push_scope . FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt

    FUNCTION        shift and go to state 280


state 189

    (273) yield -> YIELD expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 273 (yield -> YIELD expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 190

    (84) var_type -> FLOAT .

    SEMI            reduce using rule 84 (var_type -> FLOAT .)
    ID              reduce using rule 84 (var_type -> FLOAT .)
    TLTHAN          reduce using rule 84 (var_type -> FLOAT .)
    ASSIGN          reduce using rule 84 (var_type -> FLOAT .)
    RPAREN          reduce using rule 84 (var_type -> FLOAT .)
    COMMA           reduce using rule 84 (var_type -> FLOAT .)
    TGTHAN          reduce using rule 84 (var_type -> FLOAT .)
    LBRACKET        reduce using rule 84 (var_type -> FLOAT .)
    IN              reduce using rule 84 (var_type -> FLOAT .)


state 191

    (81) var_type -> id_var_type .

    SEMI            reduce using rule 81 (var_type -> id_var_type .)
    ID              reduce using rule 81 (var_type -> id_var_type .)
    TLTHAN          reduce using rule 81 (var_type -> id_var_type .)
    ASSIGN          reduce using rule 81 (var_type -> id_var_type .)
    RPAREN          reduce using rule 81 (var_type -> id_var_type .)
    COMMA           reduce using rule 81 (var_type -> id_var_type .)
    TGTHAN          reduce using rule 81 (var_type -> id_var_type .)
    LBRACKET        reduce using rule 81 (var_type -> id_var_type .)
    IN              reduce using rule 81 (var_type -> id_var_type .)


state 192

    (76) id_var_type -> ID .

    ID              reduce using rule 76 (id_var_type -> ID .)
    TLTHAN          reduce using rule 76 (id_var_type -> ID .)
    COMMA           reduce using rule 76 (id_var_type -> ID .)
    LBRACKET        reduce using rule 76 (id_var_type -> ID .)
    ASSIGN          reduce using rule 76 (id_var_type -> ID .)
    TGTHAN          reduce using rule 76 (id_var_type -> ID .)
    RPAREN          reduce using rule 76 (id_var_type -> ID .)
    SEMI            reduce using rule 76 (id_var_type -> ID .)
    IN              reduce using rule 76 (id_var_type -> ID .)


state 193

    (83) var_type -> SHORT .

    SEMI            reduce using rule 83 (var_type -> SHORT .)
    ID              reduce using rule 83 (var_type -> SHORT .)
    TLTHAN          reduce using rule 83 (var_type -> SHORT .)
    ASSIGN          reduce using rule 83 (var_type -> SHORT .)
    RPAREN          reduce using rule 83 (var_type -> SHORT .)
    COMMA           reduce using rule 83 (var_type -> SHORT .)
    TGTHAN          reduce using rule 83 (var_type -> SHORT .)
    LBRACKET        reduce using rule 83 (var_type -> SHORT .)
    IN              reduce using rule 83 (var_type -> SHORT .)


state 194

    (82) var_type -> INT .

    SEMI            reduce using rule 82 (var_type -> INT .)
    ID              reduce using rule 82 (var_type -> INT .)
    TLTHAN          reduce using rule 82 (var_type -> INT .)
    ASSIGN          reduce using rule 82 (var_type -> INT .)
    RPAREN          reduce using rule 82 (var_type -> INT .)
    COMMA           reduce using rule 82 (var_type -> INT .)
    TGTHAN          reduce using rule 82 (var_type -> INT .)
    LBRACKET        reduce using rule 82 (var_type -> INT .)
    IN              reduce using rule 82 (var_type -> INT .)


state 195

    (88) var_type -> INFERRED .

    SEMI            reduce using rule 88 (var_type -> INFERRED .)
    ID              reduce using rule 88 (var_type -> INFERRED .)
    TLTHAN          reduce using rule 88 (var_type -> INFERRED .)
    ASSIGN          reduce using rule 88 (var_type -> INFERRED .)
    RPAREN          reduce using rule 88 (var_type -> INFERRED .)
    COMMA           reduce using rule 88 (var_type -> INFERRED .)
    TGTHAN          reduce using rule 88 (var_type -> INFERRED .)
    LBRACKET        reduce using rule 88 (var_type -> INFERRED .)
    IN              reduce using rule 88 (var_type -> INFERRED .)


state 196

    (55) type_modifiers -> type_modifiers CONST .

    UNSIGNED        reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    SIGNED          reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    CONST           reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    INT             reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    SHORT           reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    FLOAT           reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    DOUBLE          reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    CHAR            reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    BYTE            reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    INFERRED        reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    ID              reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    GLOBAL          reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    VAR             reduce using rule 55 (type_modifiers -> type_modifiers CONST .)
    STATIC          reduce using rule 55 (type_modifiers -> type_modifiers CONST .)


state 197

    (86) var_type -> CHAR .

    SEMI            reduce using rule 86 (var_type -> CHAR .)
    ID              reduce using rule 86 (var_type -> CHAR .)
    TLTHAN          reduce using rule 86 (var_type -> CHAR .)
    ASSIGN          reduce using rule 86 (var_type -> CHAR .)
    RPAREN          reduce using rule 86 (var_type -> CHAR .)
    COMMA           reduce using rule 86 (var_type -> CHAR .)
    TGTHAN          reduce using rule 86 (var_type -> CHAR .)
    LBRACKET        reduce using rule 86 (var_type -> CHAR .)
    IN              reduce using rule 86 (var_type -> CHAR .)


state 198

    (85) var_type -> DOUBLE .

    SEMI            reduce using rule 85 (var_type -> DOUBLE .)
    ID              reduce using rule 85 (var_type -> DOUBLE .)
    TLTHAN          reduce using rule 85 (var_type -> DOUBLE .)
    ASSIGN          reduce using rule 85 (var_type -> DOUBLE .)
    RPAREN          reduce using rule 85 (var_type -> DOUBLE .)
    COMMA           reduce using rule 85 (var_type -> DOUBLE .)
    TGTHAN          reduce using rule 85 (var_type -> DOUBLE .)
    LBRACKET        reduce using rule 85 (var_type -> DOUBLE .)
    IN              reduce using rule 85 (var_type -> DOUBLE .)


state 199

    (54) type_modifiers -> type_modifiers SIGNED .

    UNSIGNED        reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    SIGNED          reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    CONST           reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    INT             reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    SHORT           reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    FLOAT           reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    DOUBLE          reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    CHAR            reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    BYTE            reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    INFERRED        reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    ID              reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    GLOBAL          reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    VAR             reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)
    STATIC          reduce using rule 54 (type_modifiers -> type_modifiers SIGNED .)


state 200

    (87) var_type -> BYTE .

    SEMI            reduce using rule 87 (var_type -> BYTE .)
    ID              reduce using rule 87 (var_type -> BYTE .)
    TLTHAN          reduce using rule 87 (var_type -> BYTE .)
    ASSIGN          reduce using rule 87 (var_type -> BYTE .)
    RPAREN          reduce using rule 87 (var_type -> BYTE .)
    COMMA           reduce using rule 87 (var_type -> BYTE .)
    TGTHAN          reduce using rule 87 (var_type -> BYTE .)
    LBRACKET        reduce using rule 87 (var_type -> BYTE .)
    IN              reduce using rule 87 (var_type -> BYTE .)


state 201

    (72) var_decl -> type_modifiers var_type .
    (80) var_type -> var_type . id_var_type
    (89) var_type -> var_type . template_ref
    (76) id_var_type -> . ID
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 72 (var_decl -> type_modifiers var_type .)
    ASSIGN          reduce using rule 72 (var_decl -> type_modifiers var_type .)
    COMMA           reduce using rule 72 (var_decl -> type_modifiers var_type .)
    IN              reduce using rule 72 (var_decl -> type_modifiers var_type .)
    ID              shift and go to state 192
    TLTHAN          shift and go to state 10

    lthan_restrict                 shift and go to state 13
    id_var_type                    shift and go to state 281
    template_ref                   shift and go to state 282

state 202

    (53) type_modifiers -> type_modifiers UNSIGNED .

    UNSIGNED        reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    SIGNED          reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    CONST           reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    INT             reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    SHORT           reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    FLOAT           reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    DOUBLE          reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    CHAR            reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    BYTE            reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    INFERRED        reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    ID              reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    GLOBAL          reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    VAR             reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)
    STATIC          reduce using rule 53 (type_modifiers -> type_modifiers UNSIGNED .)


state 203

    (23) statement -> continue SEMI .
    (41) statement_nonctrl -> continue SEMI .

  ! reduce/reduce conflict for SEMI resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for CLASS resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for IF resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for ELSE resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for WHILE resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for WITH resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DO resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for FOR resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for RETURN resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for YIELD resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for BREAK resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for THROW resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for TRY resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for CATCH resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for SWITCH resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NATIVE resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NUMBER resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for ID resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DELETE resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LSBRACKET resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LPAREN resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for MINUS resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NOT resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for BITINV resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for NEW resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for INC resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DEC resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for REGEXPR resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for VAR resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for STATIC resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for TLTHAN resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for CASE resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 23 (statement -> continue SEMI .)
  ! reduce/reduce conflict for $end resolved using rule 23 (statement -> continue SEMI .)
    SEMI            reduce using rule 23 (statement -> continue SEMI .)
    FUNCTION        reduce using rule 23 (statement -> continue SEMI .)
    CLASS           reduce using rule 23 (statement -> continue SEMI .)
    IF              reduce using rule 23 (statement -> continue SEMI .)
    ELSE            reduce using rule 23 (statement -> continue SEMI .)
    WHILE           reduce using rule 23 (statement -> continue SEMI .)
    WITH            reduce using rule 23 (statement -> continue SEMI .)
    DO              reduce using rule 23 (statement -> continue SEMI .)
    FOR             reduce using rule 23 (statement -> continue SEMI .)
    RETURN          reduce using rule 23 (statement -> continue SEMI .)
    YIELD           reduce using rule 23 (statement -> continue SEMI .)
    BREAK           reduce using rule 23 (statement -> continue SEMI .)
    CONTINUE        reduce using rule 23 (statement -> continue SEMI .)
    THROW           reduce using rule 23 (statement -> continue SEMI .)
    TRY             reduce using rule 23 (statement -> continue SEMI .)
    CATCH           reduce using rule 23 (statement -> continue SEMI .)
    SWITCH          reduce using rule 23 (statement -> continue SEMI .)
    NATIVE          reduce using rule 23 (statement -> continue SEMI .)
    NUMBER          reduce using rule 23 (statement -> continue SEMI .)
    ID              reduce using rule 23 (statement -> continue SEMI .)
    DELETE          reduce using rule 23 (statement -> continue SEMI .)
    STRINGLIT       reduce using rule 23 (statement -> continue SEMI .)
    LSBRACKET       reduce using rule 23 (statement -> continue SEMI .)
    LPAREN          reduce using rule 23 (statement -> continue SEMI .)
    MINUS           reduce using rule 23 (statement -> continue SEMI .)
    NOT             reduce using rule 23 (statement -> continue SEMI .)
    BITINV          reduce using rule 23 (statement -> continue SEMI .)
    NEW             reduce using rule 23 (statement -> continue SEMI .)
    INC             reduce using rule 23 (statement -> continue SEMI .)
    DEC             reduce using rule 23 (statement -> continue SEMI .)
    TYPEOF          reduce using rule 23 (statement -> continue SEMI .)
    REGEXPR         reduce using rule 23 (statement -> continue SEMI .)
    GLOBAL          reduce using rule 23 (statement -> continue SEMI .)
    VAR             reduce using rule 23 (statement -> continue SEMI .)
    STATIC          reduce using rule 23 (statement -> continue SEMI .)
    TLTHAN          reduce using rule 23 (statement -> continue SEMI .)
    LBRACKET        reduce using rule 23 (statement -> continue SEMI .)
    RBRACKET        reduce using rule 23 (statement -> continue SEMI .)
    $end            reduce using rule 23 (statement -> continue SEMI .)
    CASE            reduce using rule 23 (statement -> continue SEMI .)
    DEFAULT         reduce using rule 23 (statement -> continue SEMI .)

  ! SEMI            [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! FUNCTION        [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! CLASS           [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! IF              [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! ELSE            [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! WHILE           [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! WITH            [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! DO              [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! FOR             [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! RETURN          [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! YIELD           [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! BREAK           [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! CONTINUE        [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! THROW           [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! TRY             [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! CATCH           [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! SWITCH          [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! NATIVE          [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! NUMBER          [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! ID              [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! DELETE          [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! STRINGLIT       [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! LSBRACKET       [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! LPAREN          [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! MINUS           [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! NOT             [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! BITINV          [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! NEW             [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! INC             [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! DEC             [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! TYPEOF          [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! REGEXPR         [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! GLOBAL          [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! VAR             [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! STATIC          [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! TLTHAN          [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! LBRACKET        [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! RBRACKET        [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! CASE            [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! DEFAULT         [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]
  ! $end            [ reduce using rule 41 (statement_nonctrl -> continue SEMI .) ]


state 204

    (261) with -> WITH paren_expr . ctrl_statement
    (244) ctrl_statement -> . statement_nonctrl
    (245) ctrl_statement -> . LBRACKET statementlist_opt RBRACKET
    (246) ctrl_statement -> . SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 162
    SEMI            shift and go to state 160
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    FUNCTION        shift and go to state 97
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    FOR             shift and go to state 35
    DO              shift and go to state 54
    WHILE           shift and go to state 31
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10

    while                          shift and go to state 96
    expr                           shift and go to state 19
    if                             shift and go to state 90
    dec                            shift and go to state 45
    for                            shift and go to state 91
    expr_uminus                    shift and go to state 47
    catch                          shift and go to state 93
    typeof                         shift and go to state 75
    break                          shift and go to state 98
    lthan_restrict                 shift and go to state 13
    funcref                        shift and go to state 15
    exprfunction                   shift and go to state 17
    dowhile                        shift and go to state 99
    delete                         shift and go to state 58
    throw                          shift and go to state 92
    try                            shift and go to state 100
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    array_literal                  shift and go to state 66
    var_decl                       shift and go to state 74
    template_ref                   shift and go to state 5
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 102
    else                           shift and go to state 103
    return                         shift and go to state 94
    bitinv                         shift and go to state 7
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    ctrl_statement                 shift and go to state 283
    re_lit                         shift and go to state 32
    inc                            shift and go to state 37
    yield                          shift and go to state 95
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 163

state 205

    (173) dec -> DEC expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    RSHIFT          reduce using rule 173 (dec -> DEC expr .)
    LSHIFT          reduce using rule 173 (dec -> DEC expr .)
    LLSHIFT         reduce using rule 173 (dec -> DEC expr .)
    RRSHIFT         reduce using rule 173 (dec -> DEC expr .)
    LAND            reduce using rule 173 (dec -> DEC expr .)
    LOR             reduce using rule 173 (dec -> DEC expr .)
    BOR             reduce using rule 173 (dec -> DEC expr .)
    INSTANCEOF      reduce using rule 173 (dec -> DEC expr .)
    BXOR            reduce using rule 173 (dec -> DEC expr .)
    BAND            reduce using rule 173 (dec -> DEC expr .)
    EQUAL           reduce using rule 173 (dec -> DEC expr .)
    EQUAL_STRICT    reduce using rule 173 (dec -> DEC expr .)
    NOTEQUAL_STRICT reduce using rule 173 (dec -> DEC expr .)
    GTHAN           reduce using rule 173 (dec -> DEC expr .)
    GTHANEQ         reduce using rule 173 (dec -> DEC expr .)
    LTHAN           reduce using rule 173 (dec -> DEC expr .)
    MOD             reduce using rule 173 (dec -> DEC expr .)
    LTHANEQ         reduce using rule 173 (dec -> DEC expr .)
    NOTEQUAL        reduce using rule 173 (dec -> DEC expr .)
    PLUS            reduce using rule 173 (dec -> DEC expr .)
    MINUS           reduce using rule 173 (dec -> DEC expr .)
    DIVIDE          reduce using rule 173 (dec -> DEC expr .)
    TIMES           reduce using rule 173 (dec -> DEC expr .)
    IN              reduce using rule 173 (dec -> DEC expr .)
    QEST            reduce using rule 173 (dec -> DEC expr .)
    COMMA           reduce using rule 173 (dec -> DEC expr .)
    INC             reduce using rule 173 (dec -> DEC expr .)
    DEC             reduce using rule 173 (dec -> DEC expr .)
    ASSIGNPLUS      reduce using rule 173 (dec -> DEC expr .)
    ASSIGNMINUS     reduce using rule 173 (dec -> DEC expr .)
    ASSIGNDIVIDE    reduce using rule 173 (dec -> DEC expr .)
    ASSIGNTIMES     reduce using rule 173 (dec -> DEC expr .)
    ASSIGNBOR       reduce using rule 173 (dec -> DEC expr .)
    ASSIGNBAND      reduce using rule 173 (dec -> DEC expr .)
    ASSIGNBXOR      reduce using rule 173 (dec -> DEC expr .)
    ASSIGNLSHIFT    reduce using rule 173 (dec -> DEC expr .)
    ASSIGNRSHIFT    reduce using rule 173 (dec -> DEC expr .)
    ASSIGNRRSHIFT   reduce using rule 173 (dec -> DEC expr .)
    ASSIGNLLSHIFT   reduce using rule 173 (dec -> DEC expr .)
    ASSIGN          reduce using rule 173 (dec -> DEC expr .)
    LSBRACKET       reduce using rule 173 (dec -> DEC expr .)
    TLTHAN          reduce using rule 173 (dec -> DEC expr .)
    SEMI            reduce using rule 173 (dec -> DEC expr .)
    COLON           reduce using rule 173 (dec -> DEC expr .)
    RPAREN          reduce using rule 173 (dec -> DEC expr .)
    RSBRACKET       reduce using rule 173 (dec -> DEC expr .)
    RBRACKET        reduce using rule 173 (dec -> DEC expr .)
    DOT             shift and go to state 117
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 173 (dec -> DEC expr .) ]
  ! LPAREN          [ reduce using rule 173 (dec -> DEC expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! PLUS            [ shift and go to state 152 ]
  ! MINUS           [ shift and go to state 132 ]
  ! DIVIDE          [ shift and go to state 135 ]
  ! TIMES           [ shift and go to state 113 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! INC             [ shift and go to state 118 ]
  ! DEC             [ shift and go to state 149 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! LSBRACKET       [ shift and go to state 111 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 206

    (73) var_decl -> var_decl ASSIGN . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 284
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 207

    (30) statement_nonctrl -> var_decl SEMI .

    SEMI            reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    FUNCTION        reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    CLASS           reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    IF              reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    ELSE            reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    WHILE           reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    WITH            reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    DO              reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    FOR             reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    RETURN          reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    YIELD           reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    BREAK           reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    CONTINUE        reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    THROW           reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    TRY             reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    CATCH           reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    SWITCH          reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    NATIVE          reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    NUMBER          reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    ID              reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    DELETE          reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    STRINGLIT       reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    LSBRACKET       reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    LPAREN          reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    MINUS           reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    NOT             reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    BITINV          reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    NEW             reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    INC             reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    DEC             reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    TYPEOF          reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    REGEXPR         reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    GLOBAL          reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    VAR             reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    STATIC          reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    TLTHAN          reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    LBRACKET        reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    RBRACKET        reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    $end            reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    CASE            reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)
    DEFAULT         reduce using rule 30 (statement_nonctrl -> var_decl SEMI .)


state 208

    (74) var_decl -> var_decl COMMA . ID
    (75) var_decl -> var_decl COMMA . ID ASSIGN expr

    ID              shift and go to state 285


state 209

    (230) paren_expr -> LPAREN expr . RPAREN
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    RPAREN          shift and go to state 286
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 210

    (231) paren_expr -> LPAREN RPAREN .

    LBRACKET        reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    SEMI            reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    NUMBER          reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    ID              reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    IF              reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    ELSE            reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    FOR             reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    DO              reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    WHILE           reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    RETURN          reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    YIELD           reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    BREAK           reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    THROW           reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    TRY             reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    CATCH           reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    DELETE          reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    STRINGLIT       reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    LSBRACKET       reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    LPAREN          reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    MINUS           reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    NOT             reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    BITINV          reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    NEW             reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    INC             reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    DEC             reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    TYPEOF          reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    REGEXPR         reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    GLOBAL          reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    VAR             reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    STATIC          reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    TLTHAN          reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    CLASS           reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    WITH            reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    SWITCH          reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    NATIVE          reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    $end            reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    CASE            reduce using rule 231 (paren_expr -> LPAREN RPAREN .)
    DEFAULT         reduce using rule 231 (paren_expr -> LPAREN RPAREN .)


state 211

    (260) switch -> SWITCH paren_expr LBRACKET . case_block RBRACKET
    (258) case_block -> . case_clauses
    (259) case_block -> . case_clauses_opt default_case case_clauses_opt
    (254) case_clauses -> . case_clause
    (255) case_clauses -> . case_clauses case_clause
    (256) case_clauses_opt -> . case_clauses
    (257) case_clauses_opt -> .
    (253) case_clause -> . CASE expr COLON statementlist_opt

    DEFAULT         reduce using rule 257 (case_clauses_opt -> .)
    CASE            shift and go to state 289

    case_clauses                   shift and go to state 288
    case_clause                    shift and go to state 287
    case_block                     shift and go to state 291
    case_clauses_opt               shift and go to state 290

state 212

    (114) class -> CLASS ID template_opt . class_tail
    (116) class_tail -> . class_heritage_opt LBRACKET class_body_opt RBRACKET
    (120) class_heritage_opt -> . class_heritage
    (121) class_heritage_opt -> .
    (119) class_heritage -> . EXTENDS class_list

    LBRACKET        reduce using rule 121 (class_heritage_opt -> .)
    EXTENDS         shift and go to state 294

    class_tail                     shift and go to state 292
    class_heritage                 shift and go to state 293
    class_heritage_opt             shift and go to state 295

state 213

    (92) simple_templatedeflist -> typeof_opt var_type .
    (80) var_type -> var_type . id_var_type
    (89) var_type -> var_type . template_ref
    (76) id_var_type -> . ID
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 92 (simple_templatedeflist -> typeof_opt var_type .)
    TGTHAN          reduce using rule 92 (simple_templatedeflist -> typeof_opt var_type .)
    ID              shift and go to state 192
    TLTHAN          shift and go to state 10

    id_var_type                    shift and go to state 281
    template_ref                   shift and go to state 282
    lthan_restrict                 shift and go to state 13

state 214

    (67) gthan_restrict -> TGTHAN .

    SEMI            reduce using rule 67 (gthan_restrict -> TGTHAN .)
    RSHIFT          reduce using rule 67 (gthan_restrict -> TGTHAN .)
    LSHIFT          reduce using rule 67 (gthan_restrict -> TGTHAN .)
    LLSHIFT         reduce using rule 67 (gthan_restrict -> TGTHAN .)
    RRSHIFT         reduce using rule 67 (gthan_restrict -> TGTHAN .)
    DOT             reduce using rule 67 (gthan_restrict -> TGTHAN .)
    LAND            reduce using rule 67 (gthan_restrict -> TGTHAN .)
    LOR             reduce using rule 67 (gthan_restrict -> TGTHAN .)
    BOR             reduce using rule 67 (gthan_restrict -> TGTHAN .)
    INSTANCEOF      reduce using rule 67 (gthan_restrict -> TGTHAN .)
    BXOR            reduce using rule 67 (gthan_restrict -> TGTHAN .)
    BAND            reduce using rule 67 (gthan_restrict -> TGTHAN .)
    EQUAL           reduce using rule 67 (gthan_restrict -> TGTHAN .)
    EQUAL_STRICT    reduce using rule 67 (gthan_restrict -> TGTHAN .)
    NOTEQUAL_STRICT reduce using rule 67 (gthan_restrict -> TGTHAN .)
    GTHAN           reduce using rule 67 (gthan_restrict -> TGTHAN .)
    GTHANEQ         reduce using rule 67 (gthan_restrict -> TGTHAN .)
    LTHAN           reduce using rule 67 (gthan_restrict -> TGTHAN .)
    MOD             reduce using rule 67 (gthan_restrict -> TGTHAN .)
    LTHANEQ         reduce using rule 67 (gthan_restrict -> TGTHAN .)
    NOTEQUAL        reduce using rule 67 (gthan_restrict -> TGTHAN .)
    PLUS            reduce using rule 67 (gthan_restrict -> TGTHAN .)
    MINUS           reduce using rule 67 (gthan_restrict -> TGTHAN .)
    DIVIDE          reduce using rule 67 (gthan_restrict -> TGTHAN .)
    TIMES           reduce using rule 67 (gthan_restrict -> TGTHAN .)
    IN              reduce using rule 67 (gthan_restrict -> TGTHAN .)
    QEST            reduce using rule 67 (gthan_restrict -> TGTHAN .)
    COMMA           reduce using rule 67 (gthan_restrict -> TGTHAN .)
    INC             reduce using rule 67 (gthan_restrict -> TGTHAN .)
    DEC             reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ASSIGNPLUS      reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ASSIGNMINUS     reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ASSIGNDIVIDE    reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ASSIGNTIMES     reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ASSIGNBOR       reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ASSIGNBAND      reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ASSIGNBXOR      reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ASSIGNLSHIFT    reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ASSIGNRSHIFT    reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ASSIGNRRSHIFT   reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ASSIGNLLSHIFT   reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ASSIGN          reduce using rule 67 (gthan_restrict -> TGTHAN .)
    LSBRACKET       reduce using rule 67 (gthan_restrict -> TGTHAN .)
    TLTHAN          reduce using rule 67 (gthan_restrict -> TGTHAN .)
    LPAREN          reduce using rule 67 (gthan_restrict -> TGTHAN .)
    RPAREN          reduce using rule 67 (gthan_restrict -> TGTHAN .)
    RSBRACKET       reduce using rule 67 (gthan_restrict -> TGTHAN .)
    COLON           reduce using rule 67 (gthan_restrict -> TGTHAN .)
    RBRACKET        reduce using rule 67 (gthan_restrict -> TGTHAN .)
    ID              reduce using rule 67 (gthan_restrict -> TGTHAN .)
    TGTHAN          reduce using rule 67 (gthan_restrict -> TGTHAN .)
    LBRACKET        reduce using rule 67 (gthan_restrict -> TGTHAN .)
    EXTENDS         reduce using rule 67 (gthan_restrict -> TGTHAN .)


state 215

    (62) template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .

    ID              reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    TLTHAN          reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    SEMI            reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGN          reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    COMMA           reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    IN              reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RSHIFT          reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LSHIFT          reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LLSHIFT         reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RRSHIFT         reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    DOT             reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LAND            reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LOR             reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    BOR             reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    INSTANCEOF      reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    BXOR            reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    BAND            reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    EQUAL           reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    EQUAL_STRICT    reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    NOTEQUAL_STRICT reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    GTHAN           reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    GTHANEQ         reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LTHAN           reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    MOD             reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LTHANEQ         reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    NOTEQUAL        reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    PLUS            reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    MINUS           reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    DIVIDE          reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    TIMES           reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    QEST            reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    INC             reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    DEC             reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNPLUS      reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNMINUS     reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNDIVIDE    reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNTIMES     reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNBOR       reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNBAND      reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNBXOR      reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNLSHIFT    reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNRSHIFT    reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNRRSHIFT   reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    ASSIGNLLSHIFT   reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LSBRACKET       reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LPAREN          reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RPAREN          reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RSBRACKET       reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    COLON           reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    RBRACKET        reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    TGTHAN          reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)
    LBRACKET        reduce using rule 62 (template_ref -> lthan_restrict simple_templatedeflist gthan_restrict .)


state 216

    (93) simple_templatedeflist -> simple_templatedeflist COMMA . typeof_opt var_type
    (90) typeof_opt -> . TYPEOF
    (91) typeof_opt -> .

    TYPEOF          shift and go to state 88
    INT             reduce using rule 91 (typeof_opt -> .)
    SHORT           reduce using rule 91 (typeof_opt -> .)
    FLOAT           reduce using rule 91 (typeof_opt -> .)
    DOUBLE          reduce using rule 91 (typeof_opt -> .)
    CHAR            reduce using rule 91 (typeof_opt -> .)
    BYTE            reduce using rule 91 (typeof_opt -> .)
    INFERRED        reduce using rule 91 (typeof_opt -> .)
    ID              reduce using rule 91 (typeof_opt -> .)

    typeof_opt                     shift and go to state 296

state 217

    (42) statement_nonctrl -> throw SEMI .

    SEMI            reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    FUNCTION        reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    CLASS           reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    IF              reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    ELSE            reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    WHILE           reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    WITH            reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    DO              reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    FOR             reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    RETURN          reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    YIELD           reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    BREAK           reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    CONTINUE        reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    THROW           reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    TRY             reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    CATCH           reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    SWITCH          reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    NATIVE          reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    NUMBER          reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    ID              reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    DELETE          reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    STRINGLIT       reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    LSBRACKET       reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    LPAREN          reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    MINUS           reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    NOT             reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    BITINV          reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    NEW             reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    INC             reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    DEC             reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    TYPEOF          reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    REGEXPR         reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    GLOBAL          reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    VAR             reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    STATIC          reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    TLTHAN          reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    LBRACKET        reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    $end            reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    RBRACKET        reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    CASE            reduce using rule 42 (statement_nonctrl -> throw SEMI .)
    DEFAULT         reduce using rule 42 (statement_nonctrl -> throw SEMI .)


state 218

    (38) statement_nonctrl -> return SEMI .

    SEMI            reduce using rule 38 (statement_nonctrl -> return SEMI .)
    FUNCTION        reduce using rule 38 (statement_nonctrl -> return SEMI .)
    CLASS           reduce using rule 38 (statement_nonctrl -> return SEMI .)
    IF              reduce using rule 38 (statement_nonctrl -> return SEMI .)
    ELSE            reduce using rule 38 (statement_nonctrl -> return SEMI .)
    WHILE           reduce using rule 38 (statement_nonctrl -> return SEMI .)
    WITH            reduce using rule 38 (statement_nonctrl -> return SEMI .)
    DO              reduce using rule 38 (statement_nonctrl -> return SEMI .)
    FOR             reduce using rule 38 (statement_nonctrl -> return SEMI .)
    RETURN          reduce using rule 38 (statement_nonctrl -> return SEMI .)
    YIELD           reduce using rule 38 (statement_nonctrl -> return SEMI .)
    BREAK           reduce using rule 38 (statement_nonctrl -> return SEMI .)
    CONTINUE        reduce using rule 38 (statement_nonctrl -> return SEMI .)
    THROW           reduce using rule 38 (statement_nonctrl -> return SEMI .)
    TRY             reduce using rule 38 (statement_nonctrl -> return SEMI .)
    CATCH           reduce using rule 38 (statement_nonctrl -> return SEMI .)
    SWITCH          reduce using rule 38 (statement_nonctrl -> return SEMI .)
    NATIVE          reduce using rule 38 (statement_nonctrl -> return SEMI .)
    NUMBER          reduce using rule 38 (statement_nonctrl -> return SEMI .)
    ID              reduce using rule 38 (statement_nonctrl -> return SEMI .)
    DELETE          reduce using rule 38 (statement_nonctrl -> return SEMI .)
    STRINGLIT       reduce using rule 38 (statement_nonctrl -> return SEMI .)
    LSBRACKET       reduce using rule 38 (statement_nonctrl -> return SEMI .)
    LPAREN          reduce using rule 38 (statement_nonctrl -> return SEMI .)
    MINUS           reduce using rule 38 (statement_nonctrl -> return SEMI .)
    NOT             reduce using rule 38 (statement_nonctrl -> return SEMI .)
    BITINV          reduce using rule 38 (statement_nonctrl -> return SEMI .)
    NEW             reduce using rule 38 (statement_nonctrl -> return SEMI .)
    INC             reduce using rule 38 (statement_nonctrl -> return SEMI .)
    DEC             reduce using rule 38 (statement_nonctrl -> return SEMI .)
    TYPEOF          reduce using rule 38 (statement_nonctrl -> return SEMI .)
    REGEXPR         reduce using rule 38 (statement_nonctrl -> return SEMI .)
    GLOBAL          reduce using rule 38 (statement_nonctrl -> return SEMI .)
    VAR             reduce using rule 38 (statement_nonctrl -> return SEMI .)
    STATIC          reduce using rule 38 (statement_nonctrl -> return SEMI .)
    TLTHAN          reduce using rule 38 (statement_nonctrl -> return SEMI .)
    LBRACKET        reduce using rule 38 (statement_nonctrl -> return SEMI .)
    $end            reduce using rule 38 (statement_nonctrl -> return SEMI .)
    RBRACKET        reduce using rule 38 (statement_nonctrl -> return SEMI .)
    CASE            reduce using rule 38 (statement_nonctrl -> return SEMI .)
    DEFAULT         reduce using rule 38 (statement_nonctrl -> return SEMI .)


state 219

    (39) statement_nonctrl -> yield SEMI .

    SEMI            reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    FUNCTION        reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    CLASS           reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    IF              reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    ELSE            reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    WHILE           reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    WITH            reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    DO              reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    FOR             reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    RETURN          reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    YIELD           reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    BREAK           reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    CONTINUE        reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    THROW           reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    TRY             reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    CATCH           reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    SWITCH          reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    NATIVE          reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    NUMBER          reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    ID              reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    DELETE          reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    STRINGLIT       reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    LSBRACKET       reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    LPAREN          reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    MINUS           reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    NOT             reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    BITINV          reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    NEW             reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    INC             reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    DEC             reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    TYPEOF          reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    REGEXPR         reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    GLOBAL          reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    VAR             reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    STATIC          reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    TLTHAN          reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    LBRACKET        reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    $end            reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    RBRACKET        reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    CASE            reduce using rule 39 (statement_nonctrl -> yield SEMI .)
    DEFAULT         reduce using rule 39 (statement_nonctrl -> yield SEMI .)


state 220

    (146) funcref -> FUNCTION ID . template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (142) template_opt -> . template
    (143) template_opt -> .
    (52) template -> . lthan_restrict templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 143 (template_opt -> .)
    TLTHAN          shift and go to state 10

    template_opt                   shift and go to state 297
    template                       shift and go to state 173
    lthan_restrict                 shift and go to state 174

state 221

    (40) statement_nonctrl -> break SEMI .

    SEMI            reduce using rule 40 (statement_nonctrl -> break SEMI .)
    FUNCTION        reduce using rule 40 (statement_nonctrl -> break SEMI .)
    CLASS           reduce using rule 40 (statement_nonctrl -> break SEMI .)
    IF              reduce using rule 40 (statement_nonctrl -> break SEMI .)
    ELSE            reduce using rule 40 (statement_nonctrl -> break SEMI .)
    WHILE           reduce using rule 40 (statement_nonctrl -> break SEMI .)
    WITH            reduce using rule 40 (statement_nonctrl -> break SEMI .)
    DO              reduce using rule 40 (statement_nonctrl -> break SEMI .)
    FOR             reduce using rule 40 (statement_nonctrl -> break SEMI .)
    RETURN          reduce using rule 40 (statement_nonctrl -> break SEMI .)
    YIELD           reduce using rule 40 (statement_nonctrl -> break SEMI .)
    BREAK           reduce using rule 40 (statement_nonctrl -> break SEMI .)
    CONTINUE        reduce using rule 40 (statement_nonctrl -> break SEMI .)
    THROW           reduce using rule 40 (statement_nonctrl -> break SEMI .)
    TRY             reduce using rule 40 (statement_nonctrl -> break SEMI .)
    CATCH           reduce using rule 40 (statement_nonctrl -> break SEMI .)
    SWITCH          reduce using rule 40 (statement_nonctrl -> break SEMI .)
    NATIVE          reduce using rule 40 (statement_nonctrl -> break SEMI .)
    NUMBER          reduce using rule 40 (statement_nonctrl -> break SEMI .)
    ID              reduce using rule 40 (statement_nonctrl -> break SEMI .)
    DELETE          reduce using rule 40 (statement_nonctrl -> break SEMI .)
    STRINGLIT       reduce using rule 40 (statement_nonctrl -> break SEMI .)
    LSBRACKET       reduce using rule 40 (statement_nonctrl -> break SEMI .)
    LPAREN          reduce using rule 40 (statement_nonctrl -> break SEMI .)
    MINUS           reduce using rule 40 (statement_nonctrl -> break SEMI .)
    NOT             reduce using rule 40 (statement_nonctrl -> break SEMI .)
    BITINV          reduce using rule 40 (statement_nonctrl -> break SEMI .)
    NEW             reduce using rule 40 (statement_nonctrl -> break SEMI .)
    INC             reduce using rule 40 (statement_nonctrl -> break SEMI .)
    DEC             reduce using rule 40 (statement_nonctrl -> break SEMI .)
    TYPEOF          reduce using rule 40 (statement_nonctrl -> break SEMI .)
    REGEXPR         reduce using rule 40 (statement_nonctrl -> break SEMI .)
    GLOBAL          reduce using rule 40 (statement_nonctrl -> break SEMI .)
    VAR             reduce using rule 40 (statement_nonctrl -> break SEMI .)
    STATIC          reduce using rule 40 (statement_nonctrl -> break SEMI .)
    TLTHAN          reduce using rule 40 (statement_nonctrl -> break SEMI .)
    LBRACKET        reduce using rule 40 (statement_nonctrl -> break SEMI .)
    $end            reduce using rule 40 (statement_nonctrl -> break SEMI .)
    RBRACKET        reduce using rule 40 (statement_nonctrl -> break SEMI .)
    CASE            reduce using rule 40 (statement_nonctrl -> break SEMI .)
    DEFAULT         reduce using rule 40 (statement_nonctrl -> break SEMI .)


state 222

    (264) try -> TRY LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    RBRACKET        shift and go to state 298
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    while                          shift and go to state 41
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 157
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 158

state 223

    (265) try -> TRY LBRACKET RBRACKET .

    SEMI            reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    FUNCTION        reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    CLASS           reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    IF              reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    ELSE            reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    WHILE           reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    WITH            reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    DO              reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    FOR             reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    RETURN          reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    YIELD           reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    BREAK           reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    CONTINUE        reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    THROW           reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    TRY             reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    CATCH           reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    SWITCH          reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    NATIVE          reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    NUMBER          reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    ID              reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    DELETE          reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    STRINGLIT       reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    LSBRACKET       reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    LPAREN          reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    MINUS           reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    NOT             reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    BITINV          reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    NEW             reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    INC             reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    DEC             reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    TYPEOF          reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    REGEXPR         reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    GLOBAL          reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    VAR             reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    STATIC          reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    TLTHAN          reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    CASE            reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    $end            reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)
    DEFAULT         reduce using rule 265 (try -> TRY LBRACKET RBRACKET .)


state 224

    (41) statement_nonctrl -> continue SEMI .

    SEMI            reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    FUNCTION        reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    CLASS           reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    IF              reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    ELSE            reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    WHILE           reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    WITH            reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    DO              reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    FOR             reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    RETURN          reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    YIELD           reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    BREAK           reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    CONTINUE        reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    THROW           reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    TRY             reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    CATCH           reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    SWITCH          reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    NATIVE          reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    NUMBER          reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    ID              reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    DELETE          reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    STRINGLIT       reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    LSBRACKET       reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    LPAREN          reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    MINUS           reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    NOT             reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    BITINV          reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    NEW             reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    INC             reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    DEC             reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    TYPEOF          reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    REGEXPR         reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    GLOBAL          reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    VAR             reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    STATIC          reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    TLTHAN          reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    LBRACKET        reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    $end            reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    RBRACKET        reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    CASE            reduce using rule 41 (statement_nonctrl -> continue SEMI .)
    DEFAULT         reduce using rule 41 (statement_nonctrl -> continue SEMI .)


state 225

    (200) expr -> expr BXOR expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 200 (expr -> expr BXOR expr .)
    LAND            reduce using rule 200 (expr -> expr BXOR expr .)
    LOR             reduce using rule 200 (expr -> expr BXOR expr .)
    BOR             reduce using rule 200 (expr -> expr BXOR expr .)
    BXOR            reduce using rule 200 (expr -> expr BXOR expr .)
    BAND            reduce using rule 200 (expr -> expr BXOR expr .)
    MOD             reduce using rule 200 (expr -> expr BXOR expr .)
    QEST            reduce using rule 200 (expr -> expr BXOR expr .)
    COMMA           reduce using rule 200 (expr -> expr BXOR expr .)
    ASSIGNPLUS      reduce using rule 200 (expr -> expr BXOR expr .)
    ASSIGNMINUS     reduce using rule 200 (expr -> expr BXOR expr .)
    ASSIGNDIVIDE    reduce using rule 200 (expr -> expr BXOR expr .)
    ASSIGNTIMES     reduce using rule 200 (expr -> expr BXOR expr .)
    ASSIGNBOR       reduce using rule 200 (expr -> expr BXOR expr .)
    ASSIGNBAND      reduce using rule 200 (expr -> expr BXOR expr .)
    ASSIGNBXOR      reduce using rule 200 (expr -> expr BXOR expr .)
    ASSIGNLSHIFT    reduce using rule 200 (expr -> expr BXOR expr .)
    ASSIGNRSHIFT    reduce using rule 200 (expr -> expr BXOR expr .)
    ASSIGNRRSHIFT   reduce using rule 200 (expr -> expr BXOR expr .)
    ASSIGNLLSHIFT   reduce using rule 200 (expr -> expr BXOR expr .)
    ASSIGN          reduce using rule 200 (expr -> expr BXOR expr .)
    TLTHAN          reduce using rule 200 (expr -> expr BXOR expr .)
    RPAREN          reduce using rule 200 (expr -> expr BXOR expr .)
    RSBRACKET       reduce using rule 200 (expr -> expr BXOR expr .)
    COLON           reduce using rule 200 (expr -> expr BXOR expr .)
    RBRACKET        reduce using rule 200 (expr -> expr BXOR expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    INSTANCEOF      shift and go to state 150
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! LSHIFT          [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! LLSHIFT         [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! RRSHIFT         [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! DOT             [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! EQUAL           [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! GTHAN           [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! GTHANEQ         [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! LTHAN           [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! LTHANEQ         [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! NOTEQUAL        [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! PLUS            [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! MINUS           [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! DIVIDE          [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! TIMES           [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! IN              [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! INC             [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! DEC             [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! LSBRACKET       [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! LPAREN          [ reduce using rule 200 (expr -> expr BXOR expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! MOD             [ shift and go to state 123 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 226

    (192) expr -> expr LSHIFT expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 192 (expr -> expr LSHIFT expr .)
    RSHIFT          reduce using rule 192 (expr -> expr LSHIFT expr .)
    LSHIFT          reduce using rule 192 (expr -> expr LSHIFT expr .)
    LLSHIFT         reduce using rule 192 (expr -> expr LSHIFT expr .)
    RRSHIFT         reduce using rule 192 (expr -> expr LSHIFT expr .)
    LAND            reduce using rule 192 (expr -> expr LSHIFT expr .)
    LOR             reduce using rule 192 (expr -> expr LSHIFT expr .)
    BOR             reduce using rule 192 (expr -> expr LSHIFT expr .)
    INSTANCEOF      reduce using rule 192 (expr -> expr LSHIFT expr .)
    BXOR            reduce using rule 192 (expr -> expr LSHIFT expr .)
    BAND            reduce using rule 192 (expr -> expr LSHIFT expr .)
    EQUAL           reduce using rule 192 (expr -> expr LSHIFT expr .)
    EQUAL_STRICT    reduce using rule 192 (expr -> expr LSHIFT expr .)
    NOTEQUAL_STRICT reduce using rule 192 (expr -> expr LSHIFT expr .)
    GTHAN           reduce using rule 192 (expr -> expr LSHIFT expr .)
    GTHANEQ         reduce using rule 192 (expr -> expr LSHIFT expr .)
    LTHAN           reduce using rule 192 (expr -> expr LSHIFT expr .)
    MOD             reduce using rule 192 (expr -> expr LSHIFT expr .)
    LTHANEQ         reduce using rule 192 (expr -> expr LSHIFT expr .)
    NOTEQUAL        reduce using rule 192 (expr -> expr LSHIFT expr .)
    IN              reduce using rule 192 (expr -> expr LSHIFT expr .)
    QEST            reduce using rule 192 (expr -> expr LSHIFT expr .)
    COMMA           reduce using rule 192 (expr -> expr LSHIFT expr .)
    ASSIGNPLUS      reduce using rule 192 (expr -> expr LSHIFT expr .)
    ASSIGNMINUS     reduce using rule 192 (expr -> expr LSHIFT expr .)
    ASSIGNDIVIDE    reduce using rule 192 (expr -> expr LSHIFT expr .)
    ASSIGNTIMES     reduce using rule 192 (expr -> expr LSHIFT expr .)
    ASSIGNBOR       reduce using rule 192 (expr -> expr LSHIFT expr .)
    ASSIGNBAND      reduce using rule 192 (expr -> expr LSHIFT expr .)
    ASSIGNBXOR      reduce using rule 192 (expr -> expr LSHIFT expr .)
    ASSIGNLSHIFT    reduce using rule 192 (expr -> expr LSHIFT expr .)
    ASSIGNRSHIFT    reduce using rule 192 (expr -> expr LSHIFT expr .)
    ASSIGNRRSHIFT   reduce using rule 192 (expr -> expr LSHIFT expr .)
    ASSIGNLLSHIFT   reduce using rule 192 (expr -> expr LSHIFT expr .)
    ASSIGN          reduce using rule 192 (expr -> expr LSHIFT expr .)
    TLTHAN          reduce using rule 192 (expr -> expr LSHIFT expr .)
    RPAREN          reduce using rule 192 (expr -> expr LSHIFT expr .)
    RSBRACKET       reduce using rule 192 (expr -> expr LSHIFT expr .)
    COLON           reduce using rule 192 (expr -> expr LSHIFT expr .)
    RBRACKET        reduce using rule 192 (expr -> expr LSHIFT expr .)
    DOT             shift and go to state 117
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 192 (expr -> expr LSHIFT expr .) ]
  ! PLUS            [ reduce using rule 192 (expr -> expr LSHIFT expr .) ]
  ! MINUS           [ reduce using rule 192 (expr -> expr LSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 192 (expr -> expr LSHIFT expr .) ]
  ! TIMES           [ reduce using rule 192 (expr -> expr LSHIFT expr .) ]
  ! INC             [ reduce using rule 192 (expr -> expr LSHIFT expr .) ]
  ! DEC             [ reduce using rule 192 (expr -> expr LSHIFT expr .) ]
  ! LSBRACKET       [ reduce using rule 192 (expr -> expr LSHIFT expr .) ]
  ! LPAREN          [ reduce using rule 192 (expr -> expr LSHIFT expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 227

    (215) expr -> expr IN expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 215 (expr -> expr IN expr .)
    LAND            reduce using rule 215 (expr -> expr IN expr .)
    LOR             reduce using rule 215 (expr -> expr IN expr .)
    BOR             reduce using rule 215 (expr -> expr IN expr .)
    INSTANCEOF      reduce using rule 215 (expr -> expr IN expr .)
    BXOR            reduce using rule 215 (expr -> expr IN expr .)
    BAND            reduce using rule 215 (expr -> expr IN expr .)
    EQUAL           reduce using rule 215 (expr -> expr IN expr .)
    EQUAL_STRICT    reduce using rule 215 (expr -> expr IN expr .)
    NOTEQUAL_STRICT reduce using rule 215 (expr -> expr IN expr .)
    GTHAN           reduce using rule 215 (expr -> expr IN expr .)
    GTHANEQ         reduce using rule 215 (expr -> expr IN expr .)
    LTHAN           reduce using rule 215 (expr -> expr IN expr .)
    MOD             reduce using rule 215 (expr -> expr IN expr .)
    LTHANEQ         reduce using rule 215 (expr -> expr IN expr .)
    NOTEQUAL        reduce using rule 215 (expr -> expr IN expr .)
    IN              reduce using rule 215 (expr -> expr IN expr .)
    QEST            reduce using rule 215 (expr -> expr IN expr .)
    COMMA           reduce using rule 215 (expr -> expr IN expr .)
    ASSIGNPLUS      reduce using rule 215 (expr -> expr IN expr .)
    ASSIGNMINUS     reduce using rule 215 (expr -> expr IN expr .)
    ASSIGNDIVIDE    reduce using rule 215 (expr -> expr IN expr .)
    ASSIGNTIMES     reduce using rule 215 (expr -> expr IN expr .)
    ASSIGNBOR       reduce using rule 215 (expr -> expr IN expr .)
    ASSIGNBAND      reduce using rule 215 (expr -> expr IN expr .)
    ASSIGNBXOR      reduce using rule 215 (expr -> expr IN expr .)
    ASSIGNLSHIFT    reduce using rule 215 (expr -> expr IN expr .)
    ASSIGNRSHIFT    reduce using rule 215 (expr -> expr IN expr .)
    ASSIGNRRSHIFT   reduce using rule 215 (expr -> expr IN expr .)
    ASSIGNLLSHIFT   reduce using rule 215 (expr -> expr IN expr .)
    ASSIGN          reduce using rule 215 (expr -> expr IN expr .)
    TLTHAN          reduce using rule 215 (expr -> expr IN expr .)
    RPAREN          reduce using rule 215 (expr -> expr IN expr .)
    RSBRACKET       reduce using rule 215 (expr -> expr IN expr .)
    COLON           reduce using rule 215 (expr -> expr IN expr .)
    RBRACKET        reduce using rule 215 (expr -> expr IN expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! LSHIFT          [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! LLSHIFT         [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! RRSHIFT         [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! DOT             [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! PLUS            [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! MINUS           [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! DIVIDE          [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! TIMES           [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! INC             [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! DEC             [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! LSBRACKET       [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! LPAREN          [ reduce using rule 215 (expr -> expr IN expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 228

    (218) expr -> expr lsbracket_restrict expr . rsbracket_restrict
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (180) rsbracket_restrict -> . RSBRACKET
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    RSBRACKET       shift and go to state 299
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    rsbracket_restrict             shift and go to state 300
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 229

    (214) expr -> expr TIMES expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 214 (expr -> expr TIMES expr .)
    RSHIFT          reduce using rule 214 (expr -> expr TIMES expr .)
    LSHIFT          reduce using rule 214 (expr -> expr TIMES expr .)
    LLSHIFT         reduce using rule 214 (expr -> expr TIMES expr .)
    RRSHIFT         reduce using rule 214 (expr -> expr TIMES expr .)
    LAND            reduce using rule 214 (expr -> expr TIMES expr .)
    LOR             reduce using rule 214 (expr -> expr TIMES expr .)
    BOR             reduce using rule 214 (expr -> expr TIMES expr .)
    INSTANCEOF      reduce using rule 214 (expr -> expr TIMES expr .)
    BXOR            reduce using rule 214 (expr -> expr TIMES expr .)
    BAND            reduce using rule 214 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 214 (expr -> expr TIMES expr .)
    EQUAL_STRICT    reduce using rule 214 (expr -> expr TIMES expr .)
    NOTEQUAL_STRICT reduce using rule 214 (expr -> expr TIMES expr .)
    GTHAN           reduce using rule 214 (expr -> expr TIMES expr .)
    GTHANEQ         reduce using rule 214 (expr -> expr TIMES expr .)
    LTHAN           reduce using rule 214 (expr -> expr TIMES expr .)
    MOD             reduce using rule 214 (expr -> expr TIMES expr .)
    LTHANEQ         reduce using rule 214 (expr -> expr TIMES expr .)
    NOTEQUAL        reduce using rule 214 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 214 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 214 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 214 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 214 (expr -> expr TIMES expr .)
    IN              reduce using rule 214 (expr -> expr TIMES expr .)
    QEST            reduce using rule 214 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 214 (expr -> expr TIMES expr .)
    ASSIGNPLUS      reduce using rule 214 (expr -> expr TIMES expr .)
    ASSIGNMINUS     reduce using rule 214 (expr -> expr TIMES expr .)
    ASSIGNDIVIDE    reduce using rule 214 (expr -> expr TIMES expr .)
    ASSIGNTIMES     reduce using rule 214 (expr -> expr TIMES expr .)
    ASSIGNBOR       reduce using rule 214 (expr -> expr TIMES expr .)
    ASSIGNBAND      reduce using rule 214 (expr -> expr TIMES expr .)
    ASSIGNBXOR      reduce using rule 214 (expr -> expr TIMES expr .)
    ASSIGNLSHIFT    reduce using rule 214 (expr -> expr TIMES expr .)
    ASSIGNRSHIFT    reduce using rule 214 (expr -> expr TIMES expr .)
    ASSIGNRRSHIFT   reduce using rule 214 (expr -> expr TIMES expr .)
    ASSIGNLLSHIFT   reduce using rule 214 (expr -> expr TIMES expr .)
    ASSIGN          reduce using rule 214 (expr -> expr TIMES expr .)
    TLTHAN          reduce using rule 214 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 214 (expr -> expr TIMES expr .)
    RSBRACKET       reduce using rule 214 (expr -> expr TIMES expr .)
    COLON           reduce using rule 214 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 214 (expr -> expr TIMES expr .)
    DOT             shift and go to state 117
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 214 (expr -> expr TIMES expr .) ]
  ! INC             [ reduce using rule 214 (expr -> expr TIMES expr .) ]
  ! DEC             [ reduce using rule 214 (expr -> expr TIMES expr .) ]
  ! LSBRACKET       [ reduce using rule 214 (expr -> expr TIMES expr .) ]
  ! LPAREN          [ reduce using rule 214 (expr -> expr TIMES expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! PLUS            [ shift and go to state 152 ]
  ! MINUS           [ shift and go to state 132 ]
  ! DIVIDE          [ shift and go to state 135 ]
  ! TIMES           [ shift and go to state 113 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 230

    (195) expr -> expr DOT expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 195 (expr -> expr DOT expr .)
    RSHIFT          reduce using rule 195 (expr -> expr DOT expr .)
    LSHIFT          reduce using rule 195 (expr -> expr DOT expr .)
    LLSHIFT         reduce using rule 195 (expr -> expr DOT expr .)
    RRSHIFT         reduce using rule 195 (expr -> expr DOT expr .)
    DOT             reduce using rule 195 (expr -> expr DOT expr .)
    LAND            reduce using rule 195 (expr -> expr DOT expr .)
    LOR             reduce using rule 195 (expr -> expr DOT expr .)
    BOR             reduce using rule 195 (expr -> expr DOT expr .)
    INSTANCEOF      reduce using rule 195 (expr -> expr DOT expr .)
    BXOR            reduce using rule 195 (expr -> expr DOT expr .)
    BAND            reduce using rule 195 (expr -> expr DOT expr .)
    EQUAL           reduce using rule 195 (expr -> expr DOT expr .)
    EQUAL_STRICT    reduce using rule 195 (expr -> expr DOT expr .)
    NOTEQUAL_STRICT reduce using rule 195 (expr -> expr DOT expr .)
    GTHAN           reduce using rule 195 (expr -> expr DOT expr .)
    GTHANEQ         reduce using rule 195 (expr -> expr DOT expr .)
    LTHAN           reduce using rule 195 (expr -> expr DOT expr .)
    MOD             reduce using rule 195 (expr -> expr DOT expr .)
    LTHANEQ         reduce using rule 195 (expr -> expr DOT expr .)
    NOTEQUAL        reduce using rule 195 (expr -> expr DOT expr .)
    PLUS            reduce using rule 195 (expr -> expr DOT expr .)
    MINUS           reduce using rule 195 (expr -> expr DOT expr .)
    DIVIDE          reduce using rule 195 (expr -> expr DOT expr .)
    TIMES           reduce using rule 195 (expr -> expr DOT expr .)
    IN              reduce using rule 195 (expr -> expr DOT expr .)
    QEST            reduce using rule 195 (expr -> expr DOT expr .)
    COMMA           reduce using rule 195 (expr -> expr DOT expr .)
    INC             reduce using rule 195 (expr -> expr DOT expr .)
    DEC             reduce using rule 195 (expr -> expr DOT expr .)
    ASSIGNPLUS      reduce using rule 195 (expr -> expr DOT expr .)
    ASSIGNMINUS     reduce using rule 195 (expr -> expr DOT expr .)
    ASSIGNDIVIDE    reduce using rule 195 (expr -> expr DOT expr .)
    ASSIGNTIMES     reduce using rule 195 (expr -> expr DOT expr .)
    ASSIGNBOR       reduce using rule 195 (expr -> expr DOT expr .)
    ASSIGNBAND      reduce using rule 195 (expr -> expr DOT expr .)
    ASSIGNBXOR      reduce using rule 195 (expr -> expr DOT expr .)
    ASSIGNLSHIFT    reduce using rule 195 (expr -> expr DOT expr .)
    ASSIGNRSHIFT    reduce using rule 195 (expr -> expr DOT expr .)
    ASSIGNRRSHIFT   reduce using rule 195 (expr -> expr DOT expr .)
    ASSIGNLLSHIFT   reduce using rule 195 (expr -> expr DOT expr .)
    ASSIGN          reduce using rule 195 (expr -> expr DOT expr .)
    LSBRACKET       reduce using rule 195 (expr -> expr DOT expr .)
    TLTHAN          reduce using rule 195 (expr -> expr DOT expr .)
    RPAREN          reduce using rule 195 (expr -> expr DOT expr .)
    RSBRACKET       reduce using rule 195 (expr -> expr DOT expr .)
    COLON           reduce using rule 195 (expr -> expr DOT expr .)
    RBRACKET        reduce using rule 195 (expr -> expr DOT expr .)
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! LPAREN          [ reduce using rule 195 (expr -> expr DOT expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! DOT             [ shift and go to state 117 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! PLUS            [ shift and go to state 152 ]
  ! MINUS           [ shift and go to state 132 ]
  ! DIVIDE          [ shift and go to state 135 ]
  ! TIMES           [ shift and go to state 113 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! INC             [ shift and go to state 118 ]
  ! DEC             [ shift and go to state 149 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! LSBRACKET       [ shift and go to state 111 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 231

    (198) expr -> expr BOR expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 198 (expr -> expr BOR expr .)
    LAND            reduce using rule 198 (expr -> expr BOR expr .)
    LOR             reduce using rule 198 (expr -> expr BOR expr .)
    BOR             reduce using rule 198 (expr -> expr BOR expr .)
    BXOR            reduce using rule 198 (expr -> expr BOR expr .)
    BAND            reduce using rule 198 (expr -> expr BOR expr .)
    MOD             reduce using rule 198 (expr -> expr BOR expr .)
    QEST            reduce using rule 198 (expr -> expr BOR expr .)
    COMMA           reduce using rule 198 (expr -> expr BOR expr .)
    ASSIGNPLUS      reduce using rule 198 (expr -> expr BOR expr .)
    ASSIGNMINUS     reduce using rule 198 (expr -> expr BOR expr .)
    ASSIGNDIVIDE    reduce using rule 198 (expr -> expr BOR expr .)
    ASSIGNTIMES     reduce using rule 198 (expr -> expr BOR expr .)
    ASSIGNBOR       reduce using rule 198 (expr -> expr BOR expr .)
    ASSIGNBAND      reduce using rule 198 (expr -> expr BOR expr .)
    ASSIGNBXOR      reduce using rule 198 (expr -> expr BOR expr .)
    ASSIGNLSHIFT    reduce using rule 198 (expr -> expr BOR expr .)
    ASSIGNRSHIFT    reduce using rule 198 (expr -> expr BOR expr .)
    ASSIGNRRSHIFT   reduce using rule 198 (expr -> expr BOR expr .)
    ASSIGNLLSHIFT   reduce using rule 198 (expr -> expr BOR expr .)
    ASSIGN          reduce using rule 198 (expr -> expr BOR expr .)
    TLTHAN          reduce using rule 198 (expr -> expr BOR expr .)
    RPAREN          reduce using rule 198 (expr -> expr BOR expr .)
    RSBRACKET       reduce using rule 198 (expr -> expr BOR expr .)
    COLON           reduce using rule 198 (expr -> expr BOR expr .)
    RBRACKET        reduce using rule 198 (expr -> expr BOR expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    INSTANCEOF      shift and go to state 150
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! LSHIFT          [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! LLSHIFT         [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! RRSHIFT         [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! DOT             [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! EQUAL           [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! GTHAN           [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! GTHANEQ         [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! LTHAN           [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! LTHANEQ         [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! NOTEQUAL        [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! PLUS            [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! MINUS           [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! DIVIDE          [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! TIMES           [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! IN              [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! INC             [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! DEC             [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! LSBRACKET       [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! LPAREN          [ reduce using rule 198 (expr -> expr BOR expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! MOD             [ shift and go to state 123 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 232

    (209) expr -> expr LTHANEQ expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 209 (expr -> expr LTHANEQ expr .)
    LAND            reduce using rule 209 (expr -> expr LTHANEQ expr .)
    LOR             reduce using rule 209 (expr -> expr LTHANEQ expr .)
    BOR             reduce using rule 209 (expr -> expr LTHANEQ expr .)
    BXOR            reduce using rule 209 (expr -> expr LTHANEQ expr .)
    BAND            reduce using rule 209 (expr -> expr LTHANEQ expr .)
    EQUAL           reduce using rule 209 (expr -> expr LTHANEQ expr .)
    EQUAL_STRICT    reduce using rule 209 (expr -> expr LTHANEQ expr .)
    NOTEQUAL_STRICT reduce using rule 209 (expr -> expr LTHANEQ expr .)
    GTHAN           reduce using rule 209 (expr -> expr LTHANEQ expr .)
    GTHANEQ         reduce using rule 209 (expr -> expr LTHANEQ expr .)
    LTHAN           reduce using rule 209 (expr -> expr LTHANEQ expr .)
    MOD             reduce using rule 209 (expr -> expr LTHANEQ expr .)
    LTHANEQ         reduce using rule 209 (expr -> expr LTHANEQ expr .)
    NOTEQUAL        reduce using rule 209 (expr -> expr LTHANEQ expr .)
    QEST            reduce using rule 209 (expr -> expr LTHANEQ expr .)
    COMMA           reduce using rule 209 (expr -> expr LTHANEQ expr .)
    ASSIGNPLUS      reduce using rule 209 (expr -> expr LTHANEQ expr .)
    ASSIGNMINUS     reduce using rule 209 (expr -> expr LTHANEQ expr .)
    ASSIGNDIVIDE    reduce using rule 209 (expr -> expr LTHANEQ expr .)
    ASSIGNTIMES     reduce using rule 209 (expr -> expr LTHANEQ expr .)
    ASSIGNBOR       reduce using rule 209 (expr -> expr LTHANEQ expr .)
    ASSIGNBAND      reduce using rule 209 (expr -> expr LTHANEQ expr .)
    ASSIGNBXOR      reduce using rule 209 (expr -> expr LTHANEQ expr .)
    ASSIGNLSHIFT    reduce using rule 209 (expr -> expr LTHANEQ expr .)
    ASSIGNRSHIFT    reduce using rule 209 (expr -> expr LTHANEQ expr .)
    ASSIGNRRSHIFT   reduce using rule 209 (expr -> expr LTHANEQ expr .)
    ASSIGNLLSHIFT   reduce using rule 209 (expr -> expr LTHANEQ expr .)
    ASSIGN          reduce using rule 209 (expr -> expr LTHANEQ expr .)
    TLTHAN          reduce using rule 209 (expr -> expr LTHANEQ expr .)
    RPAREN          reduce using rule 209 (expr -> expr LTHANEQ expr .)
    RSBRACKET       reduce using rule 209 (expr -> expr LTHANEQ expr .)
    COLON           reduce using rule 209 (expr -> expr LTHANEQ expr .)
    RBRACKET        reduce using rule 209 (expr -> expr LTHANEQ expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    INSTANCEOF      shift and go to state 150
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! LSHIFT          [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! LLSHIFT         [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! RRSHIFT         [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! DOT             [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! INSTANCEOF      [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! PLUS            [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! MINUS           [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! DIVIDE          [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! TIMES           [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! IN              [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! INC             [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! DEC             [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! LSBRACKET       [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! LPAREN          [ reduce using rule 209 (expr -> expr LTHANEQ expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 233

    (210) expr -> expr NOTEQUAL expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    LAND            reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    LOR             reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    BOR             reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    BXOR            reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    BAND            reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    EQUAL           reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    EQUAL_STRICT    reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    NOTEQUAL_STRICT reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    GTHAN           reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    GTHANEQ         reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    LTHAN           reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    MOD             reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    LTHANEQ         reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    NOTEQUAL        reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    QEST            reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    COMMA           reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    ASSIGNPLUS      reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    ASSIGNMINUS     reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    ASSIGNDIVIDE    reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    ASSIGNTIMES     reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    ASSIGNBOR       reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    ASSIGNBAND      reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    ASSIGNBXOR      reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    ASSIGNLSHIFT    reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    ASSIGNRSHIFT    reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    ASSIGNRRSHIFT   reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    ASSIGNLLSHIFT   reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    ASSIGN          reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    TLTHAN          reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    RPAREN          reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    RSBRACKET       reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    COLON           reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    RBRACKET        reduce using rule 210 (expr -> expr NOTEQUAL expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    INSTANCEOF      shift and go to state 150
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! LLSHIFT         [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! RRSHIFT         [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! DOT             [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! PLUS            [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! MINUS           [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! TIMES           [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! IN              [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! INC             [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! DEC             [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! LSBRACKET       [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! LPAREN          [ reduce using rule 210 (expr -> expr NOTEQUAL expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 234

    (204) expr -> expr NOTEQUAL_STRICT expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    LAND            reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    LOR             reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    BOR             reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    BXOR            reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    BAND            reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    EQUAL           reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    EQUAL_STRICT    reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    NOTEQUAL_STRICT reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    GTHAN           reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    GTHANEQ         reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    LTHAN           reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    MOD             reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    LTHANEQ         reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    NOTEQUAL        reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    QEST            reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    COMMA           reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNPLUS      reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNMINUS     reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNDIVIDE    reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNTIMES     reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNBOR       reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNBAND      reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNBXOR      reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNLSHIFT    reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNRSHIFT    reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNRRSHIFT   reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGNLLSHIFT   reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    ASSIGN          reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    TLTHAN          reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    RPAREN          reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    RSBRACKET       reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    COLON           reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    RBRACKET        reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    INSTANCEOF      shift and go to state 150
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LSHIFT          [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LLSHIFT         [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! RRSHIFT         [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! DOT             [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! INSTANCEOF      [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! PLUS            [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! MINUS           [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! DIVIDE          [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! TIMES           [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! IN              [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! INC             [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! DEC             [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LSBRACKET       [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LPAREN          [ reduce using rule 204 (expr -> expr NOTEQUAL_STRICT expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 235

    (208) expr -> expr MOD expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for LLSHIFT resolved as shift
  ! shift/reduce conflict for RRSHIFT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for INSTANCEOF resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_STRICT resolved as shift
  ! shift/reduce conflict for NOTEQUAL_STRICT resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for QEST resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for ASSIGNPLUS resolved as shift
  ! shift/reduce conflict for ASSIGNMINUS resolved as shift
  ! shift/reduce conflict for ASSIGNDIVIDE resolved as shift
  ! shift/reduce conflict for ASSIGNTIMES resolved as shift
  ! shift/reduce conflict for ASSIGNBOR resolved as shift
  ! shift/reduce conflict for ASSIGNBAND resolved as shift
  ! shift/reduce conflict for ASSIGNBXOR resolved as shift
  ! shift/reduce conflict for ASSIGNLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNLLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
  ! shift/reduce conflict for TLTHAN resolved as shift
    SEMI            reduce using rule 208 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 208 (expr -> expr MOD expr .)
    RSBRACKET       reduce using rule 208 (expr -> expr MOD expr .)
    COLON           reduce using rule 208 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 208 (expr -> expr MOD expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

  ! RSHIFT          [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! LSHIFT          [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! LLSHIFT         [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! RRSHIFT         [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! DOT             [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! LAND            [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! LOR             [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! BOR             [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! INSTANCEOF      [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! BXOR            [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! BAND            [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! EQUAL           [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! GTHAN           [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! GTHANEQ         [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! LTHAN           [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! MOD             [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! LTHANEQ         [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! NOTEQUAL        [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! PLUS            [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! MINUS           [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! DIVIDE          [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! TIMES           [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! IN              [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! QEST            [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! COMMA           [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! INC             [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! DEC             [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! ASSIGNPLUS      [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! ASSIGNBOR       [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! ASSIGNBAND      [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! ASSIGNLSHIFT    [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! ASSIGNRSHIFT    [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! ASSIGNRRSHIFT   [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! ASSIGNLLSHIFT   [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! ASSIGN          [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! LSBRACKET       [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! TLTHAN          [ reduce using rule 208 (expr -> expr MOD expr .) ]
  ! LPAREN          [ reduce using rule 208 (expr -> expr MOD expr .) ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 236

    (197) expr -> expr LOR expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 197 (expr -> expr LOR expr .)
    LAND            reduce using rule 197 (expr -> expr LOR expr .)
    LOR             reduce using rule 197 (expr -> expr LOR expr .)
    MOD             reduce using rule 197 (expr -> expr LOR expr .)
    QEST            reduce using rule 197 (expr -> expr LOR expr .)
    COMMA           reduce using rule 197 (expr -> expr LOR expr .)
    ASSIGNPLUS      reduce using rule 197 (expr -> expr LOR expr .)
    ASSIGNMINUS     reduce using rule 197 (expr -> expr LOR expr .)
    ASSIGNDIVIDE    reduce using rule 197 (expr -> expr LOR expr .)
    ASSIGNTIMES     reduce using rule 197 (expr -> expr LOR expr .)
    ASSIGNBOR       reduce using rule 197 (expr -> expr LOR expr .)
    ASSIGNBAND      reduce using rule 197 (expr -> expr LOR expr .)
    ASSIGNBXOR      reduce using rule 197 (expr -> expr LOR expr .)
    ASSIGNLSHIFT    reduce using rule 197 (expr -> expr LOR expr .)
    ASSIGNRSHIFT    reduce using rule 197 (expr -> expr LOR expr .)
    ASSIGNRRSHIFT   reduce using rule 197 (expr -> expr LOR expr .)
    ASSIGNLLSHIFT   reduce using rule 197 (expr -> expr LOR expr .)
    ASSIGN          reduce using rule 197 (expr -> expr LOR expr .)
    TLTHAN          reduce using rule 197 (expr -> expr LOR expr .)
    RPAREN          reduce using rule 197 (expr -> expr LOR expr .)
    RSBRACKET       reduce using rule 197 (expr -> expr LOR expr .)
    COLON           reduce using rule 197 (expr -> expr LOR expr .)
    RBRACKET        reduce using rule 197 (expr -> expr LOR expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! LSHIFT          [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! LLSHIFT         [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! RRSHIFT         [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! DOT             [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! BOR             [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! INSTANCEOF      [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! BXOR            [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! BAND            [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! EQUAL           [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! GTHAN           [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! GTHANEQ         [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! LTHAN           [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! LTHANEQ         [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! NOTEQUAL        [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! PLUS            [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! MINUS           [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! DIVIDE          [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! TIMES           [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! IN              [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! INC             [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! DEC             [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! LSBRACKET       [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! LPAREN          [ reduce using rule 197 (expr -> expr LOR expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 123 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 237

    (137) func_call -> template_ref_opt LPAREN . exprlist RPAREN
    (138) func_call -> template_ref_opt LPAREN . RPAREN
    (112) exprlist -> . expr
    (113) exprlist -> . exprlist COMMA expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    RPAREN          shift and go to state 302
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    exprlist                       shift and go to state 301
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 183
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 238

    (205) expr -> expr GTHAN expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 205 (expr -> expr GTHAN expr .)
    LAND            reduce using rule 205 (expr -> expr GTHAN expr .)
    LOR             reduce using rule 205 (expr -> expr GTHAN expr .)
    BOR             reduce using rule 205 (expr -> expr GTHAN expr .)
    BXOR            reduce using rule 205 (expr -> expr GTHAN expr .)
    BAND            reduce using rule 205 (expr -> expr GTHAN expr .)
    EQUAL           reduce using rule 205 (expr -> expr GTHAN expr .)
    EQUAL_STRICT    reduce using rule 205 (expr -> expr GTHAN expr .)
    NOTEQUAL_STRICT reduce using rule 205 (expr -> expr GTHAN expr .)
    GTHAN           reduce using rule 205 (expr -> expr GTHAN expr .)
    GTHANEQ         reduce using rule 205 (expr -> expr GTHAN expr .)
    LTHAN           reduce using rule 205 (expr -> expr GTHAN expr .)
    MOD             reduce using rule 205 (expr -> expr GTHAN expr .)
    LTHANEQ         reduce using rule 205 (expr -> expr GTHAN expr .)
    NOTEQUAL        reduce using rule 205 (expr -> expr GTHAN expr .)
    QEST            reduce using rule 205 (expr -> expr GTHAN expr .)
    COMMA           reduce using rule 205 (expr -> expr GTHAN expr .)
    ASSIGNPLUS      reduce using rule 205 (expr -> expr GTHAN expr .)
    ASSIGNMINUS     reduce using rule 205 (expr -> expr GTHAN expr .)
    ASSIGNDIVIDE    reduce using rule 205 (expr -> expr GTHAN expr .)
    ASSIGNTIMES     reduce using rule 205 (expr -> expr GTHAN expr .)
    ASSIGNBOR       reduce using rule 205 (expr -> expr GTHAN expr .)
    ASSIGNBAND      reduce using rule 205 (expr -> expr GTHAN expr .)
    ASSIGNBXOR      reduce using rule 205 (expr -> expr GTHAN expr .)
    ASSIGNLSHIFT    reduce using rule 205 (expr -> expr GTHAN expr .)
    ASSIGNRSHIFT    reduce using rule 205 (expr -> expr GTHAN expr .)
    ASSIGNRRSHIFT   reduce using rule 205 (expr -> expr GTHAN expr .)
    ASSIGNLLSHIFT   reduce using rule 205 (expr -> expr GTHAN expr .)
    ASSIGN          reduce using rule 205 (expr -> expr GTHAN expr .)
    TLTHAN          reduce using rule 205 (expr -> expr GTHAN expr .)
    RPAREN          reduce using rule 205 (expr -> expr GTHAN expr .)
    RSBRACKET       reduce using rule 205 (expr -> expr GTHAN expr .)
    COLON           reduce using rule 205 (expr -> expr GTHAN expr .)
    RBRACKET        reduce using rule 205 (expr -> expr GTHAN expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    INSTANCEOF      shift and go to state 150
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! LSHIFT          [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! LLSHIFT         [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! RRSHIFT         [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! DOT             [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! INSTANCEOF      [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! PLUS            [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! MINUS           [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! DIVIDE          [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! TIMES           [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! IN              [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! INC             [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! DEC             [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! LSBRACKET       [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! LPAREN          [ reduce using rule 205 (expr -> expr GTHAN expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 239

    (219) expr -> expr QEST expr . COLON expr
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    COLON           shift and go to state 303
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 240

    (203) expr -> expr EQUAL_STRICT expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    LAND            reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    LOR             reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    BOR             reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    BXOR            reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    BAND            reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    EQUAL           reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    EQUAL_STRICT    reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    NOTEQUAL_STRICT reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    GTHAN           reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    GTHANEQ         reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    LTHAN           reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    MOD             reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    LTHANEQ         reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    NOTEQUAL        reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    QEST            reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    COMMA           reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNPLUS      reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNMINUS     reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNDIVIDE    reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNTIMES     reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNBOR       reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNBAND      reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNBXOR      reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNLSHIFT    reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNRSHIFT    reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNRRSHIFT   reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    ASSIGNLLSHIFT   reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    ASSIGN          reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    TLTHAN          reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    RPAREN          reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    RSBRACKET       reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    COLON           reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    RBRACKET        reduce using rule 203 (expr -> expr EQUAL_STRICT expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    INSTANCEOF      shift and go to state 150
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! LSHIFT          [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! LLSHIFT         [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! RRSHIFT         [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! DOT             [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! INSTANCEOF      [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! PLUS            [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! MINUS           [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! DIVIDE          [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! TIMES           [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! IN              [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! INC             [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! DEC             [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! LSBRACKET       [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! LPAREN          [ reduce using rule 203 (expr -> expr EQUAL_STRICT expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 241

    (201) expr -> expr BAND expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 201 (expr -> expr BAND expr .)
    LAND            reduce using rule 201 (expr -> expr BAND expr .)
    LOR             reduce using rule 201 (expr -> expr BAND expr .)
    BOR             reduce using rule 201 (expr -> expr BAND expr .)
    BXOR            reduce using rule 201 (expr -> expr BAND expr .)
    BAND            reduce using rule 201 (expr -> expr BAND expr .)
    MOD             reduce using rule 201 (expr -> expr BAND expr .)
    QEST            reduce using rule 201 (expr -> expr BAND expr .)
    COMMA           reduce using rule 201 (expr -> expr BAND expr .)
    ASSIGNPLUS      reduce using rule 201 (expr -> expr BAND expr .)
    ASSIGNMINUS     reduce using rule 201 (expr -> expr BAND expr .)
    ASSIGNDIVIDE    reduce using rule 201 (expr -> expr BAND expr .)
    ASSIGNTIMES     reduce using rule 201 (expr -> expr BAND expr .)
    ASSIGNBOR       reduce using rule 201 (expr -> expr BAND expr .)
    ASSIGNBAND      reduce using rule 201 (expr -> expr BAND expr .)
    ASSIGNBXOR      reduce using rule 201 (expr -> expr BAND expr .)
    ASSIGNLSHIFT    reduce using rule 201 (expr -> expr BAND expr .)
    ASSIGNRSHIFT    reduce using rule 201 (expr -> expr BAND expr .)
    ASSIGNRRSHIFT   reduce using rule 201 (expr -> expr BAND expr .)
    ASSIGNLLSHIFT   reduce using rule 201 (expr -> expr BAND expr .)
    ASSIGN          reduce using rule 201 (expr -> expr BAND expr .)
    TLTHAN          reduce using rule 201 (expr -> expr BAND expr .)
    RPAREN          reduce using rule 201 (expr -> expr BAND expr .)
    RSBRACKET       reduce using rule 201 (expr -> expr BAND expr .)
    COLON           reduce using rule 201 (expr -> expr BAND expr .)
    RBRACKET        reduce using rule 201 (expr -> expr BAND expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    INSTANCEOF      shift and go to state 150
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! LSHIFT          [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! LLSHIFT         [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! RRSHIFT         [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! DOT             [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! INSTANCEOF      [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! EQUAL           [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! GTHAN           [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! GTHANEQ         [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! LTHAN           [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! LTHANEQ         [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! NOTEQUAL        [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! PLUS            [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! MINUS           [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! DIVIDE          [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! TIMES           [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! IN              [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! INC             [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! DEC             [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! LSBRACKET       [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! LPAREN          [ reduce using rule 201 (expr -> expr BAND expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! MOD             [ shift and go to state 123 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 242

    (212) expr -> expr MINUS expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 212 (expr -> expr MINUS expr .)
    RSHIFT          reduce using rule 212 (expr -> expr MINUS expr .)
    LSHIFT          reduce using rule 212 (expr -> expr MINUS expr .)
    LLSHIFT         reduce using rule 212 (expr -> expr MINUS expr .)
    RRSHIFT         reduce using rule 212 (expr -> expr MINUS expr .)
    LAND            reduce using rule 212 (expr -> expr MINUS expr .)
    LOR             reduce using rule 212 (expr -> expr MINUS expr .)
    BOR             reduce using rule 212 (expr -> expr MINUS expr .)
    INSTANCEOF      reduce using rule 212 (expr -> expr MINUS expr .)
    BXOR            reduce using rule 212 (expr -> expr MINUS expr .)
    BAND            reduce using rule 212 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 212 (expr -> expr MINUS expr .)
    EQUAL_STRICT    reduce using rule 212 (expr -> expr MINUS expr .)
    NOTEQUAL_STRICT reduce using rule 212 (expr -> expr MINUS expr .)
    GTHAN           reduce using rule 212 (expr -> expr MINUS expr .)
    GTHANEQ         reduce using rule 212 (expr -> expr MINUS expr .)
    LTHAN           reduce using rule 212 (expr -> expr MINUS expr .)
    MOD             reduce using rule 212 (expr -> expr MINUS expr .)
    LTHANEQ         reduce using rule 212 (expr -> expr MINUS expr .)
    NOTEQUAL        reduce using rule 212 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 212 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 212 (expr -> expr MINUS expr .)
    IN              reduce using rule 212 (expr -> expr MINUS expr .)
    QEST            reduce using rule 212 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 212 (expr -> expr MINUS expr .)
    ASSIGNPLUS      reduce using rule 212 (expr -> expr MINUS expr .)
    ASSIGNMINUS     reduce using rule 212 (expr -> expr MINUS expr .)
    ASSIGNDIVIDE    reduce using rule 212 (expr -> expr MINUS expr .)
    ASSIGNTIMES     reduce using rule 212 (expr -> expr MINUS expr .)
    ASSIGNBOR       reduce using rule 212 (expr -> expr MINUS expr .)
    ASSIGNBAND      reduce using rule 212 (expr -> expr MINUS expr .)
    ASSIGNBXOR      reduce using rule 212 (expr -> expr MINUS expr .)
    ASSIGNLSHIFT    reduce using rule 212 (expr -> expr MINUS expr .)
    ASSIGNRSHIFT    reduce using rule 212 (expr -> expr MINUS expr .)
    ASSIGNRRSHIFT   reduce using rule 212 (expr -> expr MINUS expr .)
    ASSIGNLLSHIFT   reduce using rule 212 (expr -> expr MINUS expr .)
    ASSIGN          reduce using rule 212 (expr -> expr MINUS expr .)
    TLTHAN          reduce using rule 212 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 212 (expr -> expr MINUS expr .)
    RSBRACKET       reduce using rule 212 (expr -> expr MINUS expr .)
    COLON           reduce using rule 212 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 212 (expr -> expr MINUS expr .)
    DOT             shift and go to state 117
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 212 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 212 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 212 (expr -> expr MINUS expr .) ]
  ! INC             [ reduce using rule 212 (expr -> expr MINUS expr .) ]
  ! DEC             [ reduce using rule 212 (expr -> expr MINUS expr .) ]
  ! LSBRACKET       [ reduce using rule 212 (expr -> expr MINUS expr .) ]
  ! LPAREN          [ reduce using rule 212 (expr -> expr MINUS expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! PLUS            [ shift and go to state 152 ]
  ! MINUS           [ shift and go to state 132 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 243

    (193) expr -> expr LLSHIFT expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 193 (expr -> expr LLSHIFT expr .)
    RSHIFT          reduce using rule 193 (expr -> expr LLSHIFT expr .)
    LSHIFT          reduce using rule 193 (expr -> expr LLSHIFT expr .)
    LLSHIFT         reduce using rule 193 (expr -> expr LLSHIFT expr .)
    RRSHIFT         reduce using rule 193 (expr -> expr LLSHIFT expr .)
    LAND            reduce using rule 193 (expr -> expr LLSHIFT expr .)
    LOR             reduce using rule 193 (expr -> expr LLSHIFT expr .)
    BOR             reduce using rule 193 (expr -> expr LLSHIFT expr .)
    INSTANCEOF      reduce using rule 193 (expr -> expr LLSHIFT expr .)
    BXOR            reduce using rule 193 (expr -> expr LLSHIFT expr .)
    BAND            reduce using rule 193 (expr -> expr LLSHIFT expr .)
    EQUAL           reduce using rule 193 (expr -> expr LLSHIFT expr .)
    EQUAL_STRICT    reduce using rule 193 (expr -> expr LLSHIFT expr .)
    NOTEQUAL_STRICT reduce using rule 193 (expr -> expr LLSHIFT expr .)
    GTHAN           reduce using rule 193 (expr -> expr LLSHIFT expr .)
    GTHANEQ         reduce using rule 193 (expr -> expr LLSHIFT expr .)
    LTHAN           reduce using rule 193 (expr -> expr LLSHIFT expr .)
    MOD             reduce using rule 193 (expr -> expr LLSHIFT expr .)
    LTHANEQ         reduce using rule 193 (expr -> expr LLSHIFT expr .)
    NOTEQUAL        reduce using rule 193 (expr -> expr LLSHIFT expr .)
    IN              reduce using rule 193 (expr -> expr LLSHIFT expr .)
    QEST            reduce using rule 193 (expr -> expr LLSHIFT expr .)
    COMMA           reduce using rule 193 (expr -> expr LLSHIFT expr .)
    ASSIGNPLUS      reduce using rule 193 (expr -> expr LLSHIFT expr .)
    ASSIGNMINUS     reduce using rule 193 (expr -> expr LLSHIFT expr .)
    ASSIGNDIVIDE    reduce using rule 193 (expr -> expr LLSHIFT expr .)
    ASSIGNTIMES     reduce using rule 193 (expr -> expr LLSHIFT expr .)
    ASSIGNBOR       reduce using rule 193 (expr -> expr LLSHIFT expr .)
    ASSIGNBAND      reduce using rule 193 (expr -> expr LLSHIFT expr .)
    ASSIGNBXOR      reduce using rule 193 (expr -> expr LLSHIFT expr .)
    ASSIGNLSHIFT    reduce using rule 193 (expr -> expr LLSHIFT expr .)
    ASSIGNRSHIFT    reduce using rule 193 (expr -> expr LLSHIFT expr .)
    ASSIGNRRSHIFT   reduce using rule 193 (expr -> expr LLSHIFT expr .)
    ASSIGNLLSHIFT   reduce using rule 193 (expr -> expr LLSHIFT expr .)
    ASSIGN          reduce using rule 193 (expr -> expr LLSHIFT expr .)
    TLTHAN          reduce using rule 193 (expr -> expr LLSHIFT expr .)
    RPAREN          reduce using rule 193 (expr -> expr LLSHIFT expr .)
    RSBRACKET       reduce using rule 193 (expr -> expr LLSHIFT expr .)
    COLON           reduce using rule 193 (expr -> expr LLSHIFT expr .)
    RBRACKET        reduce using rule 193 (expr -> expr LLSHIFT expr .)
    DOT             shift and go to state 117
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 193 (expr -> expr LLSHIFT expr .) ]
  ! PLUS            [ reduce using rule 193 (expr -> expr LLSHIFT expr .) ]
  ! MINUS           [ reduce using rule 193 (expr -> expr LLSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 193 (expr -> expr LLSHIFT expr .) ]
  ! TIMES           [ reduce using rule 193 (expr -> expr LLSHIFT expr .) ]
  ! INC             [ reduce using rule 193 (expr -> expr LLSHIFT expr .) ]
  ! DEC             [ reduce using rule 193 (expr -> expr LLSHIFT expr .) ]
  ! LSBRACKET       [ reduce using rule 193 (expr -> expr LLSHIFT expr .) ]
  ! LPAREN          [ reduce using rule 193 (expr -> expr LLSHIFT expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 244

    (213) expr -> expr DIVIDE expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 213 (expr -> expr DIVIDE expr .)
    RSHIFT          reduce using rule 213 (expr -> expr DIVIDE expr .)
    LSHIFT          reduce using rule 213 (expr -> expr DIVIDE expr .)
    LLSHIFT         reduce using rule 213 (expr -> expr DIVIDE expr .)
    RRSHIFT         reduce using rule 213 (expr -> expr DIVIDE expr .)
    LAND            reduce using rule 213 (expr -> expr DIVIDE expr .)
    LOR             reduce using rule 213 (expr -> expr DIVIDE expr .)
    BOR             reduce using rule 213 (expr -> expr DIVIDE expr .)
    INSTANCEOF      reduce using rule 213 (expr -> expr DIVIDE expr .)
    BXOR            reduce using rule 213 (expr -> expr DIVIDE expr .)
    BAND            reduce using rule 213 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 213 (expr -> expr DIVIDE expr .)
    EQUAL_STRICT    reduce using rule 213 (expr -> expr DIVIDE expr .)
    NOTEQUAL_STRICT reduce using rule 213 (expr -> expr DIVIDE expr .)
    GTHAN           reduce using rule 213 (expr -> expr DIVIDE expr .)
    GTHANEQ         reduce using rule 213 (expr -> expr DIVIDE expr .)
    LTHAN           reduce using rule 213 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 213 (expr -> expr DIVIDE expr .)
    LTHANEQ         reduce using rule 213 (expr -> expr DIVIDE expr .)
    NOTEQUAL        reduce using rule 213 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 213 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 213 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 213 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 213 (expr -> expr DIVIDE expr .)
    IN              reduce using rule 213 (expr -> expr DIVIDE expr .)
    QEST            reduce using rule 213 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 213 (expr -> expr DIVIDE expr .)
    ASSIGNPLUS      reduce using rule 213 (expr -> expr DIVIDE expr .)
    ASSIGNMINUS     reduce using rule 213 (expr -> expr DIVIDE expr .)
    ASSIGNDIVIDE    reduce using rule 213 (expr -> expr DIVIDE expr .)
    ASSIGNTIMES     reduce using rule 213 (expr -> expr DIVIDE expr .)
    ASSIGNBOR       reduce using rule 213 (expr -> expr DIVIDE expr .)
    ASSIGNBAND      reduce using rule 213 (expr -> expr DIVIDE expr .)
    ASSIGNBXOR      reduce using rule 213 (expr -> expr DIVIDE expr .)
    ASSIGNLSHIFT    reduce using rule 213 (expr -> expr DIVIDE expr .)
    ASSIGNRSHIFT    reduce using rule 213 (expr -> expr DIVIDE expr .)
    ASSIGNRRSHIFT   reduce using rule 213 (expr -> expr DIVIDE expr .)
    ASSIGNLLSHIFT   reduce using rule 213 (expr -> expr DIVIDE expr .)
    ASSIGN          reduce using rule 213 (expr -> expr DIVIDE expr .)
    TLTHAN          reduce using rule 213 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 213 (expr -> expr DIVIDE expr .)
    RSBRACKET       reduce using rule 213 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 213 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 213 (expr -> expr DIVIDE expr .)
    DOT             shift and go to state 117
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 213 (expr -> expr DIVIDE expr .) ]
  ! INC             [ reduce using rule 213 (expr -> expr DIVIDE expr .) ]
  ! DEC             [ reduce using rule 213 (expr -> expr DIVIDE expr .) ]
  ! LSBRACKET       [ reduce using rule 213 (expr -> expr DIVIDE expr .) ]
  ! LPAREN          [ reduce using rule 213 (expr -> expr DIVIDE expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! PLUS            [ shift and go to state 152 ]
  ! MINUS           [ shift and go to state 132 ]
  ! DIVIDE          [ shift and go to state 135 ]
  ! TIMES           [ shift and go to state 113 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 245

    (206) expr -> expr GTHANEQ expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 206 (expr -> expr GTHANEQ expr .)
    LAND            reduce using rule 206 (expr -> expr GTHANEQ expr .)
    LOR             reduce using rule 206 (expr -> expr GTHANEQ expr .)
    BOR             reduce using rule 206 (expr -> expr GTHANEQ expr .)
    BXOR            reduce using rule 206 (expr -> expr GTHANEQ expr .)
    BAND            reduce using rule 206 (expr -> expr GTHANEQ expr .)
    EQUAL           reduce using rule 206 (expr -> expr GTHANEQ expr .)
    EQUAL_STRICT    reduce using rule 206 (expr -> expr GTHANEQ expr .)
    NOTEQUAL_STRICT reduce using rule 206 (expr -> expr GTHANEQ expr .)
    GTHAN           reduce using rule 206 (expr -> expr GTHANEQ expr .)
    GTHANEQ         reduce using rule 206 (expr -> expr GTHANEQ expr .)
    LTHAN           reduce using rule 206 (expr -> expr GTHANEQ expr .)
    MOD             reduce using rule 206 (expr -> expr GTHANEQ expr .)
    LTHANEQ         reduce using rule 206 (expr -> expr GTHANEQ expr .)
    NOTEQUAL        reduce using rule 206 (expr -> expr GTHANEQ expr .)
    QEST            reduce using rule 206 (expr -> expr GTHANEQ expr .)
    COMMA           reduce using rule 206 (expr -> expr GTHANEQ expr .)
    ASSIGNPLUS      reduce using rule 206 (expr -> expr GTHANEQ expr .)
    ASSIGNMINUS     reduce using rule 206 (expr -> expr GTHANEQ expr .)
    ASSIGNDIVIDE    reduce using rule 206 (expr -> expr GTHANEQ expr .)
    ASSIGNTIMES     reduce using rule 206 (expr -> expr GTHANEQ expr .)
    ASSIGNBOR       reduce using rule 206 (expr -> expr GTHANEQ expr .)
    ASSIGNBAND      reduce using rule 206 (expr -> expr GTHANEQ expr .)
    ASSIGNBXOR      reduce using rule 206 (expr -> expr GTHANEQ expr .)
    ASSIGNLSHIFT    reduce using rule 206 (expr -> expr GTHANEQ expr .)
    ASSIGNRSHIFT    reduce using rule 206 (expr -> expr GTHANEQ expr .)
    ASSIGNRRSHIFT   reduce using rule 206 (expr -> expr GTHANEQ expr .)
    ASSIGNLLSHIFT   reduce using rule 206 (expr -> expr GTHANEQ expr .)
    ASSIGN          reduce using rule 206 (expr -> expr GTHANEQ expr .)
    TLTHAN          reduce using rule 206 (expr -> expr GTHANEQ expr .)
    RPAREN          reduce using rule 206 (expr -> expr GTHANEQ expr .)
    RSBRACKET       reduce using rule 206 (expr -> expr GTHANEQ expr .)
    COLON           reduce using rule 206 (expr -> expr GTHANEQ expr .)
    RBRACKET        reduce using rule 206 (expr -> expr GTHANEQ expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    INSTANCEOF      shift and go to state 150
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! LSHIFT          [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! LLSHIFT         [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! RRSHIFT         [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! DOT             [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! INSTANCEOF      [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! PLUS            [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! MINUS           [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! DIVIDE          [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! TIMES           [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! IN              [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! INC             [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! DEC             [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! LSBRACKET       [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! LPAREN          [ reduce using rule 206 (expr -> expr GTHANEQ expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 246

    (202) expr -> expr EQUAL expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 202 (expr -> expr EQUAL expr .)
    LAND            reduce using rule 202 (expr -> expr EQUAL expr .)
    LOR             reduce using rule 202 (expr -> expr EQUAL expr .)
    BOR             reduce using rule 202 (expr -> expr EQUAL expr .)
    BXOR            reduce using rule 202 (expr -> expr EQUAL expr .)
    BAND            reduce using rule 202 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 202 (expr -> expr EQUAL expr .)
    EQUAL_STRICT    reduce using rule 202 (expr -> expr EQUAL expr .)
    NOTEQUAL_STRICT reduce using rule 202 (expr -> expr EQUAL expr .)
    GTHAN           reduce using rule 202 (expr -> expr EQUAL expr .)
    GTHANEQ         reduce using rule 202 (expr -> expr EQUAL expr .)
    LTHAN           reduce using rule 202 (expr -> expr EQUAL expr .)
    MOD             reduce using rule 202 (expr -> expr EQUAL expr .)
    LTHANEQ         reduce using rule 202 (expr -> expr EQUAL expr .)
    NOTEQUAL        reduce using rule 202 (expr -> expr EQUAL expr .)
    QEST            reduce using rule 202 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 202 (expr -> expr EQUAL expr .)
    ASSIGNPLUS      reduce using rule 202 (expr -> expr EQUAL expr .)
    ASSIGNMINUS     reduce using rule 202 (expr -> expr EQUAL expr .)
    ASSIGNDIVIDE    reduce using rule 202 (expr -> expr EQUAL expr .)
    ASSIGNTIMES     reduce using rule 202 (expr -> expr EQUAL expr .)
    ASSIGNBOR       reduce using rule 202 (expr -> expr EQUAL expr .)
    ASSIGNBAND      reduce using rule 202 (expr -> expr EQUAL expr .)
    ASSIGNBXOR      reduce using rule 202 (expr -> expr EQUAL expr .)
    ASSIGNLSHIFT    reduce using rule 202 (expr -> expr EQUAL expr .)
    ASSIGNRSHIFT    reduce using rule 202 (expr -> expr EQUAL expr .)
    ASSIGNRRSHIFT   reduce using rule 202 (expr -> expr EQUAL expr .)
    ASSIGNLLSHIFT   reduce using rule 202 (expr -> expr EQUAL expr .)
    ASSIGN          reduce using rule 202 (expr -> expr EQUAL expr .)
    TLTHAN          reduce using rule 202 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 202 (expr -> expr EQUAL expr .)
    RSBRACKET       reduce using rule 202 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 202 (expr -> expr EQUAL expr .)
    RBRACKET        reduce using rule 202 (expr -> expr EQUAL expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    INSTANCEOF      shift and go to state 150
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! LSHIFT          [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! LLSHIFT         [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! RRSHIFT         [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! DOT             [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! INSTANCEOF      [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! TIMES           [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! IN              [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! INC             [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! DEC             [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! LSBRACKET       [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! LPAREN          [ reduce using rule 202 (expr -> expr EQUAL expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 247

    (194) expr -> expr RRSHIFT expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 194 (expr -> expr RRSHIFT expr .)
    RSHIFT          reduce using rule 194 (expr -> expr RRSHIFT expr .)
    LSHIFT          reduce using rule 194 (expr -> expr RRSHIFT expr .)
    LLSHIFT         reduce using rule 194 (expr -> expr RRSHIFT expr .)
    RRSHIFT         reduce using rule 194 (expr -> expr RRSHIFT expr .)
    LAND            reduce using rule 194 (expr -> expr RRSHIFT expr .)
    LOR             reduce using rule 194 (expr -> expr RRSHIFT expr .)
    BOR             reduce using rule 194 (expr -> expr RRSHIFT expr .)
    INSTANCEOF      reduce using rule 194 (expr -> expr RRSHIFT expr .)
    BXOR            reduce using rule 194 (expr -> expr RRSHIFT expr .)
    BAND            reduce using rule 194 (expr -> expr RRSHIFT expr .)
    EQUAL           reduce using rule 194 (expr -> expr RRSHIFT expr .)
    EQUAL_STRICT    reduce using rule 194 (expr -> expr RRSHIFT expr .)
    NOTEQUAL_STRICT reduce using rule 194 (expr -> expr RRSHIFT expr .)
    GTHAN           reduce using rule 194 (expr -> expr RRSHIFT expr .)
    GTHANEQ         reduce using rule 194 (expr -> expr RRSHIFT expr .)
    LTHAN           reduce using rule 194 (expr -> expr RRSHIFT expr .)
    MOD             reduce using rule 194 (expr -> expr RRSHIFT expr .)
    LTHANEQ         reduce using rule 194 (expr -> expr RRSHIFT expr .)
    NOTEQUAL        reduce using rule 194 (expr -> expr RRSHIFT expr .)
    IN              reduce using rule 194 (expr -> expr RRSHIFT expr .)
    QEST            reduce using rule 194 (expr -> expr RRSHIFT expr .)
    COMMA           reduce using rule 194 (expr -> expr RRSHIFT expr .)
    ASSIGNPLUS      reduce using rule 194 (expr -> expr RRSHIFT expr .)
    ASSIGNMINUS     reduce using rule 194 (expr -> expr RRSHIFT expr .)
    ASSIGNDIVIDE    reduce using rule 194 (expr -> expr RRSHIFT expr .)
    ASSIGNTIMES     reduce using rule 194 (expr -> expr RRSHIFT expr .)
    ASSIGNBOR       reduce using rule 194 (expr -> expr RRSHIFT expr .)
    ASSIGNBAND      reduce using rule 194 (expr -> expr RRSHIFT expr .)
    ASSIGNBXOR      reduce using rule 194 (expr -> expr RRSHIFT expr .)
    ASSIGNLSHIFT    reduce using rule 194 (expr -> expr RRSHIFT expr .)
    ASSIGNRSHIFT    reduce using rule 194 (expr -> expr RRSHIFT expr .)
    ASSIGNRRSHIFT   reduce using rule 194 (expr -> expr RRSHIFT expr .)
    ASSIGNLLSHIFT   reduce using rule 194 (expr -> expr RRSHIFT expr .)
    ASSIGN          reduce using rule 194 (expr -> expr RRSHIFT expr .)
    TLTHAN          reduce using rule 194 (expr -> expr RRSHIFT expr .)
    RPAREN          reduce using rule 194 (expr -> expr RRSHIFT expr .)
    RSBRACKET       reduce using rule 194 (expr -> expr RRSHIFT expr .)
    COLON           reduce using rule 194 (expr -> expr RRSHIFT expr .)
    RBRACKET        reduce using rule 194 (expr -> expr RRSHIFT expr .)
    DOT             shift and go to state 117
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 194 (expr -> expr RRSHIFT expr .) ]
  ! PLUS            [ reduce using rule 194 (expr -> expr RRSHIFT expr .) ]
  ! MINUS           [ reduce using rule 194 (expr -> expr RRSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 194 (expr -> expr RRSHIFT expr .) ]
  ! TIMES           [ reduce using rule 194 (expr -> expr RRSHIFT expr .) ]
  ! INC             [ reduce using rule 194 (expr -> expr RRSHIFT expr .) ]
  ! DEC             [ reduce using rule 194 (expr -> expr RRSHIFT expr .) ]
  ! LSBRACKET       [ reduce using rule 194 (expr -> expr RRSHIFT expr .) ]
  ! LPAREN          [ reduce using rule 194 (expr -> expr RRSHIFT expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 248

    (207) expr -> expr LTHAN expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 207 (expr -> expr LTHAN expr .)
    LAND            reduce using rule 207 (expr -> expr LTHAN expr .)
    LOR             reduce using rule 207 (expr -> expr LTHAN expr .)
    BOR             reduce using rule 207 (expr -> expr LTHAN expr .)
    BXOR            reduce using rule 207 (expr -> expr LTHAN expr .)
    BAND            reduce using rule 207 (expr -> expr LTHAN expr .)
    EQUAL           reduce using rule 207 (expr -> expr LTHAN expr .)
    EQUAL_STRICT    reduce using rule 207 (expr -> expr LTHAN expr .)
    NOTEQUAL_STRICT reduce using rule 207 (expr -> expr LTHAN expr .)
    GTHAN           reduce using rule 207 (expr -> expr LTHAN expr .)
    GTHANEQ         reduce using rule 207 (expr -> expr LTHAN expr .)
    LTHAN           reduce using rule 207 (expr -> expr LTHAN expr .)
    MOD             reduce using rule 207 (expr -> expr LTHAN expr .)
    LTHANEQ         reduce using rule 207 (expr -> expr LTHAN expr .)
    NOTEQUAL        reduce using rule 207 (expr -> expr LTHAN expr .)
    QEST            reduce using rule 207 (expr -> expr LTHAN expr .)
    COMMA           reduce using rule 207 (expr -> expr LTHAN expr .)
    ASSIGNPLUS      reduce using rule 207 (expr -> expr LTHAN expr .)
    ASSIGNMINUS     reduce using rule 207 (expr -> expr LTHAN expr .)
    ASSIGNDIVIDE    reduce using rule 207 (expr -> expr LTHAN expr .)
    ASSIGNTIMES     reduce using rule 207 (expr -> expr LTHAN expr .)
    ASSIGNBOR       reduce using rule 207 (expr -> expr LTHAN expr .)
    ASSIGNBAND      reduce using rule 207 (expr -> expr LTHAN expr .)
    ASSIGNBXOR      reduce using rule 207 (expr -> expr LTHAN expr .)
    ASSIGNLSHIFT    reduce using rule 207 (expr -> expr LTHAN expr .)
    ASSIGNRSHIFT    reduce using rule 207 (expr -> expr LTHAN expr .)
    ASSIGNRRSHIFT   reduce using rule 207 (expr -> expr LTHAN expr .)
    ASSIGNLLSHIFT   reduce using rule 207 (expr -> expr LTHAN expr .)
    ASSIGN          reduce using rule 207 (expr -> expr LTHAN expr .)
    TLTHAN          reduce using rule 207 (expr -> expr LTHAN expr .)
    RPAREN          reduce using rule 207 (expr -> expr LTHAN expr .)
    RSBRACKET       reduce using rule 207 (expr -> expr LTHAN expr .)
    COLON           reduce using rule 207 (expr -> expr LTHAN expr .)
    RBRACKET        reduce using rule 207 (expr -> expr LTHAN expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    INSTANCEOF      shift and go to state 150
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! LSHIFT          [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! LLSHIFT         [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! RRSHIFT         [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! DOT             [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! INSTANCEOF      [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! PLUS            [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! MINUS           [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! DIVIDE          [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! TIMES           [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! IN              [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! INC             [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! DEC             [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! LSBRACKET       [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! LPAREN          [ reduce using rule 207 (expr -> expr LTHAN expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 249

    (196) expr -> expr LAND expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 196 (expr -> expr LAND expr .)
    LAND            reduce using rule 196 (expr -> expr LAND expr .)
    LOR             reduce using rule 196 (expr -> expr LAND expr .)
    MOD             reduce using rule 196 (expr -> expr LAND expr .)
    QEST            reduce using rule 196 (expr -> expr LAND expr .)
    COMMA           reduce using rule 196 (expr -> expr LAND expr .)
    ASSIGNPLUS      reduce using rule 196 (expr -> expr LAND expr .)
    ASSIGNMINUS     reduce using rule 196 (expr -> expr LAND expr .)
    ASSIGNDIVIDE    reduce using rule 196 (expr -> expr LAND expr .)
    ASSIGNTIMES     reduce using rule 196 (expr -> expr LAND expr .)
    ASSIGNBOR       reduce using rule 196 (expr -> expr LAND expr .)
    ASSIGNBAND      reduce using rule 196 (expr -> expr LAND expr .)
    ASSIGNBXOR      reduce using rule 196 (expr -> expr LAND expr .)
    ASSIGNLSHIFT    reduce using rule 196 (expr -> expr LAND expr .)
    ASSIGNRSHIFT    reduce using rule 196 (expr -> expr LAND expr .)
    ASSIGNRRSHIFT   reduce using rule 196 (expr -> expr LAND expr .)
    ASSIGNLLSHIFT   reduce using rule 196 (expr -> expr LAND expr .)
    ASSIGN          reduce using rule 196 (expr -> expr LAND expr .)
    TLTHAN          reduce using rule 196 (expr -> expr LAND expr .)
    RPAREN          reduce using rule 196 (expr -> expr LAND expr .)
    RSBRACKET       reduce using rule 196 (expr -> expr LAND expr .)
    COLON           reduce using rule 196 (expr -> expr LAND expr .)
    RBRACKET        reduce using rule 196 (expr -> expr LAND expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! LSHIFT          [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! LLSHIFT         [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! RRSHIFT         [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! DOT             [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! BOR             [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! INSTANCEOF      [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! BXOR            [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! BAND            [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! EQUAL           [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! GTHAN           [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! GTHANEQ         [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! LTHAN           [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! LTHANEQ         [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! NOTEQUAL        [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! PLUS            [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! MINUS           [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! DIVIDE          [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! TIMES           [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! IN              [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! INC             [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! DEC             [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! LSBRACKET       [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! LPAREN          [ reduce using rule 196 (expr -> expr LAND expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 123 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 250

    (228) expr -> expr COMMA expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 228 (expr -> expr COMMA expr .)
    MOD             reduce using rule 228 (expr -> expr COMMA expr .)
    COMMA           reduce using rule 228 (expr -> expr COMMA expr .)
    ASSIGNRRSHIFT   reduce using rule 228 (expr -> expr COMMA expr .)
    ASSIGNLLSHIFT   reduce using rule 228 (expr -> expr COMMA expr .)
    TLTHAN          reduce using rule 228 (expr -> expr COMMA expr .)
    RPAREN          reduce using rule 228 (expr -> expr COMMA expr .)
    RSBRACKET       reduce using rule 228 (expr -> expr COMMA expr .)
    COLON           reduce using rule 228 (expr -> expr COMMA expr .)
    RBRACKET        reduce using rule 228 (expr -> expr COMMA expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! LSHIFT          [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! LLSHIFT         [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! RRSHIFT         [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! DOT             [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! LAND            [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! LOR             [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! BOR             [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! INSTANCEOF      [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! BXOR            [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! BAND            [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! EQUAL           [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! GTHAN           [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! GTHANEQ         [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! LTHAN           [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! LTHANEQ         [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! NOTEQUAL        [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! PLUS            [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! MINUS           [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! DIVIDE          [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! TIMES           [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! IN              [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! QEST            [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! INC             [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! DEC             [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! ASSIGNPLUS      [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! ASSIGNBOR       [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! ASSIGNBAND      [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! ASSIGNLSHIFT    [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! ASSIGNRSHIFT    [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! ASSIGN          [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! LSBRACKET       [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! LPAREN          [ reduce using rule 228 (expr -> expr COMMA expr .) ]
  ! MOD             [ shift and go to state 123 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 251

    (191) expr -> expr RSHIFT expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 191 (expr -> expr RSHIFT expr .)
    RSHIFT          reduce using rule 191 (expr -> expr RSHIFT expr .)
    LSHIFT          reduce using rule 191 (expr -> expr RSHIFT expr .)
    LLSHIFT         reduce using rule 191 (expr -> expr RSHIFT expr .)
    RRSHIFT         reduce using rule 191 (expr -> expr RSHIFT expr .)
    LAND            reduce using rule 191 (expr -> expr RSHIFT expr .)
    LOR             reduce using rule 191 (expr -> expr RSHIFT expr .)
    BOR             reduce using rule 191 (expr -> expr RSHIFT expr .)
    INSTANCEOF      reduce using rule 191 (expr -> expr RSHIFT expr .)
    BXOR            reduce using rule 191 (expr -> expr RSHIFT expr .)
    BAND            reduce using rule 191 (expr -> expr RSHIFT expr .)
    EQUAL           reduce using rule 191 (expr -> expr RSHIFT expr .)
    EQUAL_STRICT    reduce using rule 191 (expr -> expr RSHIFT expr .)
    NOTEQUAL_STRICT reduce using rule 191 (expr -> expr RSHIFT expr .)
    GTHAN           reduce using rule 191 (expr -> expr RSHIFT expr .)
    GTHANEQ         reduce using rule 191 (expr -> expr RSHIFT expr .)
    LTHAN           reduce using rule 191 (expr -> expr RSHIFT expr .)
    MOD             reduce using rule 191 (expr -> expr RSHIFT expr .)
    LTHANEQ         reduce using rule 191 (expr -> expr RSHIFT expr .)
    NOTEQUAL        reduce using rule 191 (expr -> expr RSHIFT expr .)
    IN              reduce using rule 191 (expr -> expr RSHIFT expr .)
    QEST            reduce using rule 191 (expr -> expr RSHIFT expr .)
    COMMA           reduce using rule 191 (expr -> expr RSHIFT expr .)
    ASSIGNPLUS      reduce using rule 191 (expr -> expr RSHIFT expr .)
    ASSIGNMINUS     reduce using rule 191 (expr -> expr RSHIFT expr .)
    ASSIGNDIVIDE    reduce using rule 191 (expr -> expr RSHIFT expr .)
    ASSIGNTIMES     reduce using rule 191 (expr -> expr RSHIFT expr .)
    ASSIGNBOR       reduce using rule 191 (expr -> expr RSHIFT expr .)
    ASSIGNBAND      reduce using rule 191 (expr -> expr RSHIFT expr .)
    ASSIGNBXOR      reduce using rule 191 (expr -> expr RSHIFT expr .)
    ASSIGNLSHIFT    reduce using rule 191 (expr -> expr RSHIFT expr .)
    ASSIGNRSHIFT    reduce using rule 191 (expr -> expr RSHIFT expr .)
    ASSIGNRRSHIFT   reduce using rule 191 (expr -> expr RSHIFT expr .)
    ASSIGNLLSHIFT   reduce using rule 191 (expr -> expr RSHIFT expr .)
    ASSIGN          reduce using rule 191 (expr -> expr RSHIFT expr .)
    TLTHAN          reduce using rule 191 (expr -> expr RSHIFT expr .)
    RPAREN          reduce using rule 191 (expr -> expr RSHIFT expr .)
    RSBRACKET       reduce using rule 191 (expr -> expr RSHIFT expr .)
    COLON           reduce using rule 191 (expr -> expr RSHIFT expr .)
    RBRACKET        reduce using rule 191 (expr -> expr RSHIFT expr .)
    DOT             shift and go to state 117
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 191 (expr -> expr RSHIFT expr .) ]
  ! PLUS            [ reduce using rule 191 (expr -> expr RSHIFT expr .) ]
  ! MINUS           [ reduce using rule 191 (expr -> expr RSHIFT expr .) ]
  ! DIVIDE          [ reduce using rule 191 (expr -> expr RSHIFT expr .) ]
  ! TIMES           [ reduce using rule 191 (expr -> expr RSHIFT expr .) ]
  ! INC             [ reduce using rule 191 (expr -> expr RSHIFT expr .) ]
  ! DEC             [ reduce using rule 191 (expr -> expr RSHIFT expr .) ]
  ! LSBRACKET       [ reduce using rule 191 (expr -> expr RSHIFT expr .) ]
  ! LPAREN          [ reduce using rule 191 (expr -> expr RSHIFT expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 252

    (199) expr -> expr INSTANCEOF expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    LAND            reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    LOR             reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    BOR             reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    INSTANCEOF      reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    BXOR            reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    BAND            reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    EQUAL           reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    EQUAL_STRICT    reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    NOTEQUAL_STRICT reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    GTHAN           reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    GTHANEQ         reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    LTHAN           reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    MOD             reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    LTHANEQ         reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    NOTEQUAL        reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    QEST            reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    COMMA           reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    ASSIGNPLUS      reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    ASSIGNMINUS     reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    ASSIGNDIVIDE    reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    ASSIGNTIMES     reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    ASSIGNBOR       reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    ASSIGNBAND      reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    ASSIGNBXOR      reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    ASSIGNLSHIFT    reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    ASSIGNRSHIFT    reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    ASSIGNRRSHIFT   reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    ASSIGNLLSHIFT   reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    ASSIGN          reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    TLTHAN          reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    RPAREN          reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    RSBRACKET       reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    COLON           reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    RBRACKET        reduce using rule 199 (expr -> expr INSTANCEOF expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! LSHIFT          [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! LLSHIFT         [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! RRSHIFT         [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! DOT             [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! PLUS            [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! MINUS           [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! DIVIDE          [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! TIMES           [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! IN              [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! INC             [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! DEC             [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! LSBRACKET       [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! LPAREN          [ reduce using rule 199 (expr -> expr INSTANCEOF expr .) ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 253

    (189) expr -> expr cmplx_assign expr .
    (190) expr -> expr cmplx_assign expr . COLON var_type SEMI
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for LLSHIFT resolved as shift
  ! shift/reduce conflict for RRSHIFT resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for INSTANCEOF resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_STRICT resolved as shift
  ! shift/reduce conflict for NOTEQUAL_STRICT resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for QEST resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for ASSIGNPLUS resolved as shift
  ! shift/reduce conflict for ASSIGNMINUS resolved as shift
  ! shift/reduce conflict for ASSIGNDIVIDE resolved as shift
  ! shift/reduce conflict for ASSIGNTIMES resolved as shift
  ! shift/reduce conflict for ASSIGNBOR resolved as shift
  ! shift/reduce conflict for ASSIGNBAND resolved as shift
  ! shift/reduce conflict for ASSIGNBXOR resolved as shift
  ! shift/reduce conflict for ASSIGNLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNRRSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGNLLSHIFT resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
  ! shift/reduce conflict for TLTHAN resolved as shift
    SEMI            reduce using rule 189 (expr -> expr cmplx_assign expr .)
    RPAREN          reduce using rule 189 (expr -> expr cmplx_assign expr .)
    RSBRACKET       reduce using rule 189 (expr -> expr cmplx_assign expr .)
    RBRACKET        reduce using rule 189 (expr -> expr cmplx_assign expr .)
    COLON           shift and go to state 304
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

  ! RSHIFT          [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! LSHIFT          [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! LLSHIFT         [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! RRSHIFT         [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! DOT             [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! LAND            [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! LOR             [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! BOR             [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! INSTANCEOF      [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! BXOR            [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! BAND            [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! EQUAL           [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! GTHAN           [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! GTHANEQ         [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! LTHAN           [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! MOD             [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! LTHANEQ         [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! NOTEQUAL        [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! PLUS            [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! MINUS           [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! DIVIDE          [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! TIMES           [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! IN              [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! QEST            [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! COMMA           [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! INC             [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! DEC             [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNPLUS      [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNMINUS     [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNDIVIDE    [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNTIMES     [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNBOR       [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNBAND      [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNBXOR      [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNLSHIFT    [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNRSHIFT    [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNRRSHIFT   [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGNLLSHIFT   [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! ASSIGN          [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! LSBRACKET       [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! TLTHAN          [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! LPAREN          [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]
  ! COLON           [ reduce using rule 189 (expr -> expr cmplx_assign expr .) ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 254

    (211) expr -> expr PLUS expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 211 (expr -> expr PLUS expr .)
    RSHIFT          reduce using rule 211 (expr -> expr PLUS expr .)
    LSHIFT          reduce using rule 211 (expr -> expr PLUS expr .)
    LLSHIFT         reduce using rule 211 (expr -> expr PLUS expr .)
    RRSHIFT         reduce using rule 211 (expr -> expr PLUS expr .)
    LAND            reduce using rule 211 (expr -> expr PLUS expr .)
    LOR             reduce using rule 211 (expr -> expr PLUS expr .)
    BOR             reduce using rule 211 (expr -> expr PLUS expr .)
    INSTANCEOF      reduce using rule 211 (expr -> expr PLUS expr .)
    BXOR            reduce using rule 211 (expr -> expr PLUS expr .)
    BAND            reduce using rule 211 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 211 (expr -> expr PLUS expr .)
    EQUAL_STRICT    reduce using rule 211 (expr -> expr PLUS expr .)
    NOTEQUAL_STRICT reduce using rule 211 (expr -> expr PLUS expr .)
    GTHAN           reduce using rule 211 (expr -> expr PLUS expr .)
    GTHANEQ         reduce using rule 211 (expr -> expr PLUS expr .)
    LTHAN           reduce using rule 211 (expr -> expr PLUS expr .)
    MOD             reduce using rule 211 (expr -> expr PLUS expr .)
    LTHANEQ         reduce using rule 211 (expr -> expr PLUS expr .)
    NOTEQUAL        reduce using rule 211 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 211 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 211 (expr -> expr PLUS expr .)
    IN              reduce using rule 211 (expr -> expr PLUS expr .)
    QEST            reduce using rule 211 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 211 (expr -> expr PLUS expr .)
    ASSIGNPLUS      reduce using rule 211 (expr -> expr PLUS expr .)
    ASSIGNMINUS     reduce using rule 211 (expr -> expr PLUS expr .)
    ASSIGNDIVIDE    reduce using rule 211 (expr -> expr PLUS expr .)
    ASSIGNTIMES     reduce using rule 211 (expr -> expr PLUS expr .)
    ASSIGNBOR       reduce using rule 211 (expr -> expr PLUS expr .)
    ASSIGNBAND      reduce using rule 211 (expr -> expr PLUS expr .)
    ASSIGNBXOR      reduce using rule 211 (expr -> expr PLUS expr .)
    ASSIGNLSHIFT    reduce using rule 211 (expr -> expr PLUS expr .)
    ASSIGNRSHIFT    reduce using rule 211 (expr -> expr PLUS expr .)
    ASSIGNRRSHIFT   reduce using rule 211 (expr -> expr PLUS expr .)
    ASSIGNLLSHIFT   reduce using rule 211 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 211 (expr -> expr PLUS expr .)
    TLTHAN          reduce using rule 211 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 211 (expr -> expr PLUS expr .)
    RSBRACKET       reduce using rule 211 (expr -> expr PLUS expr .)
    COLON           reduce using rule 211 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 211 (expr -> expr PLUS expr .)
    DOT             shift and go to state 117
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! DOT             [ reduce using rule 211 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 211 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 211 (expr -> expr PLUS expr .) ]
  ! INC             [ reduce using rule 211 (expr -> expr PLUS expr .) ]
  ! DEC             [ reduce using rule 211 (expr -> expr PLUS expr .) ]
  ! LSBRACKET       [ reduce using rule 211 (expr -> expr PLUS expr .) ]
  ! LPAREN          [ reduce using rule 211 (expr -> expr PLUS expr .) ]
  ! RSHIFT          [ shift and go to state 148 ]
  ! LSHIFT          [ shift and go to state 106 ]
  ! LLSHIFT         [ shift and go to state 133 ]
  ! RRSHIFT         [ shift and go to state 141 ]
  ! LAND            [ shift and go to state 145 ]
  ! LOR             [ shift and go to state 124 ]
  ! BOR             [ shift and go to state 119 ]
  ! INSTANCEOF      [ shift and go to state 150 ]
  ! BXOR            [ shift and go to state 105 ]
  ! BAND            [ shift and go to state 131 ]
  ! EQUAL           [ shift and go to state 139 ]
  ! EQUAL_STRICT    [ shift and go to state 130 ]
  ! NOTEQUAL_STRICT [ shift and go to state 122 ]
  ! GTHAN           [ shift and go to state 127 ]
  ! GTHANEQ         [ shift and go to state 136 ]
  ! LTHAN           [ shift and go to state 143 ]
  ! MOD             [ shift and go to state 123 ]
  ! LTHANEQ         [ shift and go to state 120 ]
  ! NOTEQUAL        [ shift and go to state 121 ]
  ! PLUS            [ shift and go to state 152 ]
  ! MINUS           [ shift and go to state 132 ]
  ! IN              [ shift and go to state 109 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 255

    (245) ctrl_statement -> LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 305


state 256

    (251) statementlist_opt -> statementlist .
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    CASE            reduce using rule 251 (statementlist_opt -> statementlist .)
    RBRACKET        reduce using rule 251 (statementlist_opt -> statementlist .)
    DEFAULT         reduce using rule 251 (statementlist_opt -> statementlist .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    while                          shift and go to state 41
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 157
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 158

state 257

    (249) while -> WHILE paren_expr LBRACKET . statementlist_opt RBRACKET
    (149) lbracket_restrict -> LBRACKET .
    (251) statementlist_opt -> . statementlist
    (252) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 149 (lbracket_restrict -> LBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! RBRACKET        [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! RBRACKET        [ reduce using rule 252 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    statementlist_opt              shift and go to state 306
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 256
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 78

state 258

    (248) while -> WHILE paren_expr statement_nonctrl .

    SEMI            reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    FUNCTION        reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    CLASS           reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    IF              reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    ELSE            reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    WHILE           reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    WITH            reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    DO              reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    FOR             reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    RETURN          reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    YIELD           reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    BREAK           reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    CONTINUE        reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    THROW           reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    TRY             reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    CATCH           reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    SWITCH          reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    NATIVE          reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    NUMBER          reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    ID              reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    DELETE          reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    STRINGLIT       reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    LSBRACKET       reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    LPAREN          reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    MINUS           reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    NOT             reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    BITINV          reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    NEW             reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    INC             reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    DEC             reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    TYPEOF          reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    REGEXPR         reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    GLOBAL          reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    VAR             reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    STATIC          reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    TLTHAN          reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    LBRACKET        reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    RBRACKET        reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    CASE            reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    $end            reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)
    DEFAULT         reduce using rule 248 (while -> WHILE paren_expr statement_nonctrl .)


state 259

    (237) for_var_decl -> ID .
    (238) for_var_decl -> ID . ASSIGN expr

    SEMI            reduce using rule 237 (for_var_decl -> ID .)
    IN              reduce using rule 237 (for_var_decl -> ID .)
    ASSIGN          shift and go to state 307


state 260

    (239) for_var_decl -> var_decl .
    (73) var_decl -> var_decl . ASSIGN expr
    (74) var_decl -> var_decl . COMMA ID
    (75) var_decl -> var_decl . COMMA ID ASSIGN expr

    SEMI            reduce using rule 239 (for_var_decl -> var_decl .)
    IN              reduce using rule 239 (for_var_decl -> var_decl .)
    ASSIGN          shift and go to state 206
    COMMA           shift and go to state 208


state 261

    (240) for_decl -> for_var_decl . SEMI expr_opt SEMI expr_opt
    (241) for_decl -> for_var_decl . IN expr

    SEMI            shift and go to state 308
    IN              shift and go to state 309


state 262

    (242) for -> FOR LPAREN for_decl . RPAREN statement_nonctrl
    (243) for -> FOR LPAREN for_decl . RPAREN LBRACKET statementlist_opt RBRACKET

    RPAREN          shift and go to state 310


state 263

    (262) if -> IF paren_expr ctrl_statement .

    SEMI            reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    FUNCTION        reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    CLASS           reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    IF              reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    ELSE            reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    WHILE           reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    WITH            reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    DO              reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    FOR             reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    RETURN          reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    YIELD           reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    BREAK           reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    CONTINUE        reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    THROW           reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    TRY             reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    CATCH           reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    SWITCH          reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    NATIVE          reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    NUMBER          reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    ID              reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    DELETE          reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    STRINGLIT       reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    LSBRACKET       reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    LPAREN          reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    MINUS           reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    NOT             reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    BITINV          reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    NEW             reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    INC             reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    DEC             reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    TYPEOF          reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    REGEXPR         reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    GLOBAL          reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    VAR             reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    STATIC          reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    TLTHAN          reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    LBRACKET        reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    $end            reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    RBRACKET        reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    CASE            reduce using rule 262 (if -> IF paren_expr ctrl_statement .)
    DEFAULT         reduce using rule 262 (if -> IF paren_expr ctrl_statement .)


state 264

    (155) exprfunction -> FUNCTION template_opt push_scope . LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> FUNCTION template_opt push_scope . LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict

    LPAREN          shift and go to state 311


state 265

    (148) function -> FUNCTION ID template_opt . push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (146) funcref -> FUNCTION ID template_opt . push_scope LPAREN funcdeflist RPAREN func_type_opt
    (6) push_scope -> .

    LPAREN          reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 312

state 266

    (52) template -> lthan_restrict templatedeflist . gthan_restrict
    (50) templatedeflist -> templatedeflist . COMMA var_type
    (51) templatedeflist -> templatedeflist . COMMA var_type ASSIGN var_type
    (67) gthan_restrict -> . TGTHAN

    COMMA           shift and go to state 314
    TGTHAN          shift and go to state 214

    gthan_restrict                 shift and go to state 313

state 267

    (48) templatedeflist -> var_type .
    (49) templatedeflist -> var_type . ASSIGN var_type
    (80) var_type -> var_type . id_var_type
    (89) var_type -> var_type . template_ref
    (76) id_var_type -> . ID
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 48 (templatedeflist -> var_type .)
    TGTHAN          reduce using rule 48 (templatedeflist -> var_type .)
    ASSIGN          shift and go to state 315
    ID              shift and go to state 192
    TLTHAN          shift and go to state 10

    lthan_restrict                 shift and go to state 13
    id_var_type                    shift and go to state 281
    template_ref                   shift and go to state 282

state 268

    (247) dowhile -> DO ctrl_statement WHILE . paren_expr
    (230) paren_expr -> . LPAREN expr RPAREN
    (231) paren_expr -> . LPAREN RPAREN

    LPAREN          shift and go to state 79

    paren_expr                     shift and go to state 316

state 269

    (216) expr -> lparen_restrict expr rparen_restrict .

    SEMI            reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    RSHIFT          reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    LSHIFT          reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    LLSHIFT         reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    RRSHIFT         reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    DOT             reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    LAND            reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    LOR             reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    BOR             reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    INSTANCEOF      reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    BXOR            reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    BAND            reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    EQUAL           reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    EQUAL_STRICT    reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    NOTEQUAL_STRICT reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    GTHAN           reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    GTHANEQ         reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    LTHAN           reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    MOD             reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    LTHANEQ         reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    NOTEQUAL        reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    PLUS            reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    MINUS           reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    DIVIDE          reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    TIMES           reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    IN              reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    QEST            reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    COMMA           reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    INC             reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    DEC             reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNPLUS      reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNMINUS     reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNDIVIDE    reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNTIMES     reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNBOR       reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNBAND      reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNBXOR      reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNLSHIFT    reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNRSHIFT    reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNRRSHIFT   reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGNLLSHIFT   reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    ASSIGN          reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    LSBRACKET       reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    TLTHAN          reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    LPAREN          reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    RPAREN          reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    RSBRACKET       reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    COLON           reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)
    RBRACKET        reduce using rule 216 (expr -> lparen_restrict expr rparen_restrict .)


state 270

    (178) rparen_restrict -> RPAREN .

    SEMI            reduce using rule 178 (rparen_restrict -> RPAREN .)
    RSHIFT          reduce using rule 178 (rparen_restrict -> RPAREN .)
    LSHIFT          reduce using rule 178 (rparen_restrict -> RPAREN .)
    LLSHIFT         reduce using rule 178 (rparen_restrict -> RPAREN .)
    RRSHIFT         reduce using rule 178 (rparen_restrict -> RPAREN .)
    DOT             reduce using rule 178 (rparen_restrict -> RPAREN .)
    LAND            reduce using rule 178 (rparen_restrict -> RPAREN .)
    LOR             reduce using rule 178 (rparen_restrict -> RPAREN .)
    BOR             reduce using rule 178 (rparen_restrict -> RPAREN .)
    INSTANCEOF      reduce using rule 178 (rparen_restrict -> RPAREN .)
    BXOR            reduce using rule 178 (rparen_restrict -> RPAREN .)
    BAND            reduce using rule 178 (rparen_restrict -> RPAREN .)
    EQUAL           reduce using rule 178 (rparen_restrict -> RPAREN .)
    EQUAL_STRICT    reduce using rule 178 (rparen_restrict -> RPAREN .)
    NOTEQUAL_STRICT reduce using rule 178 (rparen_restrict -> RPAREN .)
    GTHAN           reduce using rule 178 (rparen_restrict -> RPAREN .)
    GTHANEQ         reduce using rule 178 (rparen_restrict -> RPAREN .)
    LTHAN           reduce using rule 178 (rparen_restrict -> RPAREN .)
    MOD             reduce using rule 178 (rparen_restrict -> RPAREN .)
    LTHANEQ         reduce using rule 178 (rparen_restrict -> RPAREN .)
    NOTEQUAL        reduce using rule 178 (rparen_restrict -> RPAREN .)
    PLUS            reduce using rule 178 (rparen_restrict -> RPAREN .)
    MINUS           reduce using rule 178 (rparen_restrict -> RPAREN .)
    DIVIDE          reduce using rule 178 (rparen_restrict -> RPAREN .)
    TIMES           reduce using rule 178 (rparen_restrict -> RPAREN .)
    IN              reduce using rule 178 (rparen_restrict -> RPAREN .)
    QEST            reduce using rule 178 (rparen_restrict -> RPAREN .)
    COMMA           reduce using rule 178 (rparen_restrict -> RPAREN .)
    INC             reduce using rule 178 (rparen_restrict -> RPAREN .)
    DEC             reduce using rule 178 (rparen_restrict -> RPAREN .)
    ASSIGNPLUS      reduce using rule 178 (rparen_restrict -> RPAREN .)
    ASSIGNMINUS     reduce using rule 178 (rparen_restrict -> RPAREN .)
    ASSIGNDIVIDE    reduce using rule 178 (rparen_restrict -> RPAREN .)
    ASSIGNTIMES     reduce using rule 178 (rparen_restrict -> RPAREN .)
    ASSIGNBOR       reduce using rule 178 (rparen_restrict -> RPAREN .)
    ASSIGNBAND      reduce using rule 178 (rparen_restrict -> RPAREN .)
    ASSIGNBXOR      reduce using rule 178 (rparen_restrict -> RPAREN .)
    ASSIGNLSHIFT    reduce using rule 178 (rparen_restrict -> RPAREN .)
    ASSIGNRSHIFT    reduce using rule 178 (rparen_restrict -> RPAREN .)
    ASSIGNRRSHIFT   reduce using rule 178 (rparen_restrict -> RPAREN .)
    ASSIGNLLSHIFT   reduce using rule 178 (rparen_restrict -> RPAREN .)
    ASSIGN          reduce using rule 178 (rparen_restrict -> RPAREN .)
    LSBRACKET       reduce using rule 178 (rparen_restrict -> RPAREN .)
    TLTHAN          reduce using rule 178 (rparen_restrict -> RPAREN .)
    LPAREN          reduce using rule 178 (rparen_restrict -> RPAREN .)
    RPAREN          reduce using rule 178 (rparen_restrict -> RPAREN .)
    RSBRACKET       reduce using rule 178 (rparen_restrict -> RPAREN .)
    COLON           reduce using rule 178 (rparen_restrict -> RPAREN .)
    RBRACKET        reduce using rule 178 (rparen_restrict -> RPAREN .)


state 271

    (267) catch -> CATCH paren_expr LBRACKET . statementlist RBRACKET
    (149) lbracket_restrict -> LBRACKET .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! RBRACKET        [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 317
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 78

state 272

    (266) catch -> CATCH paren_expr statement_nonctrl .

    SEMI            reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    FUNCTION        reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    CLASS           reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    IF              reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    ELSE            reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    WHILE           reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    WITH            reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    DO              reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    FOR             reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    RETURN          reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    YIELD           reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    BREAK           reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    CONTINUE        reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    THROW           reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    TRY             reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    CATCH           reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    SWITCH          reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    NATIVE          reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    NUMBER          reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    ID              reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    DELETE          reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    STRINGLIT       reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    LSBRACKET       reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    LPAREN          reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    MINUS           reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    NOT             reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    BITINV          reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    NEW             reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    INC             reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    DEC             reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    TYPEOF          reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    REGEXPR         reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    GLOBAL          reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    VAR             reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    STATIC          reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    TLTHAN          reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    LBRACKET        reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    RBRACKET        reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    $end            reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    CASE            reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)
    DEFAULT         reduce using rule 266 (catch -> CATCH paren_expr statement_nonctrl .)


state 273

    (157) array_literal -> LSBRACKET exprlist RSBRACKET .

    SEMI            reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RSHIFT          reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LSHIFT          reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LLSHIFT         reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RRSHIFT         reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DOT             reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LAND            reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LOR             reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BOR             reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    INSTANCEOF      reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BXOR            reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    BAND            reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    EQUAL           reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    EQUAL_STRICT    reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    NOTEQUAL_STRICT reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    GTHAN           reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    GTHANEQ         reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LTHAN           reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    MOD             reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LTHANEQ         reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    NOTEQUAL        reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    PLUS            reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    MINUS           reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DIVIDE          reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    TIMES           reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    IN              reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    QEST            reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    COMMA           reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    INC             reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    DEC             reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNPLUS      reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNMINUS     reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNTIMES     reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNBOR       reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNBAND      reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNBXOR      reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNLSHIFT    reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNRSHIFT    reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNRRSHIFT   reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGNLLSHIFT   reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    ASSIGN          reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LSBRACKET       reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    TLTHAN          reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    LPAREN          reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RPAREN          reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RSBRACKET       reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    COLON           reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)
    RBRACKET        reduce using rule 157 (array_literal -> LSBRACKET exprlist RSBRACKET .)


state 274

    (113) exprlist -> exprlist COMMA . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 318
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 275

    (161) id_str_or_num -> STRINGLIT .

    COLON           reduce using rule 161 (id_str_or_num -> STRINGLIT .)


state 276

    (163) obj_lit_list -> id_str_or_num . COLON expr

    COLON           shift and go to state 319


state 277

    (160) id_str_or_num -> NUMBER .

    COLON           reduce using rule 160 (id_str_or_num -> NUMBER .)


state 278

    (159) id_str_or_num -> ID .

    COLON           reduce using rule 159 (id_str_or_num -> ID .)


state 279

    (166) obj_literal -> lbracket_restrict push_scope obj_lit_list . rbracket_restrict
    (164) obj_lit_list -> obj_lit_list . COMMA id_str_or_num COLON expr
    (165) obj_lit_list -> obj_lit_list . COMMA
    (150) rbracket_restrict -> . RBRACKET

    COMMA           shift and go to state 321
    RBRACKET        shift and go to state 186

    rbracket_restrict              shift and go to state 320

state 280

    (147) func_native -> NATIVE push_scope FUNCTION . ID template_opt LPAREN funcdeflist RPAREN func_type_opt

    ID              shift and go to state 322


state 281

    (80) var_type -> var_type id_var_type .

    SEMI            reduce using rule 80 (var_type -> var_type id_var_type .)
    ID              reduce using rule 80 (var_type -> var_type id_var_type .)
    TLTHAN          reduce using rule 80 (var_type -> var_type id_var_type .)
    ASSIGN          reduce using rule 80 (var_type -> var_type id_var_type .)
    RPAREN          reduce using rule 80 (var_type -> var_type id_var_type .)
    COMMA           reduce using rule 80 (var_type -> var_type id_var_type .)
    TGTHAN          reduce using rule 80 (var_type -> var_type id_var_type .)
    LBRACKET        reduce using rule 80 (var_type -> var_type id_var_type .)
    IN              reduce using rule 80 (var_type -> var_type id_var_type .)


state 282

    (89) var_type -> var_type template_ref .

    SEMI            reduce using rule 89 (var_type -> var_type template_ref .)
    ID              reduce using rule 89 (var_type -> var_type template_ref .)
    TLTHAN          reduce using rule 89 (var_type -> var_type template_ref .)
    ASSIGN          reduce using rule 89 (var_type -> var_type template_ref .)
    RPAREN          reduce using rule 89 (var_type -> var_type template_ref .)
    COMMA           reduce using rule 89 (var_type -> var_type template_ref .)
    TGTHAN          reduce using rule 89 (var_type -> var_type template_ref .)
    LBRACKET        reduce using rule 89 (var_type -> var_type template_ref .)
    IN              reduce using rule 89 (var_type -> var_type template_ref .)


state 283

    (261) with -> WITH paren_expr ctrl_statement .

    SEMI            reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    FUNCTION        reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    CLASS           reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    IF              reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    ELSE            reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    WHILE           reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    WITH            reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    DO              reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    FOR             reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    RETURN          reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    YIELD           reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    BREAK           reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    CONTINUE        reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    THROW           reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    TRY             reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    CATCH           reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    SWITCH          reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    NATIVE          reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    NUMBER          reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    ID              reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    DELETE          reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    STRINGLIT       reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    LSBRACKET       reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    LPAREN          reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    MINUS           reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    NOT             reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    BITINV          reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    NEW             reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    INC             reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    DEC             reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    TYPEOF          reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    REGEXPR         reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    GLOBAL          reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    VAR             reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    STATIC          reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    TLTHAN          reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    LBRACKET        reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    $end            reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    RBRACKET        reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    CASE            reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)
    DEFAULT         reduce using rule 261 (with -> WITH paren_expr ctrl_statement .)


state 284

    (73) var_decl -> var_decl ASSIGN expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 73 (var_decl -> var_decl ASSIGN expr .)
    ASSIGN          reduce using rule 73 (var_decl -> var_decl ASSIGN expr .)
    COMMA           reduce using rule 73 (var_decl -> var_decl ASSIGN expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

  ! IN              [ reduce using rule 73 (var_decl -> var_decl ASSIGN expr .) ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGN          [ shift and go to state 107 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 285

    (74) var_decl -> var_decl COMMA ID .
    (75) var_decl -> var_decl COMMA ID . ASSIGN expr

  ! shift/reduce conflict for ASSIGN resolved as shift
    SEMI            reduce using rule 74 (var_decl -> var_decl COMMA ID .)
    COMMA           reduce using rule 74 (var_decl -> var_decl COMMA ID .)
    IN              reduce using rule 74 (var_decl -> var_decl COMMA ID .)
    ASSIGN          shift and go to state 323

  ! ASSIGN          [ reduce using rule 74 (var_decl -> var_decl COMMA ID .) ]


state 286

    (230) paren_expr -> LPAREN expr RPAREN .

    LBRACKET        reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    ID              reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    FUNCTION        reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    FOR             reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    DO              reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    YIELD           reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    CONTINUE        reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    THROW           reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    TRY             reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    CATCH           reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    DELETE          reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    STRINGLIT       reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    LSBRACKET       reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    NOT             reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    BITINV          reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    NEW             reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    INC             reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    DEC             reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    TYPEOF          reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    REGEXPR         reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    GLOBAL          reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    VAR             reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    STATIC          reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    TLTHAN          reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    CLASS           reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    WITH            reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    SWITCH          reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    NATIVE          reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    CASE            reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)
    DEFAULT         reduce using rule 230 (paren_expr -> LPAREN expr RPAREN .)


state 287

    (254) case_clauses -> case_clause .

    CASE            reduce using rule 254 (case_clauses -> case_clause .)
    RBRACKET        reduce using rule 254 (case_clauses -> case_clause .)
    DEFAULT         reduce using rule 254 (case_clauses -> case_clause .)


state 288

    (258) case_block -> case_clauses .
    (255) case_clauses -> case_clauses . case_clause
    (256) case_clauses_opt -> case_clauses .
    (253) case_clause -> . CASE expr COLON statementlist_opt

    RBRACKET        reduce using rule 258 (case_block -> case_clauses .)
    DEFAULT         reduce using rule 256 (case_clauses_opt -> case_clauses .)
    CASE            shift and go to state 289

    case_clause                    shift and go to state 324

state 289

    (253) case_clause -> CASE . expr COLON statementlist_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 325
    lparen_restrict                shift and go to state 57
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 290

    (259) case_block -> case_clauses_opt . default_case case_clauses_opt
    (250) default_case -> . DEFAULT COLON statementlist

    DEFAULT         shift and go to state 327

    default_case                   shift and go to state 326

state 291

    (260) switch -> SWITCH paren_expr LBRACKET case_block . RBRACKET

    RBRACKET        shift and go to state 328


state 292

    (114) class -> CLASS ID template_opt class_tail .

    RBRACKET        reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    SEMI            reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    FUNCTION        reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    CLASS           reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    IF              reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    ELSE            reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    WHILE           reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    WITH            reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    DO              reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    FOR             reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    RETURN          reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    YIELD           reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    BREAK           reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    CONTINUE        reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    THROW           reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    TRY             reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    CATCH           reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    SWITCH          reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    NATIVE          reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    NUMBER          reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    ID              reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    DELETE          reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    STRINGLIT       reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    LSBRACKET       reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    LPAREN          reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    MINUS           reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    NOT             reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    BITINV          reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    NEW             reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    INC             reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    DEC             reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    TYPEOF          reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    REGEXPR         reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    GLOBAL          reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    VAR             reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    STATIC          reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    TLTHAN          reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    LBRACKET        reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    CASE            reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    DEFAULT         reduce using rule 114 (class -> CLASS ID template_opt class_tail .)
    $end            reduce using rule 114 (class -> CLASS ID template_opt class_tail .)


state 293

    (120) class_heritage_opt -> class_heritage .

    LBRACKET        reduce using rule 120 (class_heritage_opt -> class_heritage .)


state 294

    (119) class_heritage -> EXTENDS . class_list
    (117) class_list -> . var_type
    (118) class_list -> . class_list COMMA var_type
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    class_list                     shift and go to state 330
    var_type                       shift and go to state 329
    id_var_type                    shift and go to state 191

state 295

    (116) class_tail -> class_heritage_opt . LBRACKET class_body_opt RBRACKET

    LBRACKET        shift and go to state 331


state 296

    (93) simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt . var_type
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    var_type                       shift and go to state 332
    id_var_type                    shift and go to state 191

state 297

    (146) funcref -> FUNCTION ID template_opt . push_scope LPAREN funcdeflist RPAREN func_type_opt
    (6) push_scope -> .

    LPAREN          reduce using rule 6 (push_scope -> .)

    push_scope                     shift and go to state 333

state 298

    (264) try -> TRY LBRACKET statementlist RBRACKET .

    SEMI            reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    FUNCTION        reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    CLASS           reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    WHILE           reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    WITH            reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    DO              reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    YIELD           reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    THROW           reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    TRY             reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    CATCH           reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    SWITCH          reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    NATIVE          reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    DELETE          reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    BITINV          reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    TYPEOF          reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    REGEXPR         reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    GLOBAL          reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    VAR             reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    STATIC          reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    TLTHAN          reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    RBRACKET        reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    CASE            reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)
    DEFAULT         reduce using rule 264 (try -> TRY LBRACKET statementlist RBRACKET .)


state 299

    (180) rsbracket_restrict -> RSBRACKET .

    SEMI            reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    RSHIFT          reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    LSHIFT          reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    LLSHIFT         reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    RRSHIFT         reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    DOT             reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    LAND            reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    LOR             reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    BOR             reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    INSTANCEOF      reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    BXOR            reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    BAND            reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    EQUAL           reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    EQUAL_STRICT    reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    NOTEQUAL_STRICT reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    GTHAN           reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    GTHANEQ         reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    LTHAN           reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    MOD             reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    LTHANEQ         reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    NOTEQUAL        reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    PLUS            reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    MINUS           reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    DIVIDE          reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    TIMES           reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    IN              reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    QEST            reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    COMMA           reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    INC             reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    DEC             reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNPLUS      reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNMINUS     reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNDIVIDE    reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNTIMES     reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNBOR       reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNBAND      reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNBXOR      reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNLSHIFT    reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNRSHIFT    reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNRRSHIFT   reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    ASSIGNLLSHIFT   reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    ASSIGN          reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    LSBRACKET       reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    TLTHAN          reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    LPAREN          reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    RPAREN          reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    RSBRACKET       reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    COLON           reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)
    RBRACKET        reduce using rule 180 (rsbracket_restrict -> RSBRACKET .)


state 300

    (218) expr -> expr lsbracket_restrict expr rsbracket_restrict .

    SEMI            reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RSHIFT          reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LSHIFT          reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LLSHIFT         reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RRSHIFT         reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    DOT             reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LAND            reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LOR             reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    BOR             reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    INSTANCEOF      reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    BXOR            reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    BAND            reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    EQUAL           reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    EQUAL_STRICT    reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    GTHAN           reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    GTHANEQ         reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LTHAN           reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    MOD             reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LTHANEQ         reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    NOTEQUAL        reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    PLUS            reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    MINUS           reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    DIVIDE          reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    TIMES           reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    IN              reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    QEST            reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    COMMA           reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    INC             reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    DEC             reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNPLUS      reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNMINUS     reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNTIMES     reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNBOR       reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNBAND      reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNBXOR      reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNLSHIFT    reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNRSHIFT    reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNRRSHIFT   reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGNLLSHIFT   reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    ASSIGN          reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LSBRACKET       reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    TLTHAN          reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    LPAREN          reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RPAREN          reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RSBRACKET       reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    COLON           reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)
    RBRACKET        reduce using rule 218 (expr -> expr lsbracket_restrict expr rsbracket_restrict .)


state 301

    (137) func_call -> template_ref_opt LPAREN exprlist . RPAREN
    (113) exprlist -> exprlist . COMMA expr

    RPAREN          shift and go to state 334
    COMMA           shift and go to state 274


state 302

    (138) func_call -> template_ref_opt LPAREN RPAREN .

    RSHIFT          reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    LSHIFT          reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    LLSHIFT         reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    RRSHIFT         reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    DOT             reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    LAND            reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    LOR             reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    BOR             reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    INSTANCEOF      reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    BXOR            reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    BAND            reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    EQUAL           reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    EQUAL_STRICT    reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    NOTEQUAL_STRICT reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    GTHAN           reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    GTHANEQ         reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    LTHAN           reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    MOD             reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    LTHANEQ         reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    NOTEQUAL        reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    PLUS            reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    MINUS           reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    DIVIDE          reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    TIMES           reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    IN              reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    QEST            reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    COMMA           reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    INC             reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    DEC             reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNPLUS      reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNMINUS     reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNDIVIDE    reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNTIMES     reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNBOR       reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNBAND      reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNBXOR      reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNLSHIFT    reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNRSHIFT    reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNRRSHIFT   reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGNLLSHIFT   reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    ASSIGN          reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    LSBRACKET       reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    TLTHAN          reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    LPAREN          reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    SEMI            reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    RPAREN          reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    RSBRACKET       reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    COLON           reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)
    RBRACKET        reduce using rule 138 (func_call -> template_ref_opt LPAREN RPAREN .)


state 303

    (219) expr -> expr QEST expr COLON . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 335
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 304

    (190) expr -> expr cmplx_assign expr COLON . var_type SEMI
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    var_type                       shift and go to state 336
    id_var_type                    shift and go to state 191

state 305

    (245) ctrl_statement -> LBRACKET statementlist_opt RBRACKET .

    WHILE           reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    SEMI            reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    CLASS           reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    STATIC          reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 245 (ctrl_statement -> LBRACKET statementlist_opt RBRACKET .)


state 306

    (249) while -> WHILE paren_expr LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 337


state 307

    (238) for_var_decl -> ID ASSIGN . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 338
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 308

    (240) for_decl -> for_var_decl SEMI . expr_opt SEMI expr_opt
    (234) expr_opt -> . expr
    (235) expr_opt -> .
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    SEMI            reduce using rule 235 (expr_opt -> .)
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 339
    expr_opt                       shift and go to state 340
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 309

    (241) for_decl -> for_var_decl IN . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 341
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 310

    (242) for -> FOR LPAREN for_decl RPAREN . statement_nonctrl
    (243) for -> FOR LPAREN for_decl RPAREN . LBRACKET statementlist_opt RBRACKET
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 342
    SEMI            shift and go to state 46
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    FUNCTION        shift and go to state 97
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    FOR             shift and go to state 35
    DO              shift and go to state 54
    WHILE           shift and go to state 31
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10

    while                          shift and go to state 96
    expr                           shift and go to state 19
    if                             shift and go to state 90
    dec                            shift and go to state 45
    for                            shift and go to state 91
    template_ref                   shift and go to state 5
    catch                          shift and go to state 93
    break                          shift and go to state 98
    lthan_restrict                 shift and go to state 13
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    dowhile                        shift and go to state 99
    delete                         shift and go to state 58
    throw                          shift and go to state 92
    try                            shift and go to state 100
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    array_literal                  shift and go to state 66
    var_decl                       shift and go to state 74
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 102
    else                           shift and go to state 103
    return                         shift and go to state 94
    bitinv                         shift and go to state 7
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    typeof                         shift and go to state 75
    yield                          shift and go to state 95
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 343

state 311

    (155) exprfunction -> FUNCTION template_opt push_scope LPAREN . funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> FUNCTION template_opt push_scope LPAREN . RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (139) funcdeflist -> . var_decl_no_list
    (140) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (141) funcdeflist -> .
    (69) var_decl_no_list -> . var_type
    (70) var_decl_no_list -> . type_modifiers var_decl_no_list
    (71) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (76) id_var_type -> . ID

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 346
    COMMA           reduce using rule 141 (funcdeflist -> .)
    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    ID              shift and go to state 192

  ! RPAREN          [ reduce using rule 141 (funcdeflist -> .) ]

    var_decl_no_list               shift and go to state 345
    var_type                       shift and go to state 347
    type_modifiers                 shift and go to state 344
    funcdeflist                    shift and go to state 348
    id_var_type                    shift and go to state 191

state 312

    (148) function -> FUNCTION ID template_opt push_scope . LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (146) funcref -> FUNCTION ID template_opt push_scope . LPAREN funcdeflist RPAREN func_type_opt

    LPAREN          shift and go to state 349


state 313

    (52) template -> lthan_restrict templatedeflist gthan_restrict .

    LPAREN          reduce using rule 52 (template -> lthan_restrict templatedeflist gthan_restrict .)
    EXTENDS         reduce using rule 52 (template -> lthan_restrict templatedeflist gthan_restrict .)
    LBRACKET        reduce using rule 52 (template -> lthan_restrict templatedeflist gthan_restrict .)


state 314

    (50) templatedeflist -> templatedeflist COMMA . var_type
    (51) templatedeflist -> templatedeflist COMMA . var_type ASSIGN var_type
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    var_type                       shift and go to state 350
    id_var_type                    shift and go to state 191

state 315

    (49) templatedeflist -> var_type ASSIGN . var_type
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    var_type                       shift and go to state 351
    id_var_type                    shift and go to state 191

state 316

    (247) dowhile -> DO ctrl_statement WHILE paren_expr .

    SEMI            reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    FUNCTION        reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    CLASS           reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    IF              reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    ELSE            reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    WHILE           reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    WITH            reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    DO              reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    FOR             reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    RETURN          reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    YIELD           reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    BREAK           reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    CONTINUE        reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    THROW           reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    TRY             reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    CATCH           reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    SWITCH          reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    NATIVE          reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    NUMBER          reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    ID              reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    DELETE          reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    STRINGLIT       reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    LSBRACKET       reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    LPAREN          reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    MINUS           reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    NOT             reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    BITINV          reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    NEW             reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    INC             reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    DEC             reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    TYPEOF          reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    REGEXPR         reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    GLOBAL          reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    VAR             reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    STATIC          reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    TLTHAN          reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    LBRACKET        reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    RBRACKET        reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    CASE            reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    DEFAULT         reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)
    $end            reduce using rule 247 (dowhile -> DO ctrl_statement WHILE paren_expr .)


state 317

    (267) catch -> CATCH paren_expr LBRACKET statementlist . RBRACKET
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    RBRACKET        shift and go to state 352
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    while                          shift and go to state 41
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 157
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 158

state 318

    (113) exprlist -> exprlist COMMA expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    RPAREN          reduce using rule 113 (exprlist -> exprlist COMMA expr .)
    COMMA           reduce using rule 113 (exprlist -> exprlist COMMA expr .)
    RSBRACKET       reduce using rule 113 (exprlist -> exprlist COMMA expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

  ! COMMA           [ shift and go to state 147 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 319

    (163) obj_lit_list -> id_str_or_num COLON . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 353
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 320

    (166) obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .

    RSHIFT          reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LSHIFT          reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LLSHIFT         reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RRSHIFT         reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    DOT             reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LAND            reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LOR             reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    BOR             reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    INSTANCEOF      reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    BXOR            reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    BAND            reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    EQUAL           reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    EQUAL_STRICT    reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    GTHAN           reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    GTHANEQ         reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LTHAN           reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    MOD             reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LTHANEQ         reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    NOTEQUAL        reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    PLUS            reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    MINUS           reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    DIVIDE          reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    TIMES           reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    IN              reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    QEST            reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    COMMA           reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    INC             reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    DEC             reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNPLUS      reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNMINUS     reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNTIMES     reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNBOR       reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNBAND      reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNBXOR      reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNLSHIFT    reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNRSHIFT    reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNRRSHIFT   reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGNLLSHIFT   reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    ASSIGN          reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LSBRACKET       reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    TLTHAN          reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    LPAREN          reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    SEMI            reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RPAREN          reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RSBRACKET       reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    COLON           reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)
    RBRACKET        reduce using rule 166 (obj_literal -> lbracket_restrict push_scope obj_lit_list rbracket_restrict .)


state 321

    (164) obj_lit_list -> obj_lit_list COMMA . id_str_or_num COLON expr
    (165) obj_lit_list -> obj_lit_list COMMA .
    (159) id_str_or_num -> . ID
    (160) id_str_or_num -> . NUMBER
    (161) id_str_or_num -> . STRINGLIT

    COMMA           reduce using rule 165 (obj_lit_list -> obj_lit_list COMMA .)
    RBRACKET        reduce using rule 165 (obj_lit_list -> obj_lit_list COMMA .)
    ID              shift and go to state 278
    NUMBER          shift and go to state 277
    STRINGLIT       shift and go to state 275

    id_str_or_num                  shift and go to state 354

state 322

    (147) func_native -> NATIVE push_scope FUNCTION ID . template_opt LPAREN funcdeflist RPAREN func_type_opt
    (142) template_opt -> . template
    (143) template_opt -> .
    (52) template -> . lthan_restrict templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    LPAREN          reduce using rule 143 (template_opt -> .)
    TLTHAN          shift and go to state 10

    template_opt                   shift and go to state 355
    template                       shift and go to state 173
    lthan_restrict                 shift and go to state 174

state 323

    (75) var_decl -> var_decl COMMA ID ASSIGN . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 356
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 324

    (255) case_clauses -> case_clauses case_clause .

    CASE            reduce using rule 255 (case_clauses -> case_clauses case_clause .)
    RBRACKET        reduce using rule 255 (case_clauses -> case_clauses case_clause .)
    DEFAULT         reduce using rule 255 (case_clauses -> case_clauses case_clause .)


state 325

    (253) case_clause -> CASE expr . COLON statementlist_opt
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    COLON           shift and go to state 357
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    func_call                      shift and go to state 134
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 326

    (259) case_block -> case_clauses_opt default_case . case_clauses_opt
    (256) case_clauses_opt -> . case_clauses
    (257) case_clauses_opt -> .
    (254) case_clauses -> . case_clause
    (255) case_clauses -> . case_clauses case_clause
    (253) case_clause -> . CASE expr COLON statementlist_opt

    RBRACKET        reduce using rule 257 (case_clauses_opt -> .)
    CASE            shift and go to state 289

    case_clauses                   shift and go to state 358
    case_clause                    shift and go to state 287
    case_clauses_opt               shift and go to state 359

state 327

    (250) default_case -> DEFAULT . COLON statementlist

    COLON           shift and go to state 360


state 328

    (260) switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .

    RBRACKET        reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    SEMI            reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    FUNCTION        reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    CLASS           reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    IF              reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    ELSE            reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    WHILE           reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    WITH            reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    DO              reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    FOR             reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    RETURN          reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    YIELD           reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    BREAK           reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    CONTINUE        reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    THROW           reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    TRY             reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    CATCH           reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    SWITCH          reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    NATIVE          reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    NUMBER          reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    ID              reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    DELETE          reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    STRINGLIT       reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    LSBRACKET       reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    LPAREN          reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    MINUS           reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    NOT             reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    BITINV          reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    NEW             reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    INC             reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    DEC             reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    TYPEOF          reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    REGEXPR         reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    GLOBAL          reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    VAR             reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    STATIC          reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    TLTHAN          reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    LBRACKET        reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    CASE            reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    DEFAULT         reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)
    $end            reduce using rule 260 (switch -> SWITCH paren_expr LBRACKET case_block RBRACKET .)


state 329

    (117) class_list -> var_type .
    (80) var_type -> var_type . id_var_type
    (89) var_type -> var_type . template_ref
    (76) id_var_type -> . ID
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 117 (class_list -> var_type .)
    LBRACKET        reduce using rule 117 (class_list -> var_type .)
    ID              shift and go to state 192
    TLTHAN          shift and go to state 10

    lthan_restrict                 shift and go to state 13
    id_var_type                    shift and go to state 281
    template_ref                   shift and go to state 282

state 330

    (119) class_heritage -> EXTENDS class_list .
    (118) class_list -> class_list . COMMA var_type

    LBRACKET        reduce using rule 119 (class_heritage -> EXTENDS class_list .)
    COMMA           shift and go to state 361


state 331

    (116) class_tail -> class_heritage_opt LBRACKET . class_body_opt RBRACKET
    (122) class_body_opt -> . class_element_list
    (123) class_body_opt -> .
    (124) class_element_list -> . class_element
    (125) class_element_list -> . class_element_list class_element
    (126) class_element -> . method_def
    (127) class_element -> . STATIC method_def
    (131) method_def -> . method
    (132) method_def -> . ID getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (133) method_def -> . ID getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (128) method -> . ID LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET

    RBRACKET        reduce using rule 123 (class_body_opt -> .)
    STATIC          shift and go to state 367
    ID              shift and go to state 363

    class_element                  shift and go to state 366
    method_def                     shift and go to state 362
    class_element_list             shift and go to state 364
    class_body_opt                 shift and go to state 365
    method                         shift and go to state 368

state 332

    (93) simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type .
    (80) var_type -> var_type . id_var_type
    (89) var_type -> var_type . template_ref
    (76) id_var_type -> . ID
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 93 (simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type .)
    TGTHAN          reduce using rule 93 (simple_templatedeflist -> simple_templatedeflist COMMA typeof_opt var_type .)
    ID              shift and go to state 192
    TLTHAN          shift and go to state 10

    id_var_type                    shift and go to state 281
    template_ref                   shift and go to state 282
    lthan_restrict                 shift and go to state 13

state 333

    (146) funcref -> FUNCTION ID template_opt push_scope . LPAREN funcdeflist RPAREN func_type_opt

    LPAREN          shift and go to state 369


state 334

    (137) func_call -> template_ref_opt LPAREN exprlist RPAREN .

    RSHIFT          reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LSHIFT          reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LLSHIFT         reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RRSHIFT         reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    DOT             reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LAND            reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LOR             reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    BOR             reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    INSTANCEOF      reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    BXOR            reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    BAND            reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    EQUAL           reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    EQUAL_STRICT    reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    NOTEQUAL_STRICT reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    GTHAN           reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    GTHANEQ         reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LTHAN           reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    MOD             reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LTHANEQ         reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    NOTEQUAL        reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    PLUS            reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    IN              reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    QEST            reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    INC             reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    DEC             reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNPLUS      reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNMINUS     reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNDIVIDE    reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNTIMES     reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNBOR       reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNBAND      reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNBXOR      reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNLSHIFT    reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNRSHIFT    reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNRRSHIFT   reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGNLLSHIFT   reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    ASSIGN          reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LSBRACKET       reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    TLTHAN          reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    LPAREN          reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    SEMI            reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RSBRACKET       reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    COLON           reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)
    RBRACKET        reduce using rule 137 (func_call -> template_ref_opt LPAREN exprlist RPAREN .)


state 335

    (219) expr -> expr QEST expr COLON expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

  ! reduce/reduce conflict for LPAREN resolved using rule 136 (template_ref_opt -> .)
    SEMI            reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    MOD             reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    QEST            reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    COMMA           reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    ASSIGNPLUS      reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    ASSIGNMINUS     reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    ASSIGNDIVIDE    reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    ASSIGNTIMES     reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    ASSIGNBOR       reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    ASSIGNBAND      reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    ASSIGNBXOR      reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    ASSIGNLSHIFT    reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    ASSIGNRSHIFT    reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    ASSIGNRRSHIFT   reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    ASSIGNLLSHIFT   reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    ASSIGN          reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    TLTHAN          reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    RPAREN          reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    RSBRACKET       reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    COLON           reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    RBRACKET        reduce using rule 219 (expr -> expr QEST expr COLON expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    INC             shift and go to state 118
    DEC             shift and go to state 149
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)

  ! RSHIFT          [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! LSHIFT          [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! LLSHIFT         [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! RRSHIFT         [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! DOT             [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! LAND            [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! LOR             [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! BOR             [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! INSTANCEOF      [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! BXOR            [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! BAND            [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! EQUAL           [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! EQUAL_STRICT    [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! NOTEQUAL_STRICT [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! GTHAN           [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! GTHANEQ         [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! LTHAN           [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! LTHANEQ         [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! NOTEQUAL        [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! PLUS            [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! MINUS           [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! TIMES           [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! IN              [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! INC             [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! DEC             [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! LSBRACKET       [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! LPAREN          [ reduce using rule 219 (expr -> expr QEST expr COLON expr .) ]
  ! MOD             [ shift and go to state 123 ]
  ! QEST            [ shift and go to state 129 ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGNPLUS      [ shift and go to state 128 ]
  ! ASSIGNMINUS     [ shift and go to state 126 ]
  ! ASSIGNDIVIDE    [ shift and go to state 146 ]
  ! ASSIGNTIMES     [ shift and go to state 116 ]
  ! ASSIGNBOR       [ shift and go to state 137 ]
  ! ASSIGNBAND      [ shift and go to state 142 ]
  ! ASSIGNBXOR      [ shift and go to state 144 ]
  ! ASSIGNLSHIFT    [ shift and go to state 140 ]
  ! ASSIGNRSHIFT    [ shift and go to state 115 ]
  ! ASSIGNRRSHIFT   [ shift and go to state 138 ]
  ! ASSIGNLLSHIFT   [ shift and go to state 114 ]
  ! ASSIGN          [ shift and go to state 107 ]
  ! TLTHAN          [ shift and go to state 10 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 336

    (190) expr -> expr cmplx_assign expr COLON var_type . SEMI
    (80) var_type -> var_type . id_var_type
    (89) var_type -> var_type . template_ref
    (76) id_var_type -> . ID
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    SEMI            shift and go to state 370
    ID              shift and go to state 192
    TLTHAN          shift and go to state 10

    id_var_type                    shift and go to state 281
    lthan_restrict                 shift and go to state 13
    template_ref                   shift and go to state 282

state 337

    (249) while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .

    SEMI            reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    CLASS           reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    WHILE           reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    STATIC          reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 249 (while -> WHILE paren_expr LBRACKET statementlist_opt RBRACKET .)


state 338

    (238) for_var_decl -> ID ASSIGN expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 238 (for_var_decl -> ID ASSIGN expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

  ! IN              [ reduce using rule 238 (for_var_decl -> ID ASSIGN expr .) ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 339

    (234) expr_opt -> expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 234 (expr_opt -> expr .)
    RPAREN          reduce using rule 234 (expr_opt -> expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 340

    (240) for_decl -> for_var_decl SEMI expr_opt . SEMI expr_opt

    SEMI            shift and go to state 371


state 341

    (241) for_decl -> for_var_decl IN expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    RPAREN          reduce using rule 241 (for_decl -> for_var_decl IN expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    COMMA           shift and go to state 147
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 342

    (243) for -> FOR LPAREN for_decl RPAREN LBRACKET . statementlist_opt RBRACKET
    (149) lbracket_restrict -> LBRACKET .
    (251) statementlist_opt -> . statementlist
    (252) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 149 (lbracket_restrict -> LBRACKET .)
  ! reduce/reduce conflict for NUMBER resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for ID resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for STRINGLIT resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! RBRACKET        [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! ID              [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! NUMBER          [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! STRINGLIT       [ reduce using rule 149 (lbracket_restrict -> LBRACKET .) ]
  ! RBRACKET        [ reduce using rule 252 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    statementlist_opt              shift and go to state 372
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 256
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 78

state 343

    (242) for -> FOR LPAREN for_decl RPAREN statement_nonctrl .

    SEMI            reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    FUNCTION        reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    CLASS           reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    IF              reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    ELSE            reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    WHILE           reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    WITH            reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    DO              reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    FOR             reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    RETURN          reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    YIELD           reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    BREAK           reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    CONTINUE        reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    THROW           reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    TRY             reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    CATCH           reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    SWITCH          reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    NATIVE          reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    NUMBER          reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    ID              reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    DELETE          reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    STRINGLIT       reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    LSBRACKET       reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    LPAREN          reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    MINUS           reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    NOT             reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    BITINV          reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    NEW             reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    INC             reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    DEC             reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    TYPEOF          reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    REGEXPR         reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    GLOBAL          reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    VAR             reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    STATIC          reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    TLTHAN          reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    LBRACKET        reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    $end            reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    RBRACKET        reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    CASE            reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)
    DEFAULT         reduce using rule 242 (for -> FOR LPAREN for_decl RPAREN statement_nonctrl .)


state 344

    (70) var_decl_no_list -> type_modifiers . var_decl_no_list
    (53) type_modifiers -> type_modifiers . UNSIGNED
    (54) type_modifiers -> type_modifiers . SIGNED
    (55) type_modifiers -> type_modifiers . CONST
    (69) var_decl_no_list -> . var_type
    (70) var_decl_no_list -> . type_modifiers var_decl_no_list
    (71) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (76) id_var_type -> . ID

    UNSIGNED        shift and go to state 202
    SIGNED          shift and go to state 199
    CONST           shift and go to state 196
    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    ID              shift and go to state 192

    var_type                       shift and go to state 347
    id_var_type                    shift and go to state 191
    type_modifiers                 shift and go to state 344
    var_decl_no_list               shift and go to state 373

state 345

    (139) funcdeflist -> var_decl_no_list .
    (71) var_decl_no_list -> var_decl_no_list . ASSIGN expr

    RPAREN          reduce using rule 139 (funcdeflist -> var_decl_no_list .)
    COMMA           reduce using rule 139 (funcdeflist -> var_decl_no_list .)
    ASSIGN          shift and go to state 374


state 346

    (156) exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN . colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (153) colon_opt -> . COLON
    (154) colon_opt -> .

    COLON           shift and go to state 375
    INT             reduce using rule 154 (colon_opt -> .)
    SHORT           reduce using rule 154 (colon_opt -> .)
    FLOAT           reduce using rule 154 (colon_opt -> .)
    DOUBLE          reduce using rule 154 (colon_opt -> .)
    CHAR            reduce using rule 154 (colon_opt -> .)
    BYTE            reduce using rule 154 (colon_opt -> .)
    INFERRED        reduce using rule 154 (colon_opt -> .)
    ID              reduce using rule 154 (colon_opt -> .)
    LBRACKET        reduce using rule 154 (colon_opt -> .)

    colon_opt                      shift and go to state 376

state 347

    (69) var_decl_no_list -> var_type .
    (80) var_type -> var_type . id_var_type
    (89) var_type -> var_type . template_ref
    (76) id_var_type -> . ID
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    ASSIGN          reduce using rule 69 (var_decl_no_list -> var_type .)
    RPAREN          reduce using rule 69 (var_decl_no_list -> var_type .)
    COMMA           reduce using rule 69 (var_decl_no_list -> var_type .)
    ID              shift and go to state 192
    TLTHAN          shift and go to state 10

    lthan_restrict                 shift and go to state 13
    id_var_type                    shift and go to state 281
    template_ref                   shift and go to state 282

state 348

    (155) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist . RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (140) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 377
    COMMA           shift and go to state 378


state 349

    (148) function -> FUNCTION ID template_opt push_scope LPAREN . funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (146) funcref -> FUNCTION ID template_opt push_scope LPAREN . funcdeflist RPAREN func_type_opt
    (139) funcdeflist -> . var_decl_no_list
    (140) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (141) funcdeflist -> .
    (69) var_decl_no_list -> . var_type
    (70) var_decl_no_list -> . type_modifiers var_decl_no_list
    (71) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (76) id_var_type -> . ID

    RPAREN          reduce using rule 141 (funcdeflist -> .)
    COMMA           reduce using rule 141 (funcdeflist -> .)
    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    ID              shift and go to state 192

    var_type                       shift and go to state 347
    type_modifiers                 shift and go to state 344
    funcdeflist                    shift and go to state 379
    id_var_type                    shift and go to state 191
    var_decl_no_list               shift and go to state 345

state 350

    (50) templatedeflist -> templatedeflist COMMA var_type .
    (51) templatedeflist -> templatedeflist COMMA var_type . ASSIGN var_type
    (80) var_type -> var_type . id_var_type
    (89) var_type -> var_type . template_ref
    (76) id_var_type -> . ID
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 50 (templatedeflist -> templatedeflist COMMA var_type .)
    TGTHAN          reduce using rule 50 (templatedeflist -> templatedeflist COMMA var_type .)
    ASSIGN          shift and go to state 380
    ID              shift and go to state 192
    TLTHAN          shift and go to state 10

    lthan_restrict                 shift and go to state 13
    id_var_type                    shift and go to state 281
    template_ref                   shift and go to state 282

state 351

    (49) templatedeflist -> var_type ASSIGN var_type .
    (80) var_type -> var_type . id_var_type
    (89) var_type -> var_type . template_ref
    (76) id_var_type -> . ID
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 49 (templatedeflist -> var_type ASSIGN var_type .)
    TGTHAN          reduce using rule 49 (templatedeflist -> var_type ASSIGN var_type .)
    ID              shift and go to state 192
    TLTHAN          shift and go to state 10

    lthan_restrict                 shift and go to state 13
    id_var_type                    shift and go to state 281
    template_ref                   shift and go to state 282

state 352

    (267) catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .

    SEMI            reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    FUNCTION        reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    CLASS           reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    IF              reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    ELSE            reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    WHILE           reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    WITH            reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    DO              reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    FOR             reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    RETURN          reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    YIELD           reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    BREAK           reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    CONTINUE        reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    THROW           reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    TRY             reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    CATCH           reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    SWITCH          reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    NATIVE          reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    NUMBER          reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    ID              reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    DELETE          reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    STRINGLIT       reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    LSBRACKET       reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    LPAREN          reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    MINUS           reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    NOT             reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    BITINV          reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    NEW             reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    INC             reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    DEC             reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    TYPEOF          reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    REGEXPR         reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    GLOBAL          reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    VAR             reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    STATIC          reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    TLTHAN          reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    LBRACKET        reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    RBRACKET        reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    $end            reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    CASE            reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)
    DEFAULT         reduce using rule 267 (catch -> CATCH paren_expr LBRACKET statementlist RBRACKET .)


state 353

    (163) obj_lit_list -> id_str_or_num COLON expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 163 (obj_lit_list -> id_str_or_num COLON expr .)
    RBRACKET        reduce using rule 163 (obj_lit_list -> id_str_or_num COLON expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

  ! COMMA           [ shift and go to state 147 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 354

    (164) obj_lit_list -> obj_lit_list COMMA id_str_or_num . COLON expr

    COLON           shift and go to state 381


state 355

    (147) func_native -> NATIVE push_scope FUNCTION ID template_opt . LPAREN funcdeflist RPAREN func_type_opt

    LPAREN          shift and go to state 382


state 356

    (75) var_decl -> var_decl COMMA ID ASSIGN expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    SEMI            reduce using rule 75 (var_decl -> var_decl COMMA ID ASSIGN expr .)
    ASSIGN          reduce using rule 75 (var_decl -> var_decl COMMA ID ASSIGN expr .)
    COMMA           reduce using rule 75 (var_decl -> var_decl COMMA ID ASSIGN expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

  ! IN              [ reduce using rule 75 (var_decl -> var_decl COMMA ID ASSIGN expr .) ]
  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGN          [ shift and go to state 107 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 357

    (253) case_clause -> CASE expr COLON . statementlist_opt
    (251) statementlist_opt -> . statementlist
    (252) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for CASE resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CASE            reduce using rule 5 (statementlist -> .)
    RBRACKET        reduce using rule 5 (statementlist -> .)
    DEFAULT         reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! CASE            [ reduce using rule 252 (statementlist_opt -> .) ]
  ! RBRACKET        [ reduce using rule 252 (statementlist_opt -> .) ]
  ! DEFAULT         [ reduce using rule 252 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    expr                           shift and go to state 19
    statementlist_opt              shift and go to state 383
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    dowhile                        shift and go to state 56
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 256
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 78

state 358

    (256) case_clauses_opt -> case_clauses .
    (255) case_clauses -> case_clauses . case_clause
    (253) case_clause -> . CASE expr COLON statementlist_opt

    RBRACKET        reduce using rule 256 (case_clauses_opt -> case_clauses .)
    CASE            shift and go to state 289

    case_clause                    shift and go to state 324

state 359

    (259) case_block -> case_clauses_opt default_case case_clauses_opt .

    RBRACKET        reduce using rule 259 (case_block -> case_clauses_opt default_case case_clauses_opt .)


state 360

    (250) default_case -> DEFAULT COLON . statementlist
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CASE            reduce using rule 5 (statementlist -> .)
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 384
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 78

state 361

    (118) class_list -> class_list COMMA . var_type
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    var_type                       shift and go to state 385
    id_var_type                    shift and go to state 191

state 362

    (126) class_element -> method_def .

    STATIC          reduce using rule 126 (class_element -> method_def .)
    ID              reduce using rule 126 (class_element -> method_def .)
    RBRACKET        reduce using rule 126 (class_element -> method_def .)


state 363

    (132) method_def -> ID . getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (133) method_def -> ID . getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (128) method -> ID . LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (129) getset_id -> . ID
    (130) getset_id -> . NUMBER

    LPAREN          shift and go to state 387
    ID              shift and go to state 389
    NUMBER          shift and go to state 386

    getset_id                      shift and go to state 388

state 364

    (122) class_body_opt -> class_element_list .
    (125) class_element_list -> class_element_list . class_element
    (126) class_element -> . method_def
    (127) class_element -> . STATIC method_def
    (131) method_def -> . method
    (132) method_def -> . ID getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (133) method_def -> . ID getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (128) method -> . ID LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET

    RBRACKET        reduce using rule 122 (class_body_opt -> class_element_list .)
    STATIC          shift and go to state 367
    ID              shift and go to state 363

    class_element                  shift and go to state 390
    method_def                     shift and go to state 362
    method                         shift and go to state 368

state 365

    (116) class_tail -> class_heritage_opt LBRACKET class_body_opt . RBRACKET

    RBRACKET        shift and go to state 391


state 366

    (124) class_element_list -> class_element .

    STATIC          reduce using rule 124 (class_element_list -> class_element .)
    ID              reduce using rule 124 (class_element_list -> class_element .)
    RBRACKET        reduce using rule 124 (class_element_list -> class_element .)


state 367

    (127) class_element -> STATIC . method_def
    (131) method_def -> . method
    (132) method_def -> . ID getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (133) method_def -> . ID getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (128) method -> . ID LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET

    ID              shift and go to state 363

    method_def                     shift and go to state 392
    method                         shift and go to state 368

state 368

    (131) method_def -> method .

    STATIC          reduce using rule 131 (method_def -> method .)
    ID              reduce using rule 131 (method_def -> method .)
    RBRACKET        reduce using rule 131 (method_def -> method .)


state 369

    (146) funcref -> FUNCTION ID template_opt push_scope LPAREN . funcdeflist RPAREN func_type_opt
    (139) funcdeflist -> . var_decl_no_list
    (140) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (141) funcdeflist -> .
    (69) var_decl_no_list -> . var_type
    (70) var_decl_no_list -> . type_modifiers var_decl_no_list
    (71) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (76) id_var_type -> . ID

    RPAREN          reduce using rule 141 (funcdeflist -> .)
    COMMA           reduce using rule 141 (funcdeflist -> .)
    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    ID              shift and go to state 192

    var_type                       shift and go to state 347
    id_var_type                    shift and go to state 191
    type_modifiers                 shift and go to state 344
    funcdeflist                    shift and go to state 393
    var_decl_no_list               shift and go to state 345

state 370

    (190) expr -> expr cmplx_assign expr COLON var_type SEMI .

    SEMI            reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RSHIFT          reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LSHIFT          reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LLSHIFT         reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RRSHIFT         reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    DOT             reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LAND            reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LOR             reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    BOR             reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    INSTANCEOF      reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    BXOR            reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    BAND            reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    EQUAL           reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    EQUAL_STRICT    reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    NOTEQUAL_STRICT reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    GTHAN           reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    GTHANEQ         reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LTHAN           reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    MOD             reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LTHANEQ         reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    NOTEQUAL        reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    PLUS            reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    MINUS           reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    DIVIDE          reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    TIMES           reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    IN              reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    QEST            reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    COMMA           reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    INC             reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    DEC             reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNPLUS      reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNMINUS     reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNDIVIDE    reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNTIMES     reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNBOR       reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNBAND      reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNBXOR      reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNLSHIFT    reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNRSHIFT    reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNRRSHIFT   reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGNLLSHIFT   reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    ASSIGN          reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LSBRACKET       reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    TLTHAN          reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    LPAREN          reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RPAREN          reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RSBRACKET       reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    COLON           reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)
    RBRACKET        reduce using rule 190 (expr -> expr cmplx_assign expr COLON var_type SEMI .)


state 371

    (240) for_decl -> for_var_decl SEMI expr_opt SEMI . expr_opt
    (234) expr_opt -> . expr
    (235) expr_opt -> .
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    RPAREN          reduce using rule 235 (expr_opt -> .)
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 339
    expr_opt                       shift and go to state 394
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 372

    (243) for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 395


state 373

    (70) var_decl_no_list -> type_modifiers var_decl_no_list .
    (71) var_decl_no_list -> var_decl_no_list . ASSIGN expr

  ! shift/reduce conflict for ASSIGN resolved as shift
    RPAREN          reduce using rule 70 (var_decl_no_list -> type_modifiers var_decl_no_list .)
    COMMA           reduce using rule 70 (var_decl_no_list -> type_modifiers var_decl_no_list .)
    ASSIGN          shift and go to state 374

  ! ASSIGN          [ reduce using rule 70 (var_decl_no_list -> type_modifiers var_decl_no_list .) ]


state 374

    (71) var_decl_no_list -> var_decl_no_list ASSIGN . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 396
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 375

    (153) colon_opt -> COLON .

    INT             reduce using rule 153 (colon_opt -> COLON .)
    SHORT           reduce using rule 153 (colon_opt -> COLON .)
    FLOAT           reduce using rule 153 (colon_opt -> COLON .)
    DOUBLE          reduce using rule 153 (colon_opt -> COLON .)
    CHAR            reduce using rule 153 (colon_opt -> COLON .)
    BYTE            reduce using rule 153 (colon_opt -> COLON .)
    INFERRED        reduce using rule 153 (colon_opt -> COLON .)
    ID              reduce using rule 153 (colon_opt -> COLON .)
    LBRACKET        reduce using rule 153 (colon_opt -> COLON .)


state 376

    (156) exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt . var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (151) var_type_opt -> . var_type
    (152) var_type_opt -> .
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    LBRACKET        reduce using rule 152 (var_type_opt -> .)
    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    id_var_type                    shift and go to state 191
    var_type                       shift and go to state 398
    var_type_opt                   shift and go to state 397

state 377

    (155) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN . colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (153) colon_opt -> . COLON
    (154) colon_opt -> .

    COLON           shift and go to state 375
    INT             reduce using rule 154 (colon_opt -> .)
    SHORT           reduce using rule 154 (colon_opt -> .)
    FLOAT           reduce using rule 154 (colon_opt -> .)
    DOUBLE          reduce using rule 154 (colon_opt -> .)
    CHAR            reduce using rule 154 (colon_opt -> .)
    BYTE            reduce using rule 154 (colon_opt -> .)
    INFERRED        reduce using rule 154 (colon_opt -> .)
    ID              reduce using rule 154 (colon_opt -> .)
    LBRACKET        reduce using rule 154 (colon_opt -> .)

    colon_opt                      shift and go to state 399

state 378

    (140) funcdeflist -> funcdeflist COMMA . var_decl_no_list
    (69) var_decl_no_list -> . var_type
    (70) var_decl_no_list -> . type_modifiers var_decl_no_list
    (71) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (76) id_var_type -> . ID

    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    ID              shift and go to state 192

    var_type                       shift and go to state 347
    id_var_type                    shift and go to state 191
    type_modifiers                 shift and go to state 344
    var_decl_no_list               shift and go to state 400

state 379

    (148) function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist . RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (146) funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist . RPAREN func_type_opt
    (140) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 401
    COMMA           shift and go to state 378


state 380

    (51) templatedeflist -> templatedeflist COMMA var_type ASSIGN . var_type
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    var_type                       shift and go to state 402
    id_var_type                    shift and go to state 191

state 381

    (164) obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON . expr
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    FUNCTION        shift and go to state 82
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    dec                            shift and go to state 45
    not                            shift and go to state 33
    template_ref                   shift and go to state 5
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    lbracket_restrict              shift and go to state 64
    bitinv                         shift and go to state 7
    lthan_restrict                 shift and go to state 13
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    exprfunction                   shift and go to state 17
    typeof                         shift and go to state 75
    expr                           shift and go to state 403
    strlit                         shift and go to state 77
    inc                            shift and go to state 37

state 382

    (147) func_native -> NATIVE push_scope FUNCTION ID template_opt LPAREN . funcdeflist RPAREN func_type_opt
    (139) funcdeflist -> . var_decl_no_list
    (140) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (141) funcdeflist -> .
    (69) var_decl_no_list -> . var_type
    (70) var_decl_no_list -> . type_modifiers var_decl_no_list
    (71) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (76) id_var_type -> . ID

    RPAREN          reduce using rule 141 (funcdeflist -> .)
    COMMA           reduce using rule 141 (funcdeflist -> .)
    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    ID              shift and go to state 192

    var_type                       shift and go to state 347
    id_var_type                    shift and go to state 191
    type_modifiers                 shift and go to state 344
    funcdeflist                    shift and go to state 404
    var_decl_no_list               shift and go to state 345

state 383

    (253) case_clause -> CASE expr COLON statementlist_opt .

    CASE            reduce using rule 253 (case_clause -> CASE expr COLON statementlist_opt .)
    RBRACKET        reduce using rule 253 (case_clause -> CASE expr COLON statementlist_opt .)
    DEFAULT         reduce using rule 253 (case_clause -> CASE expr COLON statementlist_opt .)


state 384

    (250) default_case -> DEFAULT COLON statementlist .
    (3) statementlist -> statementlist . statement
    (4) statementlist -> statementlist . statement_nonctrl
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

    CASE            reduce using rule 250 (default_case -> DEFAULT COLON statementlist .)
    RBRACKET        reduce using rule 250 (default_case -> DEFAULT COLON statementlist .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

    while                          shift and go to state 41
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 157
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 158

state 385

    (118) class_list -> class_list COMMA var_type .
    (80) var_type -> var_type . id_var_type
    (89) var_type -> var_type . template_ref
    (76) id_var_type -> . ID
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 118 (class_list -> class_list COMMA var_type .)
    LBRACKET        reduce using rule 118 (class_list -> class_list COMMA var_type .)
    ID              shift and go to state 192
    TLTHAN          shift and go to state 10

    lthan_restrict                 shift and go to state 13
    id_var_type                    shift and go to state 281
    template_ref                   shift and go to state 282

state 386

    (130) getset_id -> NUMBER .

    LPAREN          reduce using rule 130 (getset_id -> NUMBER .)


state 387

    (128) method -> ID LPAREN . funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (139) funcdeflist -> . var_decl_no_list
    (140) funcdeflist -> . funcdeflist COMMA var_decl_no_list
    (141) funcdeflist -> .
    (69) var_decl_no_list -> . var_type
    (70) var_decl_no_list -> . type_modifiers var_decl_no_list
    (71) var_decl_no_list -> . var_decl_no_list ASSIGN expr
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (76) id_var_type -> . ID

    RPAREN          reduce using rule 141 (funcdeflist -> .)
    COMMA           reduce using rule 141 (funcdeflist -> .)
    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    ID              shift and go to state 192

    var_type                       shift and go to state 347
    id_var_type                    shift and go to state 191
    type_modifiers                 shift and go to state 344
    funcdeflist                    shift and go to state 405
    var_decl_no_list               shift and go to state 345

state 388

    (132) method_def -> ID getset_id . LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (133) method_def -> ID getset_id . LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET

    LPAREN          shift and go to state 406


state 389

    (129) getset_id -> ID .

    LPAREN          reduce using rule 129 (getset_id -> ID .)


state 390

    (125) class_element_list -> class_element_list class_element .

    STATIC          reduce using rule 125 (class_element_list -> class_element_list class_element .)
    ID              reduce using rule 125 (class_element_list -> class_element_list class_element .)
    RBRACKET        reduce using rule 125 (class_element_list -> class_element_list class_element .)


state 391

    (116) class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .

    SEMI            reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    FUNCTION        reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    CLASS           reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    IF              reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    ELSE            reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    WHILE           reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    WITH            reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    DO              reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    FOR             reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    RETURN          reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    YIELD           reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    BREAK           reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    CONTINUE        reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    THROW           reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    TRY             reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    CATCH           reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    SWITCH          reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    NATIVE          reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    NUMBER          reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    ID              reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    DELETE          reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    STRINGLIT       reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    LSBRACKET       reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    LPAREN          reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    MINUS           reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    NOT             reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    BITINV          reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    NEW             reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    INC             reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    DEC             reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    TYPEOF          reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    REGEXPR         reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    GLOBAL          reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    VAR             reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    STATIC          reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    TLTHAN          reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    LBRACKET        reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    $end            reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    RBRACKET        reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    CASE            reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)
    DEFAULT         reduce using rule 116 (class_tail -> class_heritage_opt LBRACKET class_body_opt RBRACKET .)


state 392

    (127) class_element -> STATIC method_def .

    STATIC          reduce using rule 127 (class_element -> STATIC method_def .)
    ID              reduce using rule 127 (class_element -> STATIC method_def .)
    RBRACKET        reduce using rule 127 (class_element -> STATIC method_def .)


state 393

    (146) funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist . RPAREN func_type_opt
    (140) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 407
    COMMA           shift and go to state 378


state 394

    (240) for_decl -> for_var_decl SEMI expr_opt SEMI expr_opt .

    RPAREN          reduce using rule 240 (for_decl -> for_var_decl SEMI expr_opt SEMI expr_opt .)


state 395

    (243) for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .

    SEMI            reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    CLASS           reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    WHILE           reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    STATIC          reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 243 (for -> FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET .)


state 396

    (71) var_decl_no_list -> var_decl_no_list ASSIGN expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    ASSIGN          reduce using rule 71 (var_decl_no_list -> var_decl_no_list ASSIGN expr .)
    RPAREN          reduce using rule 71 (var_decl_no_list -> var_decl_no_list ASSIGN expr .)
    COMMA           reduce using rule 71 (var_decl_no_list -> var_decl_no_list ASSIGN expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

  ! COMMA           [ shift and go to state 147 ]
  ! ASSIGN          [ shift and go to state 107 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 397

    (156) exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt . lbracket_restrict statementlist_opt rbracket_restrict
    (149) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 67

    lbracket_restrict              shift and go to state 408

state 398

    (151) var_type_opt -> var_type .
    (80) var_type -> var_type . id_var_type
    (89) var_type -> var_type . template_ref
    (76) id_var_type -> . ID
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    LBRACKET        reduce using rule 151 (var_type_opt -> var_type .)
    SEMI            reduce using rule 151 (var_type_opt -> var_type .)
    ID              shift and go to state 192
    TLTHAN          shift and go to state 10

    lthan_restrict                 shift and go to state 13
    id_var_type                    shift and go to state 281
    template_ref                   shift and go to state 282

state 399

    (155) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt . var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (151) var_type_opt -> . var_type
    (152) var_type_opt -> .
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    LBRACKET        reduce using rule 152 (var_type_opt -> .)
    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    id_var_type                    shift and go to state 191
    var_type                       shift and go to state 398
    var_type_opt                   shift and go to state 409

state 400

    (140) funcdeflist -> funcdeflist COMMA var_decl_no_list .
    (71) var_decl_no_list -> var_decl_no_list . ASSIGN expr

    RPAREN          reduce using rule 140 (funcdeflist -> funcdeflist COMMA var_decl_no_list .)
    COMMA           reduce using rule 140 (funcdeflist -> funcdeflist COMMA var_decl_no_list .)
    ASSIGN          shift and go to state 374


state 401

    (148) function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN . func_type_opt LBRACKET statementlist_opt RBRACKET
    (146) funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN . func_type_opt
    (144) func_type_opt -> . COLON var_type_opt
    (145) func_type_opt -> .

    COLON           shift and go to state 411
    LBRACKET        reduce using rule 145 (func_type_opt -> .)
    SEMI            reduce using rule 145 (func_type_opt -> .)

    func_type_opt                  shift and go to state 410

state 402

    (51) templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type .
    (80) var_type -> var_type . id_var_type
    (89) var_type -> var_type . template_ref
    (76) id_var_type -> . ID
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 51 (templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type .)
    TGTHAN          reduce using rule 51 (templatedeflist -> templatedeflist COMMA var_type ASSIGN var_type .)
    ID              shift and go to state 192
    TLTHAN          shift and go to state 10

    lthan_restrict                 shift and go to state 13
    id_var_type                    shift and go to state 281
    template_ref                   shift and go to state 282

state 403

    (164) obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON expr .
    (189) expr -> expr . cmplx_assign expr
    (190) expr -> expr . cmplx_assign expr COLON var_type SEMI
    (191) expr -> expr . RSHIFT expr
    (192) expr -> expr . LSHIFT expr
    (193) expr -> expr . LLSHIFT expr
    (194) expr -> expr . RRSHIFT expr
    (195) expr -> expr . DOT expr
    (196) expr -> expr . LAND expr
    (197) expr -> expr . LOR expr
    (198) expr -> expr . BOR expr
    (199) expr -> expr . INSTANCEOF expr
    (200) expr -> expr . BXOR expr
    (201) expr -> expr . BAND expr
    (202) expr -> expr . EQUAL expr
    (203) expr -> expr . EQUAL_STRICT expr
    (204) expr -> expr . NOTEQUAL_STRICT expr
    (205) expr -> expr . GTHAN expr
    (206) expr -> expr . GTHANEQ expr
    (207) expr -> expr . LTHAN expr
    (208) expr -> expr . MOD expr
    (209) expr -> expr . LTHANEQ expr
    (210) expr -> expr . NOTEQUAL expr
    (211) expr -> expr . PLUS expr
    (212) expr -> expr . MINUS expr
    (213) expr -> expr . DIVIDE expr
    (214) expr -> expr . TIMES expr
    (215) expr -> expr . IN expr
    (217) expr -> expr . func_call
    (218) expr -> expr . lsbracket_restrict expr rsbracket_restrict
    (219) expr -> expr . QEST expr COLON expr
    (228) expr -> expr . COMMA expr
    (170) inc -> expr . INC
    (172) dec -> expr . DEC
    (96) cmplx_assign -> . ASSIGNPLUS
    (97) cmplx_assign -> . ASSIGNMINUS
    (98) cmplx_assign -> . ASSIGNDIVIDE
    (99) cmplx_assign -> . ASSIGNTIMES
    (100) cmplx_assign -> . ASSIGNBOR
    (101) cmplx_assign -> . ASSIGNBAND
    (102) cmplx_assign -> . ASSIGNBXOR
    (103) cmplx_assign -> . ASSIGNLSHIFT
    (104) cmplx_assign -> . ASSIGNRSHIFT
    (105) cmplx_assign -> . ASSIGNRRSHIFT
    (106) cmplx_assign -> . ASSIGNLLSHIFT
    (107) cmplx_assign -> . ASSIGN
    (137) func_call -> . template_ref_opt LPAREN exprlist RPAREN
    (138) func_call -> . template_ref_opt LPAREN RPAREN
    (179) lsbracket_restrict -> . LSBRACKET
    (135) template_ref_opt -> . template_ref
    (136) template_ref_opt -> .
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (66) lthan_restrict -> . TLTHAN

    COMMA           reduce using rule 164 (obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON expr .)
    RBRACKET        reduce using rule 164 (obj_lit_list -> obj_lit_list COMMA id_str_or_num COLON expr .)
    RSHIFT          shift and go to state 148
    LSHIFT          shift and go to state 106
    LLSHIFT         shift and go to state 133
    RRSHIFT         shift and go to state 141
    DOT             shift and go to state 117
    LAND            shift and go to state 145
    LOR             shift and go to state 124
    BOR             shift and go to state 119
    INSTANCEOF      shift and go to state 150
    BXOR            shift and go to state 105
    BAND            shift and go to state 131
    EQUAL           shift and go to state 139
    EQUAL_STRICT    shift and go to state 130
    NOTEQUAL_STRICT shift and go to state 122
    GTHAN           shift and go to state 127
    GTHANEQ         shift and go to state 136
    LTHAN           shift and go to state 143
    MOD             shift and go to state 123
    LTHANEQ         shift and go to state 120
    NOTEQUAL        shift and go to state 121
    PLUS            shift and go to state 152
    MINUS           shift and go to state 132
    DIVIDE          shift and go to state 135
    TIMES           shift and go to state 113
    IN              shift and go to state 109
    QEST            shift and go to state 129
    INC             shift and go to state 118
    DEC             shift and go to state 149
    ASSIGNPLUS      shift and go to state 128
    ASSIGNMINUS     shift and go to state 126
    ASSIGNDIVIDE    shift and go to state 146
    ASSIGNTIMES     shift and go to state 116
    ASSIGNBOR       shift and go to state 137
    ASSIGNBAND      shift and go to state 142
    ASSIGNBXOR      shift and go to state 144
    ASSIGNLSHIFT    shift and go to state 140
    ASSIGNRSHIFT    shift and go to state 115
    ASSIGNRRSHIFT   shift and go to state 138
    ASSIGNLLSHIFT   shift and go to state 114
    ASSIGN          shift and go to state 107
    LSBRACKET       shift and go to state 111
    LPAREN          reduce using rule 136 (template_ref_opt -> .)
    TLTHAN          shift and go to state 10

  ! COMMA           [ shift and go to state 147 ]

    func_call                      shift and go to state 134
    lthan_restrict                 shift and go to state 13
    cmplx_assign                   shift and go to state 151
    template_ref_opt               shift and go to state 125
    template_ref                   shift and go to state 110
    lsbracket_restrict             shift and go to state 112

state 404

    (147) func_native -> NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist . RPAREN func_type_opt
    (140) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 412
    COMMA           shift and go to state 378


state 405

    (128) method -> ID LPAREN funcdeflist . RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (140) funcdeflist -> funcdeflist . COMMA var_decl_no_list

    RPAREN          shift and go to state 413
    COMMA           shift and go to state 378


state 406

    (132) method_def -> ID getset_id LPAREN . RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (133) method_def -> ID getset_id LPAREN . setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (134) setter_param_list -> . ID

    RPAREN          shift and go to state 416
    ID              shift and go to state 415

    setter_param_list              shift and go to state 414

state 407

    (146) funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN . func_type_opt
    (144) func_type_opt -> . COLON var_type_opt
    (145) func_type_opt -> .

    COLON           shift and go to state 411
    SEMI            reduce using rule 145 (func_type_opt -> .)

    func_type_opt                  shift and go to state 417

state 408

    (156) exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict . statementlist_opt rbracket_restrict
    (251) statementlist_opt -> . statementlist
    (252) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! RBRACKET        [ reduce using rule 252 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    statementlist_opt              shift and go to state 418
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    else                           shift and go to state 71
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 256
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    catch                          shift and go to state 29
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    var_decl                       shift and go to state 74
    statement_nonctrl              shift and go to state 78

state 409

    (155) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt . lbracket_restrict statementlist_opt rbracket_restrict
    (149) lbracket_restrict -> . LBRACKET

    LBRACKET        shift and go to state 67

    lbracket_restrict              shift and go to state 419

state 410

    (148) function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt . LBRACKET statementlist_opt RBRACKET
    (146) funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt .

    LBRACKET        shift and go to state 420
    SEMI            reduce using rule 146 (funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt .)


state 411

    (144) func_type_opt -> COLON . var_type_opt
    (151) var_type_opt -> . var_type
    (152) var_type_opt -> .
    (80) var_type -> . var_type id_var_type
    (81) var_type -> . id_var_type
    (82) var_type -> . INT
    (83) var_type -> . SHORT
    (84) var_type -> . FLOAT
    (85) var_type -> . DOUBLE
    (86) var_type -> . CHAR
    (87) var_type -> . BYTE
    (88) var_type -> . INFERRED
    (89) var_type -> . var_type template_ref
    (76) id_var_type -> . ID

    LBRACKET        reduce using rule 152 (var_type_opt -> .)
    SEMI            reduce using rule 152 (var_type_opt -> .)
    INT             shift and go to state 194
    SHORT           shift and go to state 193
    FLOAT           shift and go to state 190
    DOUBLE          shift and go to state 198
    CHAR            shift and go to state 197
    BYTE            shift and go to state 200
    INFERRED        shift and go to state 195
    ID              shift and go to state 192

    var_type_opt                   shift and go to state 421
    var_type                       shift and go to state 398
    id_var_type                    shift and go to state 191

state 412

    (147) func_native -> NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN . func_type_opt
    (144) func_type_opt -> . COLON var_type_opt
    (145) func_type_opt -> .

    COLON           shift and go to state 411
    SEMI            reduce using rule 145 (func_type_opt -> .)

    func_type_opt                  shift and go to state 422

state 413

    (128) method -> ID LPAREN funcdeflist RPAREN . func_type_opt LBRACKET statementlist_opt RBRACKET
    (144) func_type_opt -> . COLON var_type_opt
    (145) func_type_opt -> .

    COLON           shift and go to state 411
    LBRACKET        reduce using rule 145 (func_type_opt -> .)

    func_type_opt                  shift and go to state 423

state 414

    (133) method_def -> ID getset_id LPAREN setter_param_list . RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET

    RPAREN          shift and go to state 424


state 415

    (134) setter_param_list -> ID .

    RPAREN          reduce using rule 134 (setter_param_list -> ID .)


state 416

    (132) method_def -> ID getset_id LPAREN RPAREN . func_type_opt LBRACKET statementlist_opt RBRACKET
    (144) func_type_opt -> . COLON var_type_opt
    (145) func_type_opt -> .

    COLON           shift and go to state 411
    LBRACKET        reduce using rule 145 (func_type_opt -> .)

    func_type_opt                  shift and go to state 425

state 417

    (146) funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt .

    SEMI            reduce using rule 146 (funcref -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt .)


state 418

    (156) exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt . rbracket_restrict
    (150) rbracket_restrict -> . RBRACKET

    RBRACKET        shift and go to state 186

    rbracket_restrict              shift and go to state 426

state 419

    (155) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict . statementlist_opt rbracket_restrict
    (251) statementlist_opt -> . statementlist
    (252) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! RBRACKET        [ reduce using rule 252 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    statementlist_opt              shift and go to state 427
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    else                           shift and go to state 71
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 256
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    catch                          shift and go to state 29
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    var_decl                       shift and go to state 74
    statement_nonctrl              shift and go to state 78

state 420

    (148) function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET . statementlist_opt RBRACKET
    (251) statementlist_opt -> . statementlist
    (252) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! RBRACKET        [ reduce using rule 252 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    statementlist_opt              shift and go to state 428
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    else                           shift and go to state 71
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 256
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    catch                          shift and go to state 29
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 78

state 421

    (144) func_type_opt -> COLON var_type_opt .

    SEMI            reduce using rule 144 (func_type_opt -> COLON var_type_opt .)
    LBRACKET        reduce using rule 144 (func_type_opt -> COLON var_type_opt .)


state 422

    (147) func_native -> NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt .

    SEMI            reduce using rule 147 (func_native -> NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt .)


state 423

    (128) method -> ID LPAREN funcdeflist RPAREN func_type_opt . LBRACKET statementlist_opt RBRACKET

    LBRACKET        shift and go to state 429


state 424

    (133) method_def -> ID getset_id LPAREN setter_param_list RPAREN . func_type_opt LBRACKET statementlist_opt RBRACKET
    (144) func_type_opt -> . COLON var_type_opt
    (145) func_type_opt -> .

    COLON           shift and go to state 411
    LBRACKET        reduce using rule 145 (func_type_opt -> .)

    func_type_opt                  shift and go to state 430

state 425

    (132) method_def -> ID getset_id LPAREN RPAREN func_type_opt . LBRACKET statementlist_opt RBRACKET

    LBRACKET        shift and go to state 431


state 426

    (156) exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .

    RSHIFT          reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LSHIFT          reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LLSHIFT         reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RRSHIFT         reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DOT             reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LAND            reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LOR             reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BOR             reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    INSTANCEOF      reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BXOR            reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BAND            reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EQUAL           reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EQUAL_STRICT    reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GTHAN           reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GTHANEQ         reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LTHAN           reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    MOD             reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LTHANEQ         reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOTEQUAL        reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    PLUS            reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    MINUS           reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DIVIDE          reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TIMES           reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    IN              reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    QEST            reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COMMA           reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    INC             reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DEC             reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNPLUS      reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNMINUS     reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNTIMES     reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBOR       reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBAND      reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBXOR      reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNLSHIFT    reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNRSHIFT    reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNRRSHIFT   reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNLLSHIFT   reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGN          reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LSBRACKET       reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TLTHAN          reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LPAREN          reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    SEMI            reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RPAREN          reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RSBRACKET       reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COLON           reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RBRACKET        reduce using rule 156 (exprfunction -> FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)


state 427

    (155) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt . rbracket_restrict
    (150) rbracket_restrict -> . RBRACKET

    RBRACKET        shift and go to state 186

    rbracket_restrict              shift and go to state 432

state 428

    (148) function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 433


state 429

    (128) method -> ID LPAREN funcdeflist RPAREN func_type_opt LBRACKET . statementlist_opt RBRACKET
    (251) statementlist_opt -> . statementlist
    (252) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! RBRACKET        [ reduce using rule 252 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    statementlist_opt              shift and go to state 434
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    func_native                    shift and go to state 51
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 256
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 78

state 430

    (133) method_def -> ID getset_id LPAREN setter_param_list RPAREN func_type_opt . LBRACKET statementlist_opt RBRACKET

    LBRACKET        shift and go to state 435


state 431

    (132) method_def -> ID getset_id LPAREN RPAREN func_type_opt LBRACKET . statementlist_opt RBRACKET
    (251) statementlist_opt -> . statementlist
    (252) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! RBRACKET        [ reduce using rule 252 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    statementlist_opt              shift and go to state 436
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    func_native                    shift and go to state 51
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    catch                          shift and go to state 29
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 256
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    else                           shift and go to state 71
    return                         shift and go to state 20
    not                            shift and go to state 33
    obj_literal                    shift and go to state 34
    re_lit                         shift and go to state 32
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 78

state 432

    (155) exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .

    RSHIFT          reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LSHIFT          reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LLSHIFT         reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RRSHIFT         reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DOT             reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LAND            reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LOR             reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BOR             reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    INSTANCEOF      reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BXOR            reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    BAND            reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EQUAL           reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    EQUAL_STRICT    reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOTEQUAL_STRICT reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GTHAN           reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    GTHANEQ         reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LTHAN           reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    MOD             reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LTHANEQ         reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    NOTEQUAL        reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    PLUS            reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    MINUS           reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DIVIDE          reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TIMES           reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    IN              reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    QEST            reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COMMA           reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    INC             reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    DEC             reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNPLUS      reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNMINUS     reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNDIVIDE    reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNTIMES     reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBOR       reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBAND      reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNBXOR      reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNLSHIFT    reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNRSHIFT    reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNRRSHIFT   reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGNLLSHIFT   reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    ASSIGN          reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LSBRACKET       reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    TLTHAN          reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    LPAREN          reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    SEMI            reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RPAREN          reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RSBRACKET       reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    COLON           reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)
    RBRACKET        reduce using rule 155 (exprfunction -> FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict .)


state 433

    (148) function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .

    SEMI            reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    FUNCTION        reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CLASS           reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    IF              reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    ELSE            reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    WHILE           reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    WITH            reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DO              reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    FOR             reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    RETURN          reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    YIELD           reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    BREAK           reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CONTINUE        reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    THROW           reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    TRY             reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CATCH           reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    SWITCH          reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    NATIVE          reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    NUMBER          reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DELETE          reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    STRINGLIT       reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    LSBRACKET       reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    LPAREN          reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    MINUS           reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    NOT             reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    BITINV          reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    NEW             reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    INC             reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DEC             reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    TYPEOF          reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    REGEXPR         reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    GLOBAL          reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    VAR             reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    STATIC          reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    TLTHAN          reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    LBRACKET        reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    CASE            reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    DEFAULT         reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    $end            reduce using rule 148 (function -> FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)


state 434

    (128) method -> ID LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 437


state 435

    (133) method_def -> ID getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET . statementlist_opt RBRACKET
    (251) statementlist_opt -> . statementlist
    (252) statementlist_opt -> .
    (1) statementlist -> . statement
    (2) statementlist -> . statement_nonctrl
    (3) statementlist -> . statementlist statement
    (4) statementlist -> . statementlist statement_nonctrl
    (5) statementlist -> .
    (12) statement -> . function
    (13) statement -> . class
    (14) statement -> . if
    (15) statement -> . else
    (16) statement -> . while
    (17) statement -> . with
    (18) statement -> . dowhile
    (19) statement -> . for
    (20) statement -> . return SEMI
    (21) statement -> . yield SEMI
    (22) statement -> . break SEMI
    (23) statement -> . continue SEMI
    (24) statement -> . throw SEMI
    (25) statement -> . try
    (26) statement -> . catch
    (27) statement -> . switch
    (28) statement -> . func_native SEMI
    (29) statement_nonctrl -> . expr SEMI
    (30) statement_nonctrl -> . var_decl SEMI
    (31) statement_nonctrl -> . funcref SEMI
    (32) statement_nonctrl -> . SEMI
    (33) statement_nonctrl -> . if
    (34) statement_nonctrl -> . else
    (35) statement_nonctrl -> . for
    (36) statement_nonctrl -> . dowhile
    (37) statement_nonctrl -> . while
    (38) statement_nonctrl -> . return SEMI
    (39) statement_nonctrl -> . yield SEMI
    (40) statement_nonctrl -> . break SEMI
    (41) statement_nonctrl -> . continue SEMI
    (42) statement_nonctrl -> . throw SEMI
    (43) statement_nonctrl -> . try
    (44) statement_nonctrl -> . catch
    (45) statement_nonctrl -> . delete SEMI
    (148) function -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET
    (114) class -> . CLASS ID template_opt class_tail
    (262) if -> . IF paren_expr ctrl_statement
    (268) else -> . ELSE ctrl_statement
    (248) while -> . WHILE paren_expr statement_nonctrl
    (249) while -> . WHILE paren_expr LBRACKET statementlist_opt RBRACKET
    (261) with -> . WITH paren_expr ctrl_statement
    (247) dowhile -> . DO ctrl_statement WHILE paren_expr
    (242) for -> . FOR LPAREN for_decl RPAREN statement_nonctrl
    (243) for -> . FOR LPAREN for_decl RPAREN LBRACKET statementlist_opt RBRACKET
    (271) return -> . RETURN expr
    (272) return -> . RETURN
    (273) yield -> . YIELD expr
    (274) yield -> . YIELD
    (269) break -> . BREAK
    (270) continue -> . CONTINUE
    (108) throw -> . THROW expr
    (263) try -> . TRY statement_nonctrl
    (264) try -> . TRY LBRACKET statementlist RBRACKET
    (265) try -> . TRY LBRACKET RBRACKET
    (266) catch -> . CATCH paren_expr statement_nonctrl
    (267) catch -> . CATCH paren_expr LBRACKET statementlist RBRACKET
    (260) switch -> . SWITCH paren_expr LBRACKET case_block RBRACKET
    (147) func_native -> . NATIVE push_scope FUNCTION ID template_opt LPAREN funcdeflist RPAREN func_type_opt
    (181) expr -> . NUMBER
    (182) expr -> . strlit
    (183) expr -> . ID
    (184) expr -> . ID template_ref
    (185) expr -> . template_ref
    (186) expr -> . array_literal
    (187) expr -> . exprfunction
    (188) expr -> . obj_literal
    (189) expr -> . expr cmplx_assign expr
    (190) expr -> . expr cmplx_assign expr COLON var_type SEMI
    (191) expr -> . expr RSHIFT expr
    (192) expr -> . expr LSHIFT expr
    (193) expr -> . expr LLSHIFT expr
    (194) expr -> . expr RRSHIFT expr
    (195) expr -> . expr DOT expr
    (196) expr -> . expr LAND expr
    (197) expr -> . expr LOR expr
    (198) expr -> . expr BOR expr
    (199) expr -> . expr INSTANCEOF expr
    (200) expr -> . expr BXOR expr
    (201) expr -> . expr BAND expr
    (202) expr -> . expr EQUAL expr
    (203) expr -> . expr EQUAL_STRICT expr
    (204) expr -> . expr NOTEQUAL_STRICT expr
    (205) expr -> . expr GTHAN expr
    (206) expr -> . expr GTHANEQ expr
    (207) expr -> . expr LTHAN expr
    (208) expr -> . expr MOD expr
    (209) expr -> . expr LTHANEQ expr
    (210) expr -> . expr NOTEQUAL expr
    (211) expr -> . expr PLUS expr
    (212) expr -> . expr MINUS expr
    (213) expr -> . expr DIVIDE expr
    (214) expr -> . expr TIMES expr
    (215) expr -> . expr IN expr
    (216) expr -> . lparen_restrict expr rparen_restrict
    (217) expr -> . expr func_call
    (218) expr -> . expr lsbracket_restrict expr rsbracket_restrict
    (219) expr -> . expr QEST expr COLON expr
    (220) expr -> . expr_uminus
    (221) expr -> . not
    (222) expr -> . bitinv
    (223) expr -> . new
    (224) expr -> . inc
    (225) expr -> . dec
    (226) expr -> . typeof
    (227) expr -> . re_lit
    (228) expr -> . expr COMMA expr
    (72) var_decl -> . type_modifiers var_type
    (73) var_decl -> . var_decl ASSIGN expr
    (74) var_decl -> . var_decl COMMA ID
    (75) var_decl -> . var_decl COMMA ID ASSIGN expr
    (146) funcref -> . FUNCTION ID template_opt push_scope LPAREN funcdeflist RPAREN func_type_opt
    (168) delete -> . DELETE expr
    (176) strlit -> . STRINGLIT
    (62) template_ref -> . lthan_restrict simple_templatedeflist gthan_restrict
    (157) array_literal -> . LSBRACKET exprlist RSBRACKET
    (158) array_literal -> . LSBRACKET RSBRACKET
    (155) exprfunction -> . FUNCTION template_opt push_scope LPAREN funcdeflist RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (156) exprfunction -> . FUNCTION template_opt push_scope LPAREN RPAREN colon_opt var_type_opt lbracket_restrict statementlist_opt rbracket_restrict
    (166) obj_literal -> . lbracket_restrict push_scope obj_lit_list rbracket_restrict
    (167) obj_literal -> . lbracket_restrict rbracket_restrict
    (177) lparen_restrict -> . LPAREN
    (229) expr_uminus -> . MINUS expr
    (174) not -> . NOT expr
    (175) bitinv -> . BITINV expr
    (169) new -> . NEW expr
    (170) inc -> . expr INC
    (171) inc -> . INC expr
    (172) dec -> . expr DEC
    (173) dec -> . DEC expr
    (162) typeof -> . TYPEOF expr
    (236) re_lit -> . REGEXPR
    (53) type_modifiers -> . type_modifiers UNSIGNED
    (54) type_modifiers -> . type_modifiers SIGNED
    (55) type_modifiers -> . type_modifiers CONST
    (56) type_modifiers -> . GLOBAL
    (57) type_modifiers -> . VAR
    (58) type_modifiers -> . STATIC
    (66) lthan_restrict -> . TLTHAN
    (149) lbracket_restrict -> . LBRACKET

  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (statementlist -> .)
  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for THROW resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NATIVE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for STRINGLIT resolved as shift
  ! shift/reduce conflict for LSBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BITINV resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for REGEXPR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for TLTHAN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 5 (statementlist -> .)
    SEMI            shift and go to state 46
    FUNCTION        shift and go to state 50
    CLASS           shift and go to state 6
    IF              shift and go to state 43
    ELSE            shift and go to state 28
    WHILE           shift and go to state 31
    WITH            shift and go to state 72
    DO              shift and go to state 54
    FOR             shift and go to state 35
    RETURN          shift and go to state 30
    YIELD           shift and go to state 68
    BREAK           shift and go to state 4
    CONTINUE        shift and go to state 49
    THROW           shift and go to state 27
    TRY             shift and go to state 16
    CATCH           shift and go to state 59
    SWITCH          shift and go to state 1
    NATIVE          shift and go to state 65
    NUMBER          shift and go to state 39
    ID              shift and go to state 44
    DELETE          shift and go to state 23
    STRINGLIT       shift and go to state 18
    LSBRACKET       shift and go to state 63
    LPAREN          shift and go to state 24
    MINUS           shift and go to state 25
    NOT             shift and go to state 42
    BITINV          shift and go to state 11
    NEW             shift and go to state 12
    INC             shift and go to state 55
    DEC             shift and go to state 73
    TYPEOF          shift and go to state 9
    REGEXPR         shift and go to state 22
    GLOBAL          shift and go to state 40
    VAR             shift and go to state 36
    STATIC          shift and go to state 61
    TLTHAN          shift and go to state 10
    LBRACKET        shift and go to state 67

  ! RBRACKET        [ reduce using rule 252 (statementlist_opt -> .) ]
  ! SEMI            [ reduce using rule 5 (statementlist -> .) ]
  ! FUNCTION        [ reduce using rule 5 (statementlist -> .) ]
  ! CLASS           [ reduce using rule 5 (statementlist -> .) ]
  ! IF              [ reduce using rule 5 (statementlist -> .) ]
  ! ELSE            [ reduce using rule 5 (statementlist -> .) ]
  ! WHILE           [ reduce using rule 5 (statementlist -> .) ]
  ! WITH            [ reduce using rule 5 (statementlist -> .) ]
  ! DO              [ reduce using rule 5 (statementlist -> .) ]
  ! FOR             [ reduce using rule 5 (statementlist -> .) ]
  ! RETURN          [ reduce using rule 5 (statementlist -> .) ]
  ! YIELD           [ reduce using rule 5 (statementlist -> .) ]
  ! BREAK           [ reduce using rule 5 (statementlist -> .) ]
  ! CONTINUE        [ reduce using rule 5 (statementlist -> .) ]
  ! THROW           [ reduce using rule 5 (statementlist -> .) ]
  ! TRY             [ reduce using rule 5 (statementlist -> .) ]
  ! CATCH           [ reduce using rule 5 (statementlist -> .) ]
  ! SWITCH          [ reduce using rule 5 (statementlist -> .) ]
  ! NATIVE          [ reduce using rule 5 (statementlist -> .) ]
  ! NUMBER          [ reduce using rule 5 (statementlist -> .) ]
  ! ID              [ reduce using rule 5 (statementlist -> .) ]
  ! DELETE          [ reduce using rule 5 (statementlist -> .) ]
  ! STRINGLIT       [ reduce using rule 5 (statementlist -> .) ]
  ! LSBRACKET       [ reduce using rule 5 (statementlist -> .) ]
  ! LPAREN          [ reduce using rule 5 (statementlist -> .) ]
  ! MINUS           [ reduce using rule 5 (statementlist -> .) ]
  ! NOT             [ reduce using rule 5 (statementlist -> .) ]
  ! BITINV          [ reduce using rule 5 (statementlist -> .) ]
  ! NEW             [ reduce using rule 5 (statementlist -> .) ]
  ! INC             [ reduce using rule 5 (statementlist -> .) ]
  ! DEC             [ reduce using rule 5 (statementlist -> .) ]
  ! TYPEOF          [ reduce using rule 5 (statementlist -> .) ]
  ! REGEXPR         [ reduce using rule 5 (statementlist -> .) ]
  ! GLOBAL          [ reduce using rule 5 (statementlist -> .) ]
  ! VAR             [ reduce using rule 5 (statementlist -> .) ]
  ! STATIC          [ reduce using rule 5 (statementlist -> .) ]
  ! TLTHAN          [ reduce using rule 5 (statementlist -> .) ]
  ! LBRACKET        [ reduce using rule 5 (statementlist -> .) ]

    while                          shift and go to state 41
    statementlist_opt              shift and go to state 438
    if                             shift and go to state 2
    dec                            shift and go to state 45
    for                            shift and go to state 3
    template_ref                   shift and go to state 5
    bitinv                         shift and go to state 7
    function                       shift and go to state 8
    typeof                         shift and go to state 75
    dowhile                        shift and go to state 56
    lthan_restrict                 shift and go to state 13
    func_native                    shift and go to state 51
    break                          shift and go to state 52
    statement                      shift and go to state 53
    with                           shift and go to state 14
    try                            shift and go to state 60
    funcref                        shift and go to state 15
    inc                            shift and go to state 37
    exprfunction                   shift and go to state 17
    var_decl                       shift and go to state 74
    else                           shift and go to state 71
    expr                           shift and go to state 19
    delete                         shift and go to state 58
    throw                          shift and go to state 21
    switch                         shift and go to state 62
    lparen_restrict                shift and go to state 57
    new                            shift and go to state 48
    lbracket_restrict              shift and go to state 64
    re_lit                         shift and go to state 32
    array_literal                  shift and go to state 66
    statementlist                  shift and go to state 256
    expr_uminus                    shift and go to state 47
    type_modifiers                 shift and go to state 69
    continue                       shift and go to state 70
    catch                          shift and go to state 29
    return                         shift and go to state 20
    obj_literal                    shift and go to state 34
    not                            shift and go to state 33
    yield                          shift and go to state 38
    class                          shift and go to state 76
    strlit                         shift and go to state 77
    statement_nonctrl              shift and go to state 78

state 436

    (132) method_def -> ID getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 439


state 437

    (128) method -> ID LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .

    STATIC          reduce using rule 128 (method -> ID LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 128 (method -> ID LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 128 (method -> ID LPAREN funcdeflist RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)


state 438

    (133) method_def -> ID getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt . RBRACKET

    RBRACKET        shift and go to state 440


state 439

    (132) method_def -> ID getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .

    STATIC          reduce using rule 132 (method_def -> ID getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 132 (method_def -> ID getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 132 (method_def -> ID getset_id LPAREN RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)


state 440

    (133) method_def -> ID getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .

    STATIC          reduce using rule 133 (method_def -> ID getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    ID              reduce using rule 133 (method_def -> ID getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)
    RBRACKET        reduce using rule 133 (method_def -> ID getset_id LPAREN setter_param_list RPAREN func_type_opt LBRACKET statementlist_opt RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMI in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for WITH in state 0 resolved as shift
WARNING: shift/reduce conflict for DO in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 0 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 0 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 0 resolved as shift
WARNING: shift/reduce conflict for THROW in state 0 resolved as shift
WARNING: shift/reduce conflict for TRY in state 0 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 0 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 0 resolved as shift
WARNING: shift/reduce conflict for ID in state 0 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 0 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 0 resolved as shift
WARNING: shift/reduce conflict for NEW in state 0 resolved as shift
WARNING: shift/reduce conflict for INC in state 0 resolved as shift
WARNING: shift/reduce conflict for DEC in state 0 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 0 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 0 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 0 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 44 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 101 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 101 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 101 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 101 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 101 resolved as shift
WARNING: shift/reduce conflict for IF in state 101 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 101 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 101 resolved as shift
WARNING: shift/reduce conflict for WITH in state 101 resolved as shift
WARNING: shift/reduce conflict for DO in state 101 resolved as shift
WARNING: shift/reduce conflict for FOR in state 101 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 101 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 101 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 101 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 101 resolved as shift
WARNING: shift/reduce conflict for THROW in state 101 resolved as shift
WARNING: shift/reduce conflict for TRY in state 101 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 101 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 101 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 101 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 101 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 101 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 101 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 101 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for NOT in state 101 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 101 resolved as shift
WARNING: shift/reduce conflict for NEW in state 101 resolved as shift
WARNING: shift/reduce conflict for INC in state 101 resolved as shift
WARNING: shift/reduce conflict for DEC in state 101 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 101 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 101 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 101 resolved as shift
WARNING: shift/reduce conflict for VAR in state 101 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 101 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 101 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 101 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 162 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 162 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 162 resolved as shift
WARNING: shift/reduce conflict for IF in state 162 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 162 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 162 resolved as shift
WARNING: shift/reduce conflict for WITH in state 162 resolved as shift
WARNING: shift/reduce conflict for DO in state 162 resolved as shift
WARNING: shift/reduce conflict for FOR in state 162 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 162 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 162 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 162 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 162 resolved as shift
WARNING: shift/reduce conflict for THROW in state 162 resolved as shift
WARNING: shift/reduce conflict for TRY in state 162 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 162 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 162 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 162 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 162 resolved as shift
WARNING: shift/reduce conflict for ID in state 162 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 162 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 162 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 162 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 162 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 162 resolved as shift
WARNING: shift/reduce conflict for NOT in state 162 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 162 resolved as shift
WARNING: shift/reduce conflict for NEW in state 162 resolved as shift
WARNING: shift/reduce conflict for INC in state 162 resolved as shift
WARNING: shift/reduce conflict for DEC in state 162 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 162 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 162 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 162 resolved as shift
WARNING: shift/reduce conflict for VAR in state 162 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 162 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 162 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 162 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 183 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 235 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 235 resolved as shift
WARNING: shift/reduce conflict for LLSHIFT in state 235 resolved as shift
WARNING: shift/reduce conflict for RRSHIFT in state 235 resolved as shift
WARNING: shift/reduce conflict for DOT in state 235 resolved as shift
WARNING: shift/reduce conflict for LAND in state 235 resolved as shift
WARNING: shift/reduce conflict for LOR in state 235 resolved as shift
WARNING: shift/reduce conflict for BOR in state 235 resolved as shift
WARNING: shift/reduce conflict for INSTANCEOF in state 235 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 235 resolved as shift
WARNING: shift/reduce conflict for BAND in state 235 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 235 resolved as shift
WARNING: shift/reduce conflict for EQUAL_STRICT in state 235 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL_STRICT in state 235 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 235 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 235 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 235 resolved as shift
WARNING: shift/reduce conflict for MOD in state 235 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 235 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 235 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 235 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 235 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 235 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 235 resolved as shift
WARNING: shift/reduce conflict for IN in state 235 resolved as shift
WARNING: shift/reduce conflict for QEST in state 235 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 235 resolved as shift
WARNING: shift/reduce conflict for INC in state 235 resolved as shift
WARNING: shift/reduce conflict for DEC in state 235 resolved as shift
WARNING: shift/reduce conflict for ASSIGNPLUS in state 235 resolved as shift
WARNING: shift/reduce conflict for ASSIGNMINUS in state 235 resolved as shift
WARNING: shift/reduce conflict for ASSIGNDIVIDE in state 235 resolved as shift
WARNING: shift/reduce conflict for ASSIGNTIMES in state 235 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBOR in state 235 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBAND in state 235 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBXOR in state 235 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLSHIFT in state 235 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRSHIFT in state 235 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRRSHIFT in state 235 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLLSHIFT in state 235 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 235 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 235 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 235 resolved as shift
WARNING: shift/reduce conflict for COLON in state 253 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 253 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 253 resolved as shift
WARNING: shift/reduce conflict for LLSHIFT in state 253 resolved as shift
WARNING: shift/reduce conflict for RRSHIFT in state 253 resolved as shift
WARNING: shift/reduce conflict for DOT in state 253 resolved as shift
WARNING: shift/reduce conflict for LAND in state 253 resolved as shift
WARNING: shift/reduce conflict for LOR in state 253 resolved as shift
WARNING: shift/reduce conflict for BOR in state 253 resolved as shift
WARNING: shift/reduce conflict for INSTANCEOF in state 253 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 253 resolved as shift
WARNING: shift/reduce conflict for BAND in state 253 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 253 resolved as shift
WARNING: shift/reduce conflict for EQUAL_STRICT in state 253 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL_STRICT in state 253 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 253 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 253 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 253 resolved as shift
WARNING: shift/reduce conflict for MOD in state 253 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 253 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 253 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 253 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 253 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 253 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 253 resolved as shift
WARNING: shift/reduce conflict for IN in state 253 resolved as shift
WARNING: shift/reduce conflict for QEST in state 253 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 253 resolved as shift
WARNING: shift/reduce conflict for INC in state 253 resolved as shift
WARNING: shift/reduce conflict for DEC in state 253 resolved as shift
WARNING: shift/reduce conflict for ASSIGNPLUS in state 253 resolved as shift
WARNING: shift/reduce conflict for ASSIGNMINUS in state 253 resolved as shift
WARNING: shift/reduce conflict for ASSIGNDIVIDE in state 253 resolved as shift
WARNING: shift/reduce conflict for ASSIGNTIMES in state 253 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBOR in state 253 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBAND in state 253 resolved as shift
WARNING: shift/reduce conflict for ASSIGNBXOR in state 253 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLSHIFT in state 253 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRSHIFT in state 253 resolved as shift
WARNING: shift/reduce conflict for ASSIGNRRSHIFT in state 253 resolved as shift
WARNING: shift/reduce conflict for ASSIGNLLSHIFT in state 253 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 253 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 253 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 253 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 257 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 257 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 257 resolved as shift
WARNING: shift/reduce conflict for IF in state 257 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 257 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 257 resolved as shift
WARNING: shift/reduce conflict for WITH in state 257 resolved as shift
WARNING: shift/reduce conflict for DO in state 257 resolved as shift
WARNING: shift/reduce conflict for FOR in state 257 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 257 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 257 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 257 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 257 resolved as shift
WARNING: shift/reduce conflict for THROW in state 257 resolved as shift
WARNING: shift/reduce conflict for TRY in state 257 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 257 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 257 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 257 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 257 resolved as shift
WARNING: shift/reduce conflict for ID in state 257 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 257 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 257 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 257 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 257 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 257 resolved as shift
WARNING: shift/reduce conflict for NOT in state 257 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 257 resolved as shift
WARNING: shift/reduce conflict for NEW in state 257 resolved as shift
WARNING: shift/reduce conflict for INC in state 257 resolved as shift
WARNING: shift/reduce conflict for DEC in state 257 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 257 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 257 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 257 resolved as shift
WARNING: shift/reduce conflict for VAR in state 257 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 257 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 257 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 257 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 271 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 271 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 271 resolved as shift
WARNING: shift/reduce conflict for IF in state 271 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 271 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 271 resolved as shift
WARNING: shift/reduce conflict for WITH in state 271 resolved as shift
WARNING: shift/reduce conflict for DO in state 271 resolved as shift
WARNING: shift/reduce conflict for FOR in state 271 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 271 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 271 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 271 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 271 resolved as shift
WARNING: shift/reduce conflict for THROW in state 271 resolved as shift
WARNING: shift/reduce conflict for TRY in state 271 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 271 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 271 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 271 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 271 resolved as shift
WARNING: shift/reduce conflict for ID in state 271 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 271 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 271 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 271 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 271 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 271 resolved as shift
WARNING: shift/reduce conflict for NOT in state 271 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 271 resolved as shift
WARNING: shift/reduce conflict for NEW in state 271 resolved as shift
WARNING: shift/reduce conflict for INC in state 271 resolved as shift
WARNING: shift/reduce conflict for DEC in state 271 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 271 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 271 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 271 resolved as shift
WARNING: shift/reduce conflict for VAR in state 271 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 271 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 271 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 271 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 285 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 311 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 342 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 342 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 342 resolved as shift
WARNING: shift/reduce conflict for IF in state 342 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 342 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 342 resolved as shift
WARNING: shift/reduce conflict for WITH in state 342 resolved as shift
WARNING: shift/reduce conflict for DO in state 342 resolved as shift
WARNING: shift/reduce conflict for FOR in state 342 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 342 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 342 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 342 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 342 resolved as shift
WARNING: shift/reduce conflict for THROW in state 342 resolved as shift
WARNING: shift/reduce conflict for TRY in state 342 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 342 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 342 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 342 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 342 resolved as shift
WARNING: shift/reduce conflict for ID in state 342 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 342 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 342 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 342 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 342 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 342 resolved as shift
WARNING: shift/reduce conflict for NOT in state 342 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 342 resolved as shift
WARNING: shift/reduce conflict for NEW in state 342 resolved as shift
WARNING: shift/reduce conflict for INC in state 342 resolved as shift
WARNING: shift/reduce conflict for DEC in state 342 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 342 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 342 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 342 resolved as shift
WARNING: shift/reduce conflict for VAR in state 342 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 342 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 342 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 342 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 357 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 357 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 357 resolved as shift
WARNING: shift/reduce conflict for IF in state 357 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 357 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 357 resolved as shift
WARNING: shift/reduce conflict for WITH in state 357 resolved as shift
WARNING: shift/reduce conflict for DO in state 357 resolved as shift
WARNING: shift/reduce conflict for FOR in state 357 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 357 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 357 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 357 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 357 resolved as shift
WARNING: shift/reduce conflict for THROW in state 357 resolved as shift
WARNING: shift/reduce conflict for TRY in state 357 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 357 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 357 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 357 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 357 resolved as shift
WARNING: shift/reduce conflict for ID in state 357 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 357 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 357 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 357 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 357 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 357 resolved as shift
WARNING: shift/reduce conflict for NOT in state 357 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 357 resolved as shift
WARNING: shift/reduce conflict for NEW in state 357 resolved as shift
WARNING: shift/reduce conflict for INC in state 357 resolved as shift
WARNING: shift/reduce conflict for DEC in state 357 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 357 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 357 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 357 resolved as shift
WARNING: shift/reduce conflict for VAR in state 357 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 357 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 357 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 357 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 360 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 360 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 360 resolved as shift
WARNING: shift/reduce conflict for IF in state 360 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 360 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 360 resolved as shift
WARNING: shift/reduce conflict for WITH in state 360 resolved as shift
WARNING: shift/reduce conflict for DO in state 360 resolved as shift
WARNING: shift/reduce conflict for FOR in state 360 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 360 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 360 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 360 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 360 resolved as shift
WARNING: shift/reduce conflict for THROW in state 360 resolved as shift
WARNING: shift/reduce conflict for TRY in state 360 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 360 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 360 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 360 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 360 resolved as shift
WARNING: shift/reduce conflict for ID in state 360 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 360 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 360 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 360 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 360 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 360 resolved as shift
WARNING: shift/reduce conflict for NOT in state 360 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 360 resolved as shift
WARNING: shift/reduce conflict for NEW in state 360 resolved as shift
WARNING: shift/reduce conflict for INC in state 360 resolved as shift
WARNING: shift/reduce conflict for DEC in state 360 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 360 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 360 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 360 resolved as shift
WARNING: shift/reduce conflict for VAR in state 360 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 360 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 360 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 360 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 373 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 408 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 408 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 408 resolved as shift
WARNING: shift/reduce conflict for IF in state 408 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 408 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 408 resolved as shift
WARNING: shift/reduce conflict for WITH in state 408 resolved as shift
WARNING: shift/reduce conflict for DO in state 408 resolved as shift
WARNING: shift/reduce conflict for FOR in state 408 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 408 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 408 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 408 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 408 resolved as shift
WARNING: shift/reduce conflict for THROW in state 408 resolved as shift
WARNING: shift/reduce conflict for TRY in state 408 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 408 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 408 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 408 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 408 resolved as shift
WARNING: shift/reduce conflict for ID in state 408 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 408 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 408 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 408 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 408 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 408 resolved as shift
WARNING: shift/reduce conflict for NOT in state 408 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 408 resolved as shift
WARNING: shift/reduce conflict for NEW in state 408 resolved as shift
WARNING: shift/reduce conflict for INC in state 408 resolved as shift
WARNING: shift/reduce conflict for DEC in state 408 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 408 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 408 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 408 resolved as shift
WARNING: shift/reduce conflict for VAR in state 408 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 408 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 408 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 408 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 419 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 419 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 419 resolved as shift
WARNING: shift/reduce conflict for IF in state 419 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 419 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 419 resolved as shift
WARNING: shift/reduce conflict for WITH in state 419 resolved as shift
WARNING: shift/reduce conflict for DO in state 419 resolved as shift
WARNING: shift/reduce conflict for FOR in state 419 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 419 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 419 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 419 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 419 resolved as shift
WARNING: shift/reduce conflict for THROW in state 419 resolved as shift
WARNING: shift/reduce conflict for TRY in state 419 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 419 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 419 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 419 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 419 resolved as shift
WARNING: shift/reduce conflict for ID in state 419 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 419 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 419 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 419 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 419 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 419 resolved as shift
WARNING: shift/reduce conflict for NOT in state 419 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 419 resolved as shift
WARNING: shift/reduce conflict for NEW in state 419 resolved as shift
WARNING: shift/reduce conflict for INC in state 419 resolved as shift
WARNING: shift/reduce conflict for DEC in state 419 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 419 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 419 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 419 resolved as shift
WARNING: shift/reduce conflict for VAR in state 419 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 419 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 419 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 419 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 420 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 420 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 420 resolved as shift
WARNING: shift/reduce conflict for IF in state 420 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 420 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 420 resolved as shift
WARNING: shift/reduce conflict for WITH in state 420 resolved as shift
WARNING: shift/reduce conflict for DO in state 420 resolved as shift
WARNING: shift/reduce conflict for FOR in state 420 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 420 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 420 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 420 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 420 resolved as shift
WARNING: shift/reduce conflict for THROW in state 420 resolved as shift
WARNING: shift/reduce conflict for TRY in state 420 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 420 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 420 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 420 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 420 resolved as shift
WARNING: shift/reduce conflict for ID in state 420 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 420 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 420 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 420 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 420 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 420 resolved as shift
WARNING: shift/reduce conflict for NOT in state 420 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 420 resolved as shift
WARNING: shift/reduce conflict for NEW in state 420 resolved as shift
WARNING: shift/reduce conflict for INC in state 420 resolved as shift
WARNING: shift/reduce conflict for DEC in state 420 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 420 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 420 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 420 resolved as shift
WARNING: shift/reduce conflict for VAR in state 420 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 420 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 420 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 420 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 429 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 429 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 429 resolved as shift
WARNING: shift/reduce conflict for IF in state 429 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 429 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 429 resolved as shift
WARNING: shift/reduce conflict for WITH in state 429 resolved as shift
WARNING: shift/reduce conflict for DO in state 429 resolved as shift
WARNING: shift/reduce conflict for FOR in state 429 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 429 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 429 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 429 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 429 resolved as shift
WARNING: shift/reduce conflict for THROW in state 429 resolved as shift
WARNING: shift/reduce conflict for TRY in state 429 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 429 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 429 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 429 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 429 resolved as shift
WARNING: shift/reduce conflict for ID in state 429 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 429 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 429 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 429 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 429 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 429 resolved as shift
WARNING: shift/reduce conflict for NOT in state 429 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 429 resolved as shift
WARNING: shift/reduce conflict for NEW in state 429 resolved as shift
WARNING: shift/reduce conflict for INC in state 429 resolved as shift
WARNING: shift/reduce conflict for DEC in state 429 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 429 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 429 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 429 resolved as shift
WARNING: shift/reduce conflict for VAR in state 429 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 429 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 429 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 429 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 431 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 431 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 431 resolved as shift
WARNING: shift/reduce conflict for IF in state 431 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 431 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 431 resolved as shift
WARNING: shift/reduce conflict for WITH in state 431 resolved as shift
WARNING: shift/reduce conflict for DO in state 431 resolved as shift
WARNING: shift/reduce conflict for FOR in state 431 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 431 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 431 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 431 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 431 resolved as shift
WARNING: shift/reduce conflict for THROW in state 431 resolved as shift
WARNING: shift/reduce conflict for TRY in state 431 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 431 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 431 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 431 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 431 resolved as shift
WARNING: shift/reduce conflict for ID in state 431 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 431 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 431 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 431 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 431 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 431 resolved as shift
WARNING: shift/reduce conflict for NOT in state 431 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 431 resolved as shift
WARNING: shift/reduce conflict for NEW in state 431 resolved as shift
WARNING: shift/reduce conflict for INC in state 431 resolved as shift
WARNING: shift/reduce conflict for DEC in state 431 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 431 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 431 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 431 resolved as shift
WARNING: shift/reduce conflict for VAR in state 431 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 431 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 431 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 431 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 435 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 435 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 435 resolved as shift
WARNING: shift/reduce conflict for IF in state 435 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 435 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 435 resolved as shift
WARNING: shift/reduce conflict for WITH in state 435 resolved as shift
WARNING: shift/reduce conflict for DO in state 435 resolved as shift
WARNING: shift/reduce conflict for FOR in state 435 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 435 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 435 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 435 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 435 resolved as shift
WARNING: shift/reduce conflict for THROW in state 435 resolved as shift
WARNING: shift/reduce conflict for TRY in state 435 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 435 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 435 resolved as shift
WARNING: shift/reduce conflict for NATIVE in state 435 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 435 resolved as shift
WARNING: shift/reduce conflict for ID in state 435 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 435 resolved as shift
WARNING: shift/reduce conflict for STRINGLIT in state 435 resolved as shift
WARNING: shift/reduce conflict for LSBRACKET in state 435 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 435 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 435 resolved as shift
WARNING: shift/reduce conflict for NOT in state 435 resolved as shift
WARNING: shift/reduce conflict for BITINV in state 435 resolved as shift
WARNING: shift/reduce conflict for NEW in state 435 resolved as shift
WARNING: shift/reduce conflict for INC in state 435 resolved as shift
WARNING: shift/reduce conflict for DEC in state 435 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 435 resolved as shift
WARNING: shift/reduce conflict for REGEXPR in state 435 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 435 resolved as shift
WARNING: shift/reduce conflict for VAR in state 435 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 435 resolved as shift
WARNING: shift/reduce conflict for TLTHAN in state 435 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 435 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (statement -> if)
WARNING: rejected rule (statement_nonctrl -> if) in state 2
WARNING: reduce/reduce conflict in state 3 resolved using rule (statement -> for)
WARNING: rejected rule (statement_nonctrl -> for) in state 3
WARNING: reduce/reduce conflict in state 29 resolved using rule (statement -> catch)
WARNING: rejected rule (statement_nonctrl -> catch) in state 29
WARNING: reduce/reduce conflict in state 41 resolved using rule (statement -> while)
WARNING: rejected rule (statement_nonctrl -> while) in state 41
WARNING: reduce/reduce conflict in state 56 resolved using rule (statement -> dowhile)
WARNING: rejected rule (statement_nonctrl -> dowhile) in state 56
WARNING: reduce/reduce conflict in state 60 resolved using rule (statement -> try)
WARNING: rejected rule (statement_nonctrl -> try) in state 60
WARNING: reduce/reduce conflict in state 71 resolved using rule (statement -> else)
WARNING: rejected rule (statement_nonctrl -> else) in state 71
WARNING: reduce/reduce conflict in state 83 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (typeof -> TYPEOF expr) in state 83
WARNING: reduce/reduce conflict in state 84 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (bitinv -> BITINV expr) in state 84
WARNING: reduce/reduce conflict in state 85 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (new -> NEW expr) in state 85
WARNING: reduce/reduce conflict in state 101 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 101
WARNING: reduce/reduce conflict in state 153 resolved using rule (statement -> return SEMI)
WARNING: rejected rule (statement_nonctrl -> return SEMI) in state 153
WARNING: reduce/reduce conflict in state 154 resolved using rule (statement -> throw SEMI)
WARNING: rejected rule (statement_nonctrl -> throw SEMI) in state 154
WARNING: reduce/reduce conflict in state 156 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr_uminus -> MINUS expr) in state 156
WARNING: reduce/reduce conflict in state 160 resolved using rule (statement_nonctrl -> SEMI)
WARNING: rejected rule (ctrl_statement -> SEMI) in state 160
WARNING: reduce/reduce conflict in state 162 resolved using rule (lbracket_restrict -> LBRACKET)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 162
WARNING: reduce/reduce conflict in state 162 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 162
WARNING: reduce/reduce conflict in state 167 resolved using rule (statement -> yield SEMI)
WARNING: rejected rule (statement_nonctrl -> yield SEMI) in state 167
WARNING: reduce/reduce conflict in state 168 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (not -> NOT expr) in state 168
WARNING: reduce/reduce conflict in state 176 resolved using rule (statement -> break SEMI)
WARNING: rejected rule (statement_nonctrl -> break SEMI) in state 176
WARNING: reduce/reduce conflict in state 178 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (inc -> INC expr) in state 178
WARNING: reduce/reduce conflict in state 203 resolved using rule (statement -> continue SEMI)
WARNING: rejected rule (statement_nonctrl -> continue SEMI) in state 203
WARNING: reduce/reduce conflict in state 205 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (dec -> DEC expr) in state 205
WARNING: reduce/reduce conflict in state 225 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr BXOR expr) in state 225
WARNING: reduce/reduce conflict in state 226 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LSHIFT expr) in state 226
WARNING: reduce/reduce conflict in state 227 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr IN expr) in state 227
WARNING: reduce/reduce conflict in state 229 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr TIMES expr) in state 229
WARNING: reduce/reduce conflict in state 230 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr DOT expr) in state 230
WARNING: reduce/reduce conflict in state 231 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr BOR expr) in state 231
WARNING: reduce/reduce conflict in state 232 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LTHANEQ expr) in state 232
WARNING: reduce/reduce conflict in state 233 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr NOTEQUAL expr) in state 233
WARNING: reduce/reduce conflict in state 234 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr NOTEQUAL_STRICT expr) in state 234
WARNING: reduce/reduce conflict in state 235 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr MOD expr) in state 235
WARNING: reduce/reduce conflict in state 236 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LOR expr) in state 236
WARNING: reduce/reduce conflict in state 238 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr GTHAN expr) in state 238
WARNING: reduce/reduce conflict in state 240 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr EQUAL_STRICT expr) in state 240
WARNING: reduce/reduce conflict in state 241 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr BAND expr) in state 241
WARNING: reduce/reduce conflict in state 242 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr MINUS expr) in state 242
WARNING: reduce/reduce conflict in state 243 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LLSHIFT expr) in state 243
WARNING: reduce/reduce conflict in state 244 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr DIVIDE expr) in state 244
WARNING: reduce/reduce conflict in state 245 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr GTHANEQ expr) in state 245
WARNING: reduce/reduce conflict in state 246 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr EQUAL expr) in state 246
WARNING: reduce/reduce conflict in state 247 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr RRSHIFT expr) in state 247
WARNING: reduce/reduce conflict in state 248 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LTHAN expr) in state 248
WARNING: reduce/reduce conflict in state 249 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr LAND expr) in state 249
WARNING: reduce/reduce conflict in state 250 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr COMMA expr) in state 250
WARNING: reduce/reduce conflict in state 251 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr RSHIFT expr) in state 251
WARNING: reduce/reduce conflict in state 252 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr INSTANCEOF expr) in state 252
WARNING: reduce/reduce conflict in state 253 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr cmplx_assign expr) in state 253
WARNING: reduce/reduce conflict in state 254 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr PLUS expr) in state 254
WARNING: reduce/reduce conflict in state 257 resolved using rule (lbracket_restrict -> LBRACKET)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 257
WARNING: reduce/reduce conflict in state 257 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 257
WARNING: reduce/reduce conflict in state 271 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 271
WARNING: reduce/reduce conflict in state 335 resolved using rule (template_ref_opt -> <empty>)
WARNING: rejected rule (expr -> expr QEST expr COLON expr) in state 335
WARNING: reduce/reduce conflict in state 342 resolved using rule (lbracket_restrict -> LBRACKET)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 342
WARNING: reduce/reduce conflict in state 342 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (lbracket_restrict -> LBRACKET) in state 342
WARNING: reduce/reduce conflict in state 357 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 357
WARNING: reduce/reduce conflict in state 408 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 408
WARNING: reduce/reduce conflict in state 419 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 419
WARNING: reduce/reduce conflict in state 420 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 420
WARNING: reduce/reduce conflict in state 429 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 429
WARNING: reduce/reduce conflict in state 431 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 431
WARNING: reduce/reduce conflict in state 435 resolved using rule (statementlist -> <empty>)
WARNING: rejected rule (statementlist_opt -> <empty>) in state 435
WARNING: Rule (ctrl_statement -> SEMI) is never reduced
WARNING: Rule (statementlist_opt -> <empty>) is never reduced
